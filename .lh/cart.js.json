{
    "sourceFile": "cart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1739277730354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739277752407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n // getFromCart\n app.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1739277760705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,9 @@\n+const express = require(\"express\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const router= express.Router();\n+const ordersPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n app.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n"
                },
                {
                    "date": 1739277767434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n-const ordersPath = path.join(__dirname, \"cart.json\");\n+const cartPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n app.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n"
                },
                {
                    "date": 1739277790677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,5 +152,7 @@\n   \n         res.json({ message: \"Item deleted successfully\" });\n       });\n     });\n-  });\n\\ No newline at end of file\n+  });\n+\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277796379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  \n\\ No newline at end of file\n+  module.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277802924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  module.\n\\ No newline at end of file\n+  module.export \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277822797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  module.export \n\\ No newline at end of file\n+  module.export = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277828370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  module.export = router\n\\ No newline at end of file\n+  module.export = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277869840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const router= express.Router();\n const cartPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n-app.get(\"/cart\", (req, res) => {\n+.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -14,9 +14,9 @@\n     });\n   });\n   \n   // addToCart\n-  app.post(\"/addToCart\", (req, res) => {\n+  .post(\"/addToCart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -42,9 +42,9 @@\n     const data = { products };\n     fs.writeFileSync(cartPath, JSON.stringify(data, null, 2));\n   };\n   // Endpoint to get a single product by id\n-  app.get(\"/cart/:id\", (req, res) => {\n+  .get(\"/cart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const product = products.find((p) => p.id === id);\n@@ -57,9 +57,9 @@\n     }\n   });\n   \n   // PATCH endpoint to update a product partially\n-  app.patch(\"/updatCart/:id\", (req, res) => {\n+  .patch(\"/updatCart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const index = products.findIndex((p) => p.id === id);\n@@ -82,9 +82,9 @@\n     }\n   });\n   \n   // Increment cart*\n-  app.put(\"/cart/:id/increment\", (req, res) => {\n+  .put(\"/cart/:id/increment\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -106,9 +106,9 @@\n     });\n   });\n   \n   // decrement cart*\n-  app.put(\"/cart/:id/decrement\", (req, res) => {\n+  .put(\"/cart/:id/decrement\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -130,9 +130,9 @@\n     });\n   });\n   \n   // *API to Delete an cart by ID*\n-  app.delete(\"/cartRemoveItem/:id\", (req, res) => {\n+  .delete(\"/cartRemoveItem/:id\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n"
                },
                {
                    "date": 1739278155794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n+const app = express();\n const cartPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n-.get(\"/cart\", (req, res) => {\n+router.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -14,9 +15,9 @@\n     });\n   });\n   \n   // addToCart\n-  .post(\"/addToCart\", (req, res) => {\n+  router.post(\"/addToCart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -42,9 +43,9 @@\n     const data = { products };\n     fs.writeFileSync(cartPath, JSON.stringify(data, null, 2));\n   };\n   // Endpoint to get a single product by id\n-  .get(\"/cart/:id\", (req, res) => {\n+  router.get(\"/cart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const product = products.find((p) => p.id === id);\n@@ -57,9 +58,9 @@\n     }\n   });\n   \n   // PATCH endpoint to update a product partially\n-  .patch(\"/updatCart/:id\", (req, res) => {\n+  router.patch(\"/updatCart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const index = products.findIndex((p) => p.id === id);\n@@ -82,9 +83,9 @@\n     }\n   });\n   \n   // Increment cart*\n-  .put(\"/cart/:id/increment\", (req, res) => {\n+  router.put(\"/cart/:id/increment\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -106,9 +107,9 @@\n     });\n   });\n   \n   // decrement cart*\n-  .put(\"/cart/:id/decrement\", (req, res) => {\n+  router.put(\"/cart/:id/decrement\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -130,9 +131,9 @@\n     });\n   });\n   \n   // *API to Delete an cart by ID*\n-  .delete(\"/cartRemoveItem/:id\", (req, res) => {\n+  router.delete(\"/cartRemoveItem/:id\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n"
                },
                {
                    "date": 1739278226057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,5 +155,5 @@\n       });\n     });\n   });\n \n-  module.export = router;\n\\ No newline at end of file\n+  module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739277730354,
            "name": "Commit-0",
            "content": "// getFromCart\napp.get(\"/cart\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      res.json(jsonData.cart);\n    });\n  });\n  \n  // addToCart\n  app.post(\"/addToCart\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      const item = { id: jsonData.cart.length + 1, ...req.body };\n      jsonData.cart.push(item);\n  \n      fs.writeFile(cartPath, JSON.stringify(jsonData, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving data\" });\n        res.status(201).json(item);\n      });\n    });\n  });\n  \n  // Utility: Read products data from file\n  const readProductsCart = () => {\n    const rawData = fs.readFileSync(cartPath);\n    const data = JSON.parse(rawData);\n    return data.products;\n  };\n  \n  // Utility: Write updated products back to file\n  const writeProductsCart = (products) => {\n    const data = { products };\n    fs.writeFileSync(cartPath, JSON.stringify(data, null, 2));\n  };\n  // Endpoint to get a single product by id\n  app.get(\"/cart/:id\", (req, res) => {\n    try {\n      const products = readProductsCart();\n      const id = parseInt(req.params.id, 10);\n      const product = products.find((p) => p.id === id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to read products data\" });\n    }\n  });\n  \n  // PATCH endpoint to update a product partially\n  app.patch(\"/updatCart/:id\", (req, res) => {\n    try {\n      const products = readProductsCart();\n      const id = parseInt(req.params.id, 10);\n      const index = products.findIndex((p) => p.id === id);\n  \n      if (index === -1) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n  \n      // Merge the existing product with the fields sent in the request body\n      const updatedProduct = { ...products[index], ...req.body };\n      products[index] = updatedProduct;\n  \n      // Write the updated products back to the file\n      writeProductsCart(products);\n  \n      res.json(updatedProduct);\n    } catch (err) {\n      console.error(\"Error patching product:\", err);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n  \n  // Increment cart*\n  app.put(\"/cart/:id/increment\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item\n      let item = db.cart.find((item) => item.id === itemId);\n      if (!item) return res.status(404).json({ message: \"Item not found\" });\n  \n      // Increment the count\n      item.quantity++;\n  \n      // Save updated data to db.json\n      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"Item count incremented\", item });\n      });\n    });\n  });\n  \n  // decrement cart*\n  app.put(\"/cart/:id/decrement\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item\n      let item = db.cart.find((item) => item.id === itemId);\n      if (!item) return res.status(404).json({ message: \"Item not found\" });\n  \n      // decrement the count\n      item.quantity--;\n  \n      // Save updated data to db.json\n      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"Item count decremented\", item });\n      });\n    });\n  });\n  \n  // *API to Delete an cart by ID*\n  app.delete(\"/cartRemoveItem/:id\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item index\n      const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n      if (itemIndex === -1)\n        return res.status(404).json({ message: \"Item not found\" });\n  \n      // Remove the item\n      db.cart.splice(itemIndex, 1);\n  \n      // Save updated data to db.json\n      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"Item deleted successfully\" });\n      });\n    });\n  });"
        }
    ]
}