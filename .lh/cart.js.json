{
    "sourceFile": "cart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1739277730354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739277752407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n // getFromCart\n app.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1739277760705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,9 @@\n+const express = require(\"express\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const router= express.Router();\n+const ordersPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n app.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n"
                },
                {
                    "date": 1739277767434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n-const ordersPath = path.join(__dirname, \"cart.json\");\n+const cartPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n app.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n"
                },
                {
                    "date": 1739277790677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,5 +152,7 @@\n   \n         res.json({ message: \"Item deleted successfully\" });\n       });\n     });\n-  });\n\\ No newline at end of file\n+  });\n+\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277796379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  \n\\ No newline at end of file\n+  module.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277802924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  module.\n\\ No newline at end of file\n+  module.export \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277822797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  module.export \n\\ No newline at end of file\n+  module.export = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277828370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,5 @@\n       });\n     });\n   });\n \n-  module.export = router\n\\ No newline at end of file\n+  module.export = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277869840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const router= express.Router();\n const cartPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n-app.get(\"/cart\", (req, res) => {\n+.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -14,9 +14,9 @@\n     });\n   });\n   \n   // addToCart\n-  app.post(\"/addToCart\", (req, res) => {\n+  .post(\"/addToCart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -42,9 +42,9 @@\n     const data = { products };\n     fs.writeFileSync(cartPath, JSON.stringify(data, null, 2));\n   };\n   // Endpoint to get a single product by id\n-  app.get(\"/cart/:id\", (req, res) => {\n+  .get(\"/cart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const product = products.find((p) => p.id === id);\n@@ -57,9 +57,9 @@\n     }\n   });\n   \n   // PATCH endpoint to update a product partially\n-  app.patch(\"/updatCart/:id\", (req, res) => {\n+  .patch(\"/updatCart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const index = products.findIndex((p) => p.id === id);\n@@ -82,9 +82,9 @@\n     }\n   });\n   \n   // Increment cart*\n-  app.put(\"/cart/:id/increment\", (req, res) => {\n+  .put(\"/cart/:id/increment\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -106,9 +106,9 @@\n     });\n   });\n   \n   // decrement cart*\n-  app.put(\"/cart/:id/decrement\", (req, res) => {\n+  .put(\"/cart/:id/decrement\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -130,9 +130,9 @@\n     });\n   });\n   \n   // *API to Delete an cart by ID*\n-  app.delete(\"/cartRemoveItem/:id\", (req, res) => {\n+  .delete(\"/cartRemoveItem/:id\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n"
                },
                {
                    "date": 1739278155794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n+const app = express();\n const cartPath = path.join(__dirname, \"cart.json\");\n \n // getFromCart\n-.get(\"/cart\", (req, res) => {\n+router.get(\"/cart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -14,9 +15,9 @@\n     });\n   });\n   \n   // addToCart\n-  .post(\"/addToCart\", (req, res) => {\n+  router.post(\"/addToCart\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       const jsonData = JSON.parse(data);\n@@ -42,9 +43,9 @@\n     const data = { products };\n     fs.writeFileSync(cartPath, JSON.stringify(data, null, 2));\n   };\n   // Endpoint to get a single product by id\n-  .get(\"/cart/:id\", (req, res) => {\n+  router.get(\"/cart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const product = products.find((p) => p.id === id);\n@@ -57,9 +58,9 @@\n     }\n   });\n   \n   // PATCH endpoint to update a product partially\n-  .patch(\"/updatCart/:id\", (req, res) => {\n+  router.patch(\"/updatCart/:id\", (req, res) => {\n     try {\n       const products = readProductsCart();\n       const id = parseInt(req.params.id, 10);\n       const index = products.findIndex((p) => p.id === id);\n@@ -82,9 +83,9 @@\n     }\n   });\n   \n   // Increment cart*\n-  .put(\"/cart/:id/increment\", (req, res) => {\n+  router.put(\"/cart/:id/increment\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -106,9 +107,9 @@\n     });\n   });\n   \n   // decrement cart*\n-  .put(\"/cart/:id/decrement\", (req, res) => {\n+  router.put(\"/cart/:id/decrement\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n@@ -130,9 +131,9 @@\n     });\n   });\n   \n   // *API to Delete an cart by ID*\n-  .delete(\"/cartRemoveItem/:id\", (req, res) => {\n+  router.delete(\"/cartRemoveItem/:id\", (req, res) => {\n     fs.readFile(cartPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n   \n       let db = JSON.parse(data);\n"
                },
                {
                    "date": 1739278226057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,5 +155,5 @@\n       });\n     });\n   });\n \n-  module.export = router;\n\\ No newline at end of file\n+  module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740484154387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,159 +1,109 @@\n const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const cors = require(\"cors\");\n const fs = require(\"fs\");\n-const path = require(\"path\");\n-const router= express.Router();\n+const bodyParser = require(\"body-parser\");\n+require(\"dotenv\").config();\n+\n const app = express();\n-const cartPath = path.join(__dirname, \"cart.json\");\n+const PORT = 3000;\n+const CART_DB = \"./cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; // Store secret key in .env\n \n-// getFromCart\n-router.get(\"/cart\", (req, res) => {\n-    fs.readFile(cartPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      res.json(jsonData.cart);\n-    });\n-  });\n-  \n-  // addToCart\n-  router.post(\"/addToCart\", (req, res) => {\n-    fs.readFile(cartPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      const item = { id: jsonData.cart.length + 1, ...req.body };\n-      jsonData.cart.push(item);\n-  \n-      fs.writeFile(cartPath, JSON.stringify(jsonData, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving data\" });\n-        res.status(201).json(item);\n-      });\n-    });\n-  });\n-  \n-  // Utility: Read products data from file\n-  const readProductsCart = () => {\n-    const rawData = fs.readFileSync(cartPath);\n-    const data = JSON.parse(rawData);\n-    return data.products;\n-  };\n-  \n-  // Utility: Write updated products back to file\n-  const writeProductsCart = (products) => {\n-    const data = { products };\n-    fs.writeFileSync(cartPath, JSON.stringify(data, null, 2));\n-  };\n-  // Endpoint to get a single product by id\n-  router.get(\"/cart/:id\", (req, res) => {\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+// Read cart data\n+const readCartDB = () => {\n     try {\n-      const products = readProductsCart();\n-      const id = parseInt(req.params.id, 10);\n-      const product = products.find((p) => p.id === id);\n-      if (!product) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-      res.json(product);\n-    } catch (err) {\n-      res.status(500).json({ error: \"Failed to read products data\" });\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return {};\n     }\n-  });\n-  \n-  // PATCH endpoint to update a product partially\n-  router.patch(\"/updatCart/:id\", (req, res) => {\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n     try {\n-      const products = readProductsCart();\n-      const id = parseInt(req.params.id, 10);\n-      const index = products.findIndex((p) => p.id === id);\n-  \n-      if (index === -1) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-  \n-      // Merge the existing product with the fields sent in the request body\n-      const updatedProduct = { ...products[index], ...req.body };\n-      products[index] = updatedProduct;\n-  \n-      // Write the updated products back to the file\n-      writeProductsCart(products);\n-  \n-      res.json(updatedProduct);\n-    } catch (err) {\n-      console.error(\"Error patching product:\", err);\n-      res.status(500).json({ error: \"Failed to update product\" });\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n     }\n-  });\n-  \n-  // Increment cart*\n-  router.put(\"/cart/:id/increment\", (req, res) => {\n-    fs.readFile(cartPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      let db = JSON.parse(data);\n-      const itemId = parseInt(req.params.id);\n-  \n-      // Find the item\n-      let item = db.cart.find((item) => item.id === itemId);\n-      if (!item) return res.status(404).json({ message: \"Item not found\" });\n-  \n-      // Increment the count\n-      item.quantity++;\n-  \n-      // Save updated data to db.json\n-      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving database\" });\n-  \n-        res.json({ message: \"Item count incremented\", item });\n-      });\n-    });\n-  });\n-  \n-  // decrement cart*\n-  router.put(\"/cart/:id/decrement\", (req, res) => {\n-    fs.readFile(cartPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      let db = JSON.parse(data);\n-      const itemId = parseInt(req.params.id);\n-  \n-      // Find the item\n-      let item = db.cart.find((item) => item.id === itemId);\n-      if (!item) return res.status(404).json({ message: \"Item not found\" });\n-  \n-      // decrement the count\n-      item.quantity--;\n-  \n\\ No newline at end of file\n-      // Save updated data to db.json\n-      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving database\" });\n-  \n-        res.json({ message: \"Item count decremented\", item });\n-      });\n-    });\n-  });\n-  \n-  // *API to Delete an cart by ID*\n-  router.delete(\"/cartRemoveItem/:id\", (req, res) => {\n-    fs.readFile(cartPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      let db = JSON.parse(data);\n-      const itemId = parseInt(req.params.id);\n-  \n-      // Find the item index\n-      const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n-      if (itemIndex === -1)\n-        return res.status(404).json({ message: \"Item not found\" });\n-  \n-      // Remove the item\n-      db.cart.splice(itemIndex, 1);\n-  \n-      // Save updated data to db.json\n-      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving database\" });\n-  \n-        res.json({ message: \"Item deleted successfully\" });\n-      });\n-    });\n-  });\n+};\n \n-  module.exports = router;\n+// *1. Get User Cart*\n+app.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db[req.userId] || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// *2. Add to Cart*\n+app.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+        db[req.userId] = userCart;\n+        writeCartDB(db);\n+    }\n+\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+// *3. Remove from Cart*\n+app.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    userCart = userCart.filter(item => item.id !== productId);\n+    db[req.userId] = userCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: userCart });\n+});\n+\n+// *4. Merge Local Cart with Server Cart*\n+app.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Merge local cart and server cart (remove duplicates)\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+    db[req.userId] = mergedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// *5. Clear Cart (Logout)*\n+app.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db[req.userId] = [];\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+// *Start Server*\n+app.listen(PORT, () => {\n+    console.log(Server running on http://localhost:${PORT});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740484162886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,6 +104,6 @@\n });\n \n // *Start Server*\n app.listen(PORT, () => {\n-    console.log(Server running on http://localhost:${PORT});\n+    console.log(`Server running on http://localhost:${PORT});\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740484217557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const bodyParser = require(\"body-parser\");\n require(\"dotenv\").config();\n \n const app = express();\n-const PORT = 3000;\n+const PORT = 3001;\n const CART_DB = \"./cart.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; // Store secret key in .env\n \n app.use(cors());\n@@ -104,6 +104,6 @@\n });\n \n // *Start Server*\n app.listen(PORT, () => {\n-    console.log(`Server running on http://localhost:${PORT});\n+    console.log(`Server running on http://localhost:${PORT}`);\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487015786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const bodyParser = require(\"body-parser\");\n require(\"dotenv\").config();\n \n const app = express();\n-const PORT = 3001;\n+const PORT = 300;\n const CART_DB = \"./cart.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; // Store secret key in .env\n \n app.use(cors());\n"
                },
                {
                    "date": 1740487027588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,100 @@\n const express = require(\"express\");\n+const fs = require(\"fs\");\n+const cors = require(\"cors\");\n const jwt = require(\"jsonwebtoken\");\n-const cors = require(\"cors\");\n-const fs = require(\"fs\");\n-const bodyParser = require(\"body-parser\");\n-require(\"dotenv\").config();\n \n const app = express();\n-const PORT = 300;\n-const CART_DB = \"./cart.json\";\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; // Store secret key in .env\n-\n+app.use(express.json());\n app.use(cors());\n-app.use(bodyParser.json());\n \n-// Read cart data\n-const readCartDB = () => {\n-    try {\n-        const data = fs.readFileSync(CART_DB, \"utf8\");\n-        return JSON.parse(data);\n-    } catch (error) {\n-        console.error(\"Error reading cart database:\", error);\n-        return {};\n-    }\n-};\n+const CART_FILE = \"./cart.json\";\n+const JWT_SECRET = \"your_secret_key\"; // Change this in production\n \n-// Write cart data\n-const writeCartDB = (data) => {\n-    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n-};\n-\n-// Middleware: Verify Token\n-const verifyToken = (req, res, next) => {\n+// *🔹 Load Cart*\n+app.get(\"/cart\", (req, res) => {\n     const token = req.headers.authorization?.split(\" \")[1];\n     if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n \n     try {\n         const decoded = jwt.verify(token, JWT_SECRET);\n-        req.userId = decoded.userId;\n-        next();\n+        const userId = decoded.userId;\n+\n+        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n+            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n+\n+            let db = JSON.parse(data);\n+            let userCart = db.cart.find(cart => cart.userId === userId) || { cart: [] };\n+\n+            res.json(userCart);\n+        });\n     } catch (error) {\n         res.status(401).json({ message: \"Invalid token\" });\n     }\n-};\n-\n-// *1. Get User Cart*\n-app.get(\"/cart\", verifyToken, (req, res) => {\n-    const db = readCartDB();\n-    const userCart = db[req.userId] || [];\n-    res.json({ cart: userCart });\n });\n \n-// *2. Add to Cart*\n-app.post(\"/cart\", verifyToken, (req, res) => {\n-    const { product } = req.body;\n-    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+// *🔹 Merge Cart After Login*\n+app.post(\"/cart/merge\", (req, res) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n \n-    let db = readCartDB();\n-    let userCart = db[req.userId] || [];\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        const userId = decoded.userId;\n+        const { mergedCart } = req.body;\n \n-    // Prevent duplicate products\n-    if (!userCart.find(item => item.id === product.id)) {\n-        userCart.push(product);\n-        db[req.userId] = userCart;\n-        writeCartDB(db);\n+        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n+            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n+\n+            let db = JSON.parse(data);\n+            let userCartIndex = db.cart.findIndex(cart => cart.userId === userId);\n+\n+            if (userCartIndex >= 0) {\n+                db.cart[userCartIndex].cart = mergedCart;\n+            } else {\n+                db.cart.push({ userId, cart: mergedCart });\n+            }\n+\n+            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n+                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n+                res.json({ message: \"Cart merged successfully\" });\n+            });\n+        });\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n\\ No newline at end of file\n     }\n-\n-    res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n-// *3. Remove from Cart*\n-app.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n-    const { productId } = req.params;\n-    let db = readCartDB();\n-    let userCart = db[req.userId] || [];\n+// *🔹 Add to Cart*\n+app.post(\"/cart\", (req, res) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n \n-    userCart = userCart.filter(item => item.id !== productId);\n-    db[req.userId] = userCart;\n-    writeCartDB(db);\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        const userId = decoded.userId;\n+        const { product } = req.body;\n \n-    res.json({ message: \"Product removed from cart\", cart: userCart });\n-});\n+        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n+            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n \n-// *4. Merge Local Cart with Server Cart*\n-app.post(\"/cart/merge\", verifyToken, (req, res) => {\n-    const { localCart } = req.body;\n-    let db = readCartDB();\n-    let userCart = db[req.userId] || [];\n+            let db = JSON.parse(data);\n+            let userCart = db.cart.find(cart => cart.userId === userId);\n \n-    // Merge local cart and server cart (remove duplicates)\n-    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n-    db[req.userId] = mergedCart;\n-    writeCartDB(db);\n+            if (userCart) {\n+                userCart.cart.push(product);\n+            } else {\n+                db.cart.push({ userId, cart: [product] });\n+            }\n \n-    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n+                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n+                res.json({ message: \"Product added to cart\" });\n+            });\n+        });\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n });\n \n-// *5. Clear Cart (Logout)*\n-app.delete(\"/cart\", verifyToken, (req, res) => {\n-    let db = readCartDB();\n-    db[req.userId] = [];\n-    writeCartDB(db);\n-    res.json({ message: \"Cart cleared\" });\n-});\n-\n-// *Start Server*\n-app.listen(PORT, () => {\n-    console.log(`Server running on http://localhost:${PORT}`);\n-});\n+// *🔹 Start Server*\n+app.listen(3000, () => console.log(\"Server running on port 3000\"));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487197318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,5 +96,5 @@\n     }\n });\n \n // *🔹 Start Server*\n-app.listen(3000, () => console.log(\"Server running on port 3000\"));\n\\ No newline at end of file\n+app.listen(3000, () => console.log(\"Server running on port 3001\"));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487229072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,5 +96,5 @@\n     }\n });\n \n // *🔹 Start Server*\n-app.listen(3000, () => console.log(\"Server running on port 3001\"));\n\\ No newline at end of file\n+app.listen(3000, () => console.log(\"Server running on port 3002\"));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487254580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,5 +96,5 @@\n     }\n });\n \n // *🔹 Start Server*\n-app.listen(3000, () => console.log(\"Server running on port 3002\"));\n\\ No newline at end of file\n+app.listen(3000, () => console.log(\"Server running on port 3001\"));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487338407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,100 +1,109 @@\n const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const cors = require(\"cors\");\n const fs = require(\"fs\");\n-const cors = require(\"cors\");\n-const jwt = require(\"jsonwebtoken\");\n+const bodyParser = require(\"body-parser\");\n+require(\"dotenv\").config();\n \n const app = express();\n-app.use(express.json());\n+const PORT = 300;\n+const CART_DB = \"./cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; // Store secret key in .env\n+\n app.use(cors());\n+app.use(bodyParser.json());\n \n-const CART_FILE = \"./cart.json\";\n-const JWT_SECRET = \"your_secret_key\"; // Change this in production\n+// Read cart data\n+const readCartDB = () => {\n+    try {\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return {};\n+    }\n+};\n \n-// *🔹 Load Cart*\n-app.get(\"/cart\", (req, res) => {\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n     const token = req.headers.authorization?.split(\" \")[1];\n     if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n \n     try {\n         const decoded = jwt.verify(token, JWT_SECRET);\n-        const userId = decoded.userId;\n-\n-        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n-            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n-\n-            let db = JSON.parse(data);\n-            let userCart = db.cart.find(cart => cart.userId === userId) || { cart: [] };\n-\n-            res.json(userCart);\n-        });\n+        req.userId = decoded.userId;\n+        next();\n     } catch (error) {\n         res.status(401).json({ message: \"Invalid token\" });\n     }\n+};\n+\n+// *1. Get User Cart*\n+app.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db[req.userId] || [];\n+    res.json({ cart: userCart });\n });\n \n-// *🔹 Merge Cart After Login*\n-app.post(\"/cart/merge\", (req, res) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+// *2. Add to Cart*\n+app.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        const userId = decoded.userId;\n-        const { mergedCart } = req.body;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n \n-        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n-            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+        db[req.userId] = userCart;\n+        writeCartDB(db);\n+    }\n \n-            let db = JSON.parse(data);\n-            let userCartIndex = db.cart.findIndex(cart => cart.userId === userId);\n-\n-            if (userCartIndex >= 0) {\n-                db.cart[userCartIndex].cart = mergedCart;\n-            } else {\n\\ No newline at end of file\n-                db.cart.push({ userId, cart: mergedCart });\n-            }\n-\n-            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n-                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n-                res.json({ message: \"Cart merged successfully\" });\n-            });\n-        });\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n-// *🔹 Add to Cart*\n-app.post(\"/cart\", (req, res) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+// *3. Remove from Cart*\n+app.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n \n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        const userId = decoded.userId;\n-        const { product } = req.body;\n+    userCart = userCart.filter(item => item.id !== productId);\n+    db[req.userId] = userCart;\n+    writeCartDB(db);\n \n-        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n-            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n+    res.json({ message: \"Product removed from cart\", cart: userCart });\n+});\n \n-            let db = JSON.parse(data);\n-            let userCart = db.cart.find(cart => cart.userId === userId);\n+// *4. Merge Local Cart with Server Cart*\n+app.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n \n-            if (userCart) {\n-                userCart.cart.push(product);\n-            } else {\n-                db.cart.push({ userId, cart: [product] });\n-            }\n+    // Merge local cart and server cart (remove duplicates)\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+    db[req.userId] = mergedCart;\n+    writeCartDB(db);\n \n-            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n-                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n-                res.json({ message: \"Product added to cart\" });\n-            });\n-        });\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n });\n \n-// *🔹 Start Server*\n-app.listen(3000, () => console.log(\"Server running on port 3001\"));\n+// *5. Clear Cart (Logout)*\n+app.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db[req.userId] = [];\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+// *Start Server*\n+app.listen(PORT, () => {\n+    console.log(`Server running on http://localhost:${PORT}`);\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487348245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +0,0 @@\n-const express = require(\"express\");\n-const jwt = require(\"jsonwebtoken\");\n-const cors = require(\"cors\");\n-const fs = require(\"fs\");\n-const bodyParser = require(\"body-parser\");\n-require(\"dotenv\").config();\n-\n-const app = express();\n-const PORT = 300;\n-const CART_DB = \"./cart.json\";\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; // Store secret key in .env\n-\n-app.use(cors());\n-app.use(bodyParser.json());\n-\n-// Read cart data\n-const readCartDB = () => {\n-    try {\n-        const data = fs.readFileSync(CART_DB, \"utf8\");\n-        return JSON.parse(data);\n-    } catch (error) {\n-        console.error(\"Error reading cart database:\", error);\n-        return {};\n-    }\n-};\n-\n-// Write cart data\n-const writeCartDB = (data) => {\n-    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n-};\n-\n-// Middleware: Verify Token\n-const verifyToken = (req, res, next) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        req.userId = decoded.userId;\n-        next();\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n-};\n-\n-// *1. Get User Cart*\n-app.get(\"/cart\", verifyToken, (req, res) => {\n-    const db = readCartDB();\n-    const userCart = db[req.userId] || [];\n-    res.json({ cart: userCart });\n-});\n-\n-// *2. Add to Cart*\n-app.post(\"/cart\", verifyToken, (req, res) => {\n-    const { product } = req.body;\n-    if (!product) return res.status(400).json({ message: \"Product is required\" });\n-\n-    let db = readCartDB();\n-    let userCart = db[req.userId] || [];\n-\n-    // Prevent duplicate products\n-    if (!userCart.find(item => item.id === product.id)) {\n-        userCart.push(product);\n-        db[req.userId] = userCart;\n-        writeCartDB(db);\n-    }\n-\n-    res.json({ message: \"Product added to cart\", cart: userCart });\n-});\n-\n-// *3. Remove from Cart*\n-app.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n-    const { productId } = req.params;\n-    let db = readCartDB();\n-    let userCart = db[req.userId] || [];\n-\n-    userCart = userCart.filter(item => item.id !== productId);\n-    db[req.userId] = userCart;\n-    writeCartDB(db);\n-\n-    res.json({ message: \"Product removed from cart\", cart: userCart });\n-});\n-\n-// *4. Merge Local Cart with Server Cart*\n-app.post(\"/cart/merge\", verifyToken, (req, res) => {\n-    const { localCart } = req.body;\n-    let db = readCartDB();\n-    let userCart = db[req.userId] || [];\n-\n-    // Merge local cart and server cart (remove duplicates)\n-    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n-    db[req.userId] = mergedCart;\n-    writeCartDB(db);\n-\n-    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n-});\n-\n-// *5. Clear Cart (Logout)*\n-app.delete(\"/cart\", verifyToken, (req, res) => {\n-    let db = readCartDB();\n-    db[req.userId] = [];\n-    writeCartDB(db);\n-    res.json({ message: \"Cart cleared\" });\n-});\n-\n-// *Start Server*\n-app.listen(PORT, () => {\n-    console.log(`Server running on http://localhost:${PORT}`);\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487355261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+onst express = require(\"express\");\n+const fs = require(\"fs\");\n+const cors = require(\"cors\");\n+const jwt = require(\"jsonwebtoken\");\n+\n+const app = express();\n+app.use(express.json());\n+app.use(cors());\n+\n+const CART_FILE = \"./cart.json\";\n+const JWT_SECRET = \"your_secret_key\"; // Change this in production\n+\n+// *🔹 Load Cart*\n+app.get(\"/cart\", (req, res) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        const userId = decoded.userId;\n+\n+        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n+            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n+\n+            let db = JSON.parse(data);\n+            let userCart = db.cart.find(cart => cart.userId === userId) || { cart: [] };\n+\n+            res.json(userCart);\n+        });\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+});\n+\n+// *🔹 Merge Cart After Login*\n+app.post(\"/cart/merge\", (req, res) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        const userId = decoded.userId;\n+        const { mergedCart } = req.body;\n+\n+        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n+            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n+\n+            let db = JSON.parse(data);\n+            let userCartIndex = db.cart.findIndex(cart => cart.userId === userId);\n+\n+            if (userCartIndex >= 0) {\n+                db.cart[userCartIndex].cart = mergedCart;\n+            } else {\n+                db.cart.push({ userId, cart: mergedCart });\n+            }\n+\n+            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n+                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n+                res.json({ message: \"Cart merged successfully\" });\n+            });\n+        });\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+});\n+\n+// *🔹 Add to Cart*\n+app.post(\"/cart\", (req, res) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        const userId = decoded.userId;\n+        const { product } = req.body;\n+\n+        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n+            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n+\n+            let db = JSON.parse(data);\n+            let userCart = db.cart.find(cart => cart.userId === userId);\n+\n+            if (userCart) {\n+                userCart.cart.push(product);\n+            } else {\n+                db.cart.push({ userId, cart: [product] });\n+            }\n+\n+            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n+                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n+                res.json({ message: \"Product added to cart\" });\n+            });\n+        });\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+});\n+\n+// *🔹 Start Server*\n+app.listen(3000, () => console.log(\"Server running on port 3000\"));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487363702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,100 +0,0 @@\n-onst express = require(\"express\");\n-const fs = require(\"fs\");\n-const cors = require(\"cors\");\n-const jwt = require(\"jsonwebtoken\");\n-\n-const app = express();\n-app.use(express.json());\n-app.use(cors());\n-\n-const CART_FILE = \"./cart.json\";\n-const JWT_SECRET = \"your_secret_key\"; // Change this in production\n-\n-// *🔹 Load Cart*\n-app.get(\"/cart\", (req, res) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        const userId = decoded.userId;\n-\n-        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n-            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n-\n-            let db = JSON.parse(data);\n-            let userCart = db.cart.find(cart => cart.userId === userId) || { cart: [] };\n-\n-            res.json(userCart);\n-        });\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n-});\n-\n-// *🔹 Merge Cart After Login*\n-app.post(\"/cart/merge\", (req, res) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        const userId = decoded.userId;\n-        const { mergedCart } = req.body;\n-\n-        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n-            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n-\n-            let db = JSON.parse(data);\n-            let userCartIndex = db.cart.findIndex(cart => cart.userId === userId);\n-\n-            if (userCartIndex >= 0) {\n-                db.cart[userCartIndex].cart = mergedCart;\n-            } else {\n-                db.cart.push({ userId, cart: mergedCart });\n-            }\n-\n-            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n-                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n-                res.json({ message: \"Cart merged successfully\" });\n-            });\n-        });\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n-});\n-\n-// *🔹 Add to Cart*\n-app.post(\"/cart\", (req, res) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        const userId = decoded.userId;\n-        const { product } = req.body;\n-\n-        fs.readFile(CART_FILE, \"utf8\", (err, data) => {\n-            if (err) return res.status(500).json({ error: \"Error reading cart database\" });\n-\n-            let db = JSON.parse(data);\n-            let userCart = db.cart.find(cart => cart.userId === userId);\n-\n-            if (userCart) {\n-                userCart.cart.push(product);\n-            } else {\n-                db.cart.push({ userId, cart: [product] });\n-            }\n-\n-            fs.writeFile(CART_FILE, JSON.stringify(db, null, 2), (err) => {\n-                if (err) return res.status(500).json({ error: \"Error saving cart\" });\n-                res.json({ message: \"Product added to cart\" });\n-            });\n-        });\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n-});\n-\n-// *🔹 Start Server*\n-app.listen(3000, () => console.log(\"Server running on port 3000\"));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487377071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const cors = require(\"cors\");\n+const fs = require(\"fs\");\n+const bodyParser = require(\"body-parser\");\n+require(\"dotenv\").config();\n+\n+const app = express();\n+const PORT = 3000;\n+const CART_DB = \"./cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; // Store secret key in .env\n+\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+// Read cart data\n+const readCartDB = () => {\n+    try {\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return {};\n+    }\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+};\n+\n+// *1. Get User Cart*\n+app.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db[req.userId] || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// *2. Add to Cart*\n+app.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+        db[req.userId] = userCart;\n+        writeCartDB(db);\n+    }\n+\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+// *3. Remove from Cart*\n+app.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    userCart = userCart.filter(item => item.id !== productId);\n+    db[req.userId] = userCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: userCart });\n+});\n+\n+// *4. Merge Local Cart with Server Cart*\n+app.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Merge local cart and server cart (remove duplicates)\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+    db[req.userId] = mergedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// *5. Clear Cart (Logout)*\n+app.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db[req.userId] = [];\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+// *Start Server*\n+app.listen(PORT, () => {\n+    console.log(Server running on http://localhost:${PORT});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740487386438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,6 +104,6 @@\n });\n \n // *Start Server*\n app.listen(PORT, () => {\n-    console.log(`Server running on http://localhost:${PORT});\n+    console.log(`Server running on http://localhost:${PORT}`);\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740552255680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,4 +137,5 @@\n app.listen(PORT, () => {\n     console.log(`Server running on http://localhost:${PORT}`);\n });\n \n+module.exports = router;\n"
                }
            ],
            "date": 1739277730354,
            "name": "Commit-0",
            "content": "// getFromCart\napp.get(\"/cart\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      res.json(jsonData.cart);\n    });\n  });\n  \n  // addToCart\n  app.post(\"/addToCart\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      const item = { id: jsonData.cart.length + 1, ...req.body };\n      jsonData.cart.push(item);\n  \n      fs.writeFile(cartPath, JSON.stringify(jsonData, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving data\" });\n        res.status(201).json(item);\n      });\n    });\n  });\n  \n  // Utility: Read products data from file\n  const readProductsCart = () => {\n    const rawData = fs.readFileSync(cartPath);\n    const data = JSON.parse(rawData);\n    return data.products;\n  };\n  \n  // Utility: Write updated products back to file\n  const writeProductsCart = (products) => {\n    const data = { products };\n    fs.writeFileSync(cartPath, JSON.stringify(data, null, 2));\n  };\n  // Endpoint to get a single product by id\n  app.get(\"/cart/:id\", (req, res) => {\n    try {\n      const products = readProductsCart();\n      const id = parseInt(req.params.id, 10);\n      const product = products.find((p) => p.id === id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to read products data\" });\n    }\n  });\n  \n  // PATCH endpoint to update a product partially\n  app.patch(\"/updatCart/:id\", (req, res) => {\n    try {\n      const products = readProductsCart();\n      const id = parseInt(req.params.id, 10);\n      const index = products.findIndex((p) => p.id === id);\n  \n      if (index === -1) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n  \n      // Merge the existing product with the fields sent in the request body\n      const updatedProduct = { ...products[index], ...req.body };\n      products[index] = updatedProduct;\n  \n      // Write the updated products back to the file\n      writeProductsCart(products);\n  \n      res.json(updatedProduct);\n    } catch (err) {\n      console.error(\"Error patching product:\", err);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n  \n  // Increment cart*\n  app.put(\"/cart/:id/increment\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item\n      let item = db.cart.find((item) => item.id === itemId);\n      if (!item) return res.status(404).json({ message: \"Item not found\" });\n  \n      // Increment the count\n      item.quantity++;\n  \n      // Save updated data to db.json\n      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"Item count incremented\", item });\n      });\n    });\n  });\n  \n  // decrement cart*\n  app.put(\"/cart/:id/decrement\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item\n      let item = db.cart.find((item) => item.id === itemId);\n      if (!item) return res.status(404).json({ message: \"Item not found\" });\n  \n      // decrement the count\n      item.quantity--;\n  \n      // Save updated data to db.json\n      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"Item count decremented\", item });\n      });\n    });\n  });\n  \n  // *API to Delete an cart by ID*\n  app.delete(\"/cartRemoveItem/:id\", (req, res) => {\n    fs.readFile(cartPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item index\n      const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n      if (itemIndex === -1)\n        return res.status(404).json({ message: \"Item not found\" });\n  \n      // Remove the item\n      db.cart.splice(itemIndex, 1);\n  \n      // Save updated data to db.json\n      fs.writeFile(cartPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"Item deleted successfully\" });\n      });\n    });\n  });"
        }
    ]
}