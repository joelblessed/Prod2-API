{
    "sourceFile": "form.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 36,
            "patches": [
                {
                    "date": 1740520775098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740520781819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,6 +80,6 @@\n });\n \n // Start the server\n app.listen(PORT, () => {\n-  console.log(Server running on http://localhost:${PORT});\n+  console.log(`Server running on http://localhost:${PORT});\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740520866686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         name: productData.brandName || '',\n         image: productData.brandImage || '',\n       },\n     ],\n-    images: files.map((file) => /uploads/${file.filename}), // Save image paths\n+    images: files.map((file) => `/uploads/${file.filename}), // Save image paths\n     category: productData.category || '',\n     location: productData.location || '',\n     adress: productData.adress || '',\n     isSelected: productData.isSelected === 'true',\n@@ -80,6 +80,6 @@\n });\n \n // Start the server\n app.listen(PORT, () => {\n-  console.log(`Server running on http://localhost:${PORT});\n+  console.log(`Server running on http://localhost:${PORT}`);\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740520949740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const fs = require('fs');\n const path = require('path');\n const bodyParser = require('body-parser');\n const app = express();\n-const PORT = 3001;\n+const PORT = 3002;\n \n // Ensure the 'uploads' directory exists\n const uploadDir = path.join(__dirname, 'uploads');\n if (!fs.existsSync(uploadDir)) {\n@@ -57,9 +57,9 @@\n         name: productData.brandName || '',\n         image: productData.brandImage || '',\n       },\n     ],\n-    images: files.map((file) => `/uploads/${file.filename}), // Save image paths\n+    images: files.map((file) => `/uploads/${file.filename}`), // Save image paths\n     category: productData.category || '',\n     location: productData.location || '',\n     adress: productData.adress || '',\n     isSelected: productData.isSelected === 'true',\n"
                },
                {
                    "date": 1740530096407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n const express = require('express');\n const multer = require('multer');\n+const bodyParser = require('body-parser');\n+const path = require('path');\n const fs = require('fs');\n-const path = require('path');\n-const bodyParser = require('body-parser');\n const app = express();\n const PORT = 3002;\n \n-// Ensure the 'uploads' directory exists\n+// Ensure the uploads directory exists\n const uploadDir = path.join(__dirname, 'uploads');\n if (!fs.existsSync(uploadDir)) {\n   fs.mkdirSync(uploadDir);\n }\n@@ -17,69 +17,64 @@\n   destination: (req, file, cb) => {\n     cb(null, uploadDir); // Directory to save files\n   },\n   filename: (req, file, cb) => {\n-    cb(null, Date.now() + '-' + file.originalname); // Unique filename\n-  },\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    cb(null, ${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}); // Unique filename\n+  }\n });\n \n // Initialize upload\n-const upload = multer({ storage: storage });\n+const upload = multer({\n+  storage: storage,\n+  limits: { fileSize: 2 * 1024 * 1024 }, // Limit file size to 2MB\n+  fileFilter: (req, file, cb) => {\n+    const fileTypes = /jpeg|jpg|png|gif/;\n+    const extName = fileTypes.test(path.extname(file.originalname).toLowerCase());\n+    const mimeType = fileTypes.test(file.mimetype);\n \n+    if (mimeType && extName) {\n+      return cb(null, true);\n+    } else {\n+      cb(new Error('Only images are allowed'));\n+    }\n+  }\n+});\n+\n // Middleware\n app.use(bodyParser.json());\n app.use(bodyParser.urlencoded({ extended: true }));\n \n-// Serve static files (e.g., uploaded images)\n-app.use('/uploads', express.static(uploadDir));\n-\n // Route to handle product upload\n-app.post('/upload', upload.array('images', 10), (req, res) => {\n+app.post('/uploads', upload.array('images', 10), (req, res) => {\n   const productData = req.body;\n   const files = req.files;\n \n-  // Process product data and files\n-  const product = {\n-    id: Date.now(), // Generate a unique ID\n-    forCount: parseInt(productData.forCount) || 1,\n-    quantity: parseInt(productData.quantity) || 1,\n-    price: parseFloat(productData.price) || 0,\n-    likes: parseInt(productData.likes) || 0,\n-    discount: parseFloat(productData.discount) || 0,\n-    numberInStock: parseInt(productData.numberInStock) || 0,\n-    owner: productData.owner || '',\n-    phoneNumber: productData.phoneNumber || '',\n-    name: productData.name || '',\n-    description: productData.description || '',\n-    status: productData.status || '',\n-    brand: [\n-      {\n-        id: parseInt(productData.brandId) || 1,\n-        name: productData.brandName || '',\n-        image: productData.brandImage || '',\n-      },\n-    ],\n-    images: files.map((file) => `/uploads/${file.filename}`), // Save image paths\n-    category: productData.category || '',\n-    location: productData.location || '',\n-    adress: productData.adress || '',\n-    isSelected: productData.isSelected === 'true',\n+  // Map file paths to their URLs\n\\ No newline at end of file\n+  const imageUrls = files.map(file => /uploads/${file.filename});\n+\n+  // Combine product data with image URLs\n+  const newProduct = {\n+    ...productData,\n+    images: imageUrls,\n+    price: parseFloat(productData.price),\n+    quantity: parseInt(productData.quantity),\n+    numberInStock: parseInt(productData.numberInStock),\n+    discount: parseFloat(productData.discount),\n+    likes: parseInt(productData.likes),\n   };\n \n-  // Save product to db.json\n-  const dbPath = path.join(__dirname, 'db.json');\n-  let db = { products: [] };\n+  // Here, you would typically save the newProduct to your database\n+  // For demonstration, we'll just return the product data\n \n-  if (fs.existsSync(dbPath)) {\n-    db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n-  }\n+  res.status(201).json({\n+    message: 'Product uploaded successfully!',\n+    product: newProduct\n+  });\n+});\n \n-  db.products.push(product);\n-  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+// Serve static files from the uploads directory\n+app.use('/uploads', express.static(uploadDir));\n \n-  res.json({ message: 'Product uploaded successfully!', product });\n-});\n-\n-// Start the server\n app.listen(PORT, () => {\n-  console.log(`Server running on http://localhost:${PORT}`);\n-});\n+  console.log(Server running on http://localhost:${PORT});\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740530139829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     cb(null, uploadDir); // Directory to save files\n   },\n   filename: (req, file, cb) => {\n     const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    cb(null, ${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}); // Unique filename\n+    cb(null, `${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}); // Unique filename\n   }\n });\n \n // Initialize upload\n"
                },
                {
                    "date": 1740530146626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     cb(null, uploadDir); // Directory to save files\n   },\n   filename: (req, file, cb) => {\n     const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    cb(null, `${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}); // Unique filename\n+    cb(null, `${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}`); // Unique filename\n   }\n });\n \n // Initialize upload\n"
                },
                {
                    "date": 1740530162523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   const productData = req.body;\n   const files = req.files;\n \n   // Map file paths to their URLs\n-  const imageUrls = files.map(file => /uploads/${file.filename});\n+  const imageUrls = files.map(file => `/uploads/${file.filename});\n \n   // Combine product data with image URLs\n   const newProduct = {\n     ...productData,\n"
                },
                {
                    "date": 1740530173994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   const productData = req.body;\n   const files = req.files;\n \n   // Map file paths to their URLs\n-  const imageUrls = files.map(file => `/uploads/${file.filename});\n+  const imageUrls = files.map(file => `/uploads/${file.filename}`);\n \n   // Combine product data with image URLs\n   const newProduct = {\n     ...productData,\n@@ -75,6 +75,6 @@\n // Serve static files from the uploads directory\n app.use('/uploads', express.static(uploadDir));\n \n app.listen(PORT, () => {\n-  console.log(Server running on http://localhost:${PORT});\n+  console.log(`Server running on http://localhost:${PORT});\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740531546874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const bodyParser = require('body-parser');\n-const path = require('path');\n-const fs = require('fs');\n-const app = express();\n-const PORT = 3002;\n-\n-// Ensure the uploads directory exists\n-const uploadDir = path.join(__dirname, 'uploads');\n-if (!fs.existsSync(uploadDir)) {\n-  fs.mkdirSync(uploadDir);\n-}\n-\n-// Configure storage for images\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, uploadDir); // Directory to save files\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    cb(null, `${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}`); // Unique filename\n-  }\n-});\n-\n-// Initialize upload\n-const upload = multer({\n-  storage: storage,\n-  limits: { fileSize: 2 * 1024 * 1024 }, // Limit file size to 2MB\n-  fileFilter: (req, file, cb) => {\n-    const fileTypes = /jpeg|jpg|png|gif/;\n-    const extName = fileTypes.test(path.extname(file.originalname).toLowerCase());\n-    const mimeType = fileTypes.test(file.mimetype);\n-\n-    if (mimeType && extName) {\n-      return cb(null, true);\n-    } else {\n-      cb(new Error('Only images are allowed'));\n-    }\n-  }\n-});\n-\n-// Middleware\n-app.use(bodyParser.json());\n-app.use(bodyParser.urlencoded({ extended: true }));\n-\n-// Route to handle product upload\n-app.post('/uploads', upload.array('images', 10), (req, res) => {\n-  const productData = req.body;\n-  const files = req.files;\n-\n-  // Map file paths to their URLs\n-  const imageUrls = files.map(file => `/uploads/${file.filename}`);\n-\n-  // Combine product data with image URLs\n-  const newProduct = {\n-    ...productData,\n-    images: imageUrls,\n-    price: parseFloat(productData.price),\n-    quantity: parseInt(productData.quantity),\n-    numberInStock: parseInt(productData.numberInStock),\n-    discount: parseFloat(productData.discount),\n-    likes: parseInt(productData.likes),\n-  };\n-\n-  // Here, you would typically save the newProduct to your database\n-  // For demonstration, we'll just return the product data\n-\n-  res.status(201).json({\n-    message: 'Product uploaded successfully!',\n-    product: newProduct\n-  });\n-});\n-\n-// Serve static files from the uploads directory\n-app.use('/uploads', express.static(uploadDir));\n-\n-app.listen(PORT, () => {\n-  console.log(`Server running on http://localhost:${PORT});\n-})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740531560322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+const express = require(\"express\");\n+const multer = require(\"multer\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const cors = require(\"cors\");\n+\n+const app = express();\n+const PORT = 3001;\n+\n+// Enable CORS for frontend-backend communication\n+app.use(cors());\n+\n+// Ensure the 'uploads' directory exists\n+const uploadDir = path.join(__dirname, \"uploads\");\n+if (!fs.existsSync(uploadDir)) {\n+  fs.mkdirSync(uploadDir);\n+}\n+\n+// Configure storage for images\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, uploadDir); // Save files in the 'uploads' directory\n+  },\n+  filename: (req, file, cb) => {\n+    cb(null, Date.now() + \"-\" + file.originalname); // Unique filename\n+  },\n+});\n+\n+// Initialize upload\n+const upload = multer({ storage: storage });\n+\n+// Middleware to parse JSON and form data\n+app.use(express.json());\n+app.use(express.urlencoded({ extended: true }));\n+\n+// Serve static files (e.g., uploaded images)\n+app.use(\"/uploads\", express.static(uploadDir));\n+\n+// Route to handle product upload\n+app.post(\"/upload\", upload.array(\"images\", 10), (req, res) => {\n+  const productData = req.body;\n+  const files = req.files;\n+\n+  // Construct the product object\n+  const newProduct = {\n+    id: Date.now(), // Generate a unique ID\n+    name: productData.name,\n+    brand: JSON.parse(productData.brand), // Parse brand array from string\n+    category: productData.category,\n+    price: parseFloat(productData.price),\n+    quantity: parseInt(productData.quantity),\n+    numberInStock: parseInt(productData.numberInStock),\n+    discount: parseFloat(productData.discount),\n+    owner: productData.owner,\n+    phoneNumber: productData.phoneNumber,\n+    description: productData.description,\n+    status: productData.status,\n+    address: productData.address,\n+    likes: parseInt(productData.likes),\n+    location: productData.location,\n+    images: files.map((file) => `/uploads/${file.filename}), // Save image paths\n+  };\n+\n+  // Save product to db.json\n+  const dbPath = path.join(__dirname, \"db.json\");\n+  let db = { products: [] };\n+\n+  if (fs.existsSync(dbPath)) {\n+    db = JSON.parse(fs.readFileSync(dbPath, \"utf-8\"));\n+  }\n+\n+  db.products.push(newProduct);\n+  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+\n+  res.json({ message: \"Product uploaded successfully!\", product: newProduct });\n+});\n+\n+// Start the server\n+app.listen(PORT, () => {\n+  console.log(Server running on http://localhost:${PORT});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740531566794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     status: productData.status,\n     address: productData.address,\n     likes: parseInt(productData.likes),\n     location: productData.location,\n-    images: files.map((file) => `/uploads/${file.filename}), // Save image paths\n+    images: files.map((file) => `/uploads/${file.filename}`), // Save image paths\n   };\n \n   // Save product to db.json\n   const dbPath = path.join(__dirname, \"db.json\");\n"
                },
                {
                    "date": 1740531580447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,6 +76,6 @@\n });\n \n // Start the server\n app.listen(PORT, () => {\n-  console.log(Server running on http://localhost:${PORT});\n+  console.log(`Server running on http://localhost:${PORT});\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740531605137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const path = require(\"path\");\n const cors = require(\"cors\");\n \n const app = express();\n-const PORT = 3001;\n+const PORT = 3002;\n \n // Enable CORS for frontend-backend communication\n app.use(cors());\n \n@@ -76,6 +76,6 @@\n });\n \n // Start the server\n app.listen(PORT, () => {\n-  console.log(`Server running on http://localhost:${PORT});\n+  console.log(`Server running on http://localhost:${PORT}`);\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740533679514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: Date.now(), // Generate a unique ID\n+    id: Date, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740533684989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: Date, // Generate a unique ID\n+    id: , // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740533702565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: , // Generate a unique ID\n+    id: .length + 1, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740533709963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: .length + 1, // Generate a unique ID\n+    id: pro.length + 1, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740533715106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: pro.length + 1, // Generate a unique ID\n+    id: products.length + 1, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740533720860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: products.length + 1, // Generate a unique ID\n+    id: products.inde.length + 1, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740533841031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: products.inde.length + 1, // Generate a unique ID\n+    id: products.length + 1, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740534041238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: products.length + 1, // Generate a unique ID\n+    id: pro.length + 1, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740534047726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: pro.length + 1, // Generate a unique ID\n+    id: db.users.length + 1, // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740534093101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n // Enable CORS for frontend-backend communication\n app.use(cors());\n \n // Ensure the 'uploads' directory exists\n-const uploadDir = path.join(__dirname, \"uploads\");\n+const uploadDir = path.join(__dirname, \"\");\n if (!fs.existsSync(uploadDir)) {\n   fs.mkdirSync(uploadDir);\n }\n \n@@ -42,9 +42,9 @@\n   const files = req.files;\n \n   // Construct the product object\n   const newProduct = {\n-    id: db.users.length + 1, // Generate a unique ID\n+    id: Date.now(), // Generate a unique ID\n     name: productData.name,\n     brand: JSON.parse(productData.brand), // Parse brand array from string\n     category: productData.category,\n     price: parseFloat(productData.price),\n"
                },
                {
                    "date": 1740534100694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n // Enable CORS for frontend-backend communication\n app.use(cors());\n \n // Ensure the 'uploads' directory exists\n-const uploadDir = path.join(__dirname, \"\");\n+const uploadDir = path.join(__dirname, \"./images\");\n if (!fs.existsSync(uploadDir)) {\n   fs.mkdirSync(uploadDir);\n }\n \n"
                },
                {
                    "date": 1740534182614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   destination: (req, file, cb) => {\n     cb(null, uploadDir); // Save files in the 'uploads' directory\n   },\n   filename: (req, file, cb) => {\n-    cb(null, Date.now() + \"-\" + file.originalname); // Unique filename\n+    cb(null, + \"-\" + file.originalname); // Unique filename\n   },\n });\n \n // Initialize upload\n"
                },
                {
                    "date": 1740534204691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   destination: (req, file, cb) => {\n     cb(null, uploadDir); // Save files in the 'uploads' directory\n   },\n   filename: (req, file, cb) => {\n-    cb(null, + \"-\" + file.originalname); // Unique filename\n+    cb(null,  file.originalname); // Unique filename\n   },\n });\n \n // Initialize upload\n"
                },
                {
                    "date": 1740534357223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   destination: (req, file, cb) => {\n     cb(null, uploadDir); // Save files in the 'uploads' directory\n   },\n   filename: (req, file, cb) => {\n-    cb(null,  file.originalname); // Unique filename\n+    cb(); // Unique filename\n   },\n });\n \n // Initialize upload\n"
                },
                {
                    "date": 1740534369506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n // Enable CORS for frontend-backend communication\n app.use(cors());\n \n // Ensure the 'uploads' directory exists\n-const uploadDir = path.join(__dirname, \"./images\");\n+const uploadDir = path.join(__dirname, \"/images\");\n if (!fs.existsSync(uploadDir)) {\n   fs.mkdirSync(uploadDir);\n }\n \n@@ -21,9 +21,9 @@\n   destination: (req, file, cb) => {\n     cb(null, uploadDir); // Save files in the 'uploads' directory\n   },\n   filename: (req, file, cb) => {\n-    cb(); // Unique filename\n+    cb(null, Date.now() + path.extname(file.originalname)); // Unique filename\n   },\n });\n \n // Initialize upload\n"
                },
                {
                    "date": 1740534376651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n // Enable CORS for frontend-backend communication\n app.use(cors());\n \n // Ensure the 'uploads' directory exists\n-const uploadDir = path.join(__dirname, \"/images\");\n+const uploadDir = path.join(__dirname, \"public/images\");\n if (!fs.existsSync(uploadDir)) {\n   fs.mkdirSync(uploadDir);\n }\n \n"
                },
                {
                    "date": 1740534510630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const multer = require(\"multer\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const cors = require(\"cors\");\n-\n+const router= express.Router();\n const app = express();\n const PORT = 3002;\n \n // Enable CORS for frontend-backend communication\n"
                },
                {
                    "date": 1740534518028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n const path = require(\"path\");\n const cors = require(\"cors\");\n const router= express.Router();\n const app = express();\n-const PORT = 3002;\n \n+\n // Enable CORS for frontend-backend communication\n app.use(cors());\n \n // Ensure the 'uploads' directory exists\n"
                },
                {
                    "date": 1740534527021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,4 @@\n \n   res.json({ message: \"Product uploaded successfully!\", product: newProduct });\n });\n \n-// Start the server\n-app.listen(PORT, () => {\n-  console.log(`Server running on http://localhost:${PORT}`);\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740534533043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,4 +74,5 @@\n \n   res.json({ message: \"Product uploaded successfully!\", product: newProduct });\n });\n \n+module\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740534539030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,5 +74,5 @@\n \n   res.json({ message: \"Product uploaded successfully!\", product: newProduct });\n });\n \n-module\n\\ No newline at end of file\n+module.export\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740534549723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,5 +74,5 @@\n \n   res.json({ message: \"Product uploaded successfully!\", product: newProduct });\n });\n \n-module.exports \n\\ No newline at end of file\n+module.exports =\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740534632820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+const express = require(\"express\");\n+const multer = require(\"multer\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const cors = require(\"cors\");\n+const router= express.Router();\n+const app = express();\n+\n+\n+// Enable CORS for frontend-backend communication\n+app.use(cors());\n+\n+// Ensure the 'uploads' directory exists\n+const uploadDir = path.join(__dirname, \"public/images\");\n+if (!fs.existsSync(uploadDir)) {\n+  fs.mkdirSync(uploadDir);\n+}\n+\n+// Configure storage for images\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, uploadDir); // Save files in the 'uploads' directory\n+  },\n+  filename: (req, file, cb) => {\n+    cb(null, Date.now() + path.extname(file.originalname)); // Unique filename\n+  },\n+});\n+\n+// Initialize upload\n+const upload = multer({ storage: storage });\n+\n+// Middleware to parse JSON and form data\n+app.use(express.json());\n+app.use(express.urlencoded({ extended: true }));\n+\n+// Serve static files (e.g., uploaded images)\n+router.use(\"/uploads\", express.static(uploadDir));\n+\n+// Route to handle product upload\n+router.post(\"/upload\", upload.array(\"images\", 10), (req, res) => {\n+  const productData = req.body;\n+  const files = req.files;\n+\n+  // Construct the product object\n+  const newProduct = {\n+    id: Date.now(), // Generate a unique ID\n+    name: productData.name,\n+    brand: JSON.parse(productData.brand), // Parse brand array from string\n+    category: productData.category,\n+    price: parseFloat(productData.price),\n+    quantity: parseInt(productData.quantity),\n+    numberInStock: parseInt(productData.numberInStock),\n+    discount: parseFloat(productData.discount),\n+    owner: productData.owner,\n+    phoneNumber: productData.phoneNumber,\n+    description: productData.description,\n+    status: productData.status,\n+    address: productData.address,\n+    likes: parseInt(productData.likes),\n+    location: productData.location,\n+    images: files.map((file) => `/uploads/${file.filename}`), // Save image paths\n+  };\n+\n+  // Save product to db.json\n+  const dbPath = path.join(__dirname, \"db.json\");\n+  let db = { products: [] };\n+\n+  if (fs.existsSync(dbPath)) {\n+    db = JSON.parse(fs.readFileSync(dbPath, \"utf-8\"));\n+  }\n+\n+  db.products.push(newProduct);\n+  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+\n+  res.json({ message: \"Product uploaded successfully!\", product: newProduct });\n+});\n+\n+module.exports = router\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740520775098,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst multer = require('multer');\nconst fs = require('fs');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst PORT = 3001;\n\n// Ensure the 'uploads' directory exists\nconst uploadDir = path.join(__dirname, 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n\n// Configure storage for images\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir); // Directory to save files\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname); // Unique filename\n  },\n});\n\n// Initialize upload\nconst upload = multer({ storage: storage });\n\n// Middleware\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Serve static files (e.g., uploaded images)\napp.use('/uploads', express.static(uploadDir));\n\n// Route to handle product upload\napp.post('/upload', upload.array('images', 10), (req, res) => {\n  const productData = req.body;\n  const files = req.files;\n\n  // Process product data and files\n  const product = {\n    id: Date.now(), // Generate a unique ID\n    forCount: parseInt(productData.forCount) || 1,\n    quantity: parseInt(productData.quantity) || 1,\n    price: parseFloat(productData.price) || 0,\n    likes: parseInt(productData.likes) || 0,\n    discount: parseFloat(productData.discount) || 0,\n    numberInStock: parseInt(productData.numberInStock) || 0,\n    owner: productData.owner || '',\n    phoneNumber: productData.phoneNumber || '',\n    name: productData.name || '',\n    description: productData.description || '',\n    status: productData.status || '',\n    brand: [\n      {\n        id: parseInt(productData.brandId) || 1,\n        name: productData.brandName || '',\n        image: productData.brandImage || '',\n      },\n    ],\n    images: files.map((file) => /uploads/${file.filename}), // Save image paths\n    category: productData.category || '',\n    location: productData.location || '',\n    adress: productData.adress || '',\n    isSelected: productData.isSelected === 'true',\n  };\n\n  // Save product to db.json\n  const dbPath = path.join(__dirname, 'db.json');\n  let db = { products: [] };\n\n  if (fs.existsSync(dbPath)) {\n    db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n  }\n\n  db.products.push(product);\n  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n\n  res.json({ message: 'Product uploaded successfully!', product });\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(Server running on http://localhost:${PORT});\n});"
        }
    ]
}