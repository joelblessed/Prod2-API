{
    "sourceFile": "jsFiles/cart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1740559434578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740559442151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"../cart.json\";\n+const CART_DB = \"../jsonFilecart.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readCartDB = () => {\n"
                },
                {
                    "date": 1740559715770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"../jsonFilecart.json\";\n+const CART_DB = \"/home/akainu/API/jsonFiles/account.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readCartDB = () => {\n"
                },
                {
                    "date": 1740559768958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"/home/akainu/API/jsonFiles/account.json\";\n+const CART_DB = \"/jsonFiles/account.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readCartDB = () => {\n"
                },
                {
                    "date": 1740559818319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"/jsonFiles/account.json\";\n+const CART_DB = \"../jsonFiles/cart.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readCartDB = () => {\n"
                },
                {
                    "date": 1740559846998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"../jsonFiles/cart.json\";\n+const CART_DB = \"./jsonFiles/cart.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readCartDB = () => {\n"
                },
                {
                    "date": 1740920518257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,120 +1,1 @@\n-\n-const express = require(\"express\");\n-const jwt = require(\"jsonwebtoken\");\n-const fs = require(\"fs\");\n-const router = express.Router();\n-require(\"dotenv\").config();\n-\n-const CART_DB = \"./jsonFiles/cart.json\";\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n-\n-// Read cart data\n-const readCartDB = () => {\n-    try {\n-        const data = fs.readFileSync(CART_DB, \"utf8\");\n-        return JSON.parse(data);\n-    } catch (error) {\n-        console.error(\"Error reading cart database:\", error);\n-        return { carts: [] }; // Default to empty if error occurs\n-    }\n-};\n-\n-// Write cart data\n-const writeCartDB = (data) => {\n-    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n-};\n-\n-// Middleware: Verify Token\n-const verifyToken = (req, res, next) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        req.userId = decoded.userId;\n-        next();\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n-};\n-\n-// 1. Get User Cart\n-router.get(\"/cart\", verifyToken, (req, res) => {\n-    const db = readCartDB();\n-    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n-    res.json({ cart: userCart });\n-});\n-\n-// 2. Add to Cart\n-router.post(\"/cart\", verifyToken, (req, res) => {\n-    const { product } = req.body;\n-    if (!product) return res.status(400).json({ message: \"Product is required\" });\n-\n-    let db = readCartDB();\n-    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n-\n-    // Prevent duplicate products\n-    if (!userCart.find(item => item.id === product.id)) {\n-        userCart.push(product);\n-    } else {\n-        return res.status(400).json({ message: \"Product already in cart\" });\n-    }\n-\n-    // Find user index\n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-\n-    if (userIndex !== -1) {\n-        db.carts[userIndex].cart = userCart;\n-    } else {\n-        db.carts.push({ userId: req.userId, cart: userCart });\n-    }\n-\n-    writeCartDB(db);\n-    res.json({ message: \"Product added to cart\", cart: userCart });\n-});\n-\n-// 3. Remove from Cart\n-router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n-    const { productId } = req.params;\n-    let db = readCartDB();\n-\n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n-\n-    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n-    db.carts[userIndex].cart = updatedCart;\n-    writeCartDB(db);\n-\n-    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n-});\n-\n-// 4. Merge Local Cart with Server Cart\n-router.post(\"/cart/merge\", verifyToken, (req, res) => {\n-    const { localCart } = req.body;\n-    let db = readCartDB();\n-    \n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n-\n-    // Merge carts and remove duplicates\n-    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n-\n-    if (userIndex !== -1) {\n-        db.carts[userIndex].cart = mergedCart;\n-    } else {\n-        db.carts.push({ userId: req.userId, cart: mergedCart });\n-    }\n-    \n-    writeCartDB(db);\n-    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n-});\n-\n-// 5. Clear Cart (Logout)\n-router.delete(\"/cart\", verifyToken, (req, res) => {\n-    let db = readCartDB();\n-    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n-    writeCartDB(db);\n-    res.json({ message: \"Cart cleared\" });\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n+onClick={() => dispatch(addToCartAPI(product))}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920524536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,120 @@\n-onClick={() => dispatch(addToCartAPI(product))}\n\\ No newline at end of file\n+\n+const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const fs = require(\"fs\");\n+const router = express.Router();\n+require(\"dotenv\").config();\n+\n+const CART_DB = \"./jsonFiles/cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+\n+// Read cart data\n+const readCartDB = () => {\n+    try {\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return { carts: [] }; // Default to empty if error occurs\n+    }\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+};\n+\n+// 1. Get User Cart\n+router.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// 2. Add to Cart\n+router.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+    } else {\n+        return res.status(400).json({ message: \"Product already in cart\" });\n+    }\n+\n+    // Find user index\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = userCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: userCart });\n+    }\n+\n+    writeCartDB(db);\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+// 3. Remove from Cart\n+router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n+\n+    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n+    db.carts[userIndex].cart = updatedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n+});\n+\n+// 4. Merge Local Cart with Server Cart\n+router.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    \n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n+\n+    // Merge carts and remove duplicates\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = mergedCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: mergedCart });\n+    }\n+    \n+    writeCartDB(db);\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// 5. Clear Cart (Logout)\n+router.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741891765186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n     writeCartDB(db);\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n+\n // 3. Remove from Cart\n router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readCartDB();\n"
                },
                {
                    "date": 1741891770743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n \n+\n // 3. Remove from Cart\n router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readCartDB();\n"
                },
                {
                    "date": 1741891868860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,43 @@\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n \n+// Increment product quantity in cart\n+app.put('/cart/:productId/increment', authenticateToken, (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(, 'utf-8'));\n+    const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+    if (userCart) {\n+      const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n+      if (product) {\n+        product.quantity += 1;\n+        fs.writeFileSync(, JSON.stringify(db, null, 2));\n+        res.json(userCart);\n+      } else {\n+        res.status(404).json({ message: 'Product not found in cart' });\n+      }\n+    } else {\n+      res.status(404).json({ message: 'Cart not found' });\n+    }\n+  });\n+  \n+  // Decrement product quantity in cart\n+  app.put('/cart/:productId/decrement', authenticateToken, (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(, 'utf-8'));\n+    const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+    if (userCart) {\n+      const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n+      if (product) {\n+        product.quantity = Math.max(0, product.quantity - 1);\n+        fs.writeFileSync(, JSON.stringify(db, null, 2));\n+        res.json(userCart);\n+      } else {\n+        res.status(404).json({ message: 'Product not found in cart' });\n+      }\n+    } else {\n+      res.status(404).json({ message: 'Cart not found' });\n+    }\n+  });\n \n // 3. Remove from Cart\n router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n"
                },
                {
                    "date": 1741891967907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,16 +74,16 @@\n });\n \n \n // Increment product quantity in cart\n-app.put('/cart/:productId/increment', authenticateToken, (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(, 'utf-8'));\n+app.put('/productId/increment', authenticateToken, (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n     const userCart = db.carts.find(cart => cart.userId === req.user.id);\n     if (userCart) {\n       const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n       if (product) {\n         product.quantity += 1;\n-        fs.writeFileSync(, JSON.stringify(db, null, 2));\n+        fs.writeFileSync(CART_DB, JSON.stringify(db, null, 2));\n         res.json(userCart);\n       } else {\n         res.status(404).json({ message: 'Product not found in cart' });\n       }\n@@ -93,15 +93,15 @@\n   });\n   \n   // Decrement product quantity in cart\n   app.put('/cart/:productId/decrement', authenticateToken, (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(, 'utf-8'));\n+    const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n     const userCart = db.carts.find(cart => cart.userId === req.user.id);\n     if (userCart) {\n       const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n       if (product) {\n         product.quantity = Math.max(0, product.quantity - 1);\n-        fs.writeFileSync(, JSON.stringify(db, null, 2));\n+        fs.writeFileSync(CART_DB, JSON.stringify(db, null, 2));\n         res.json(userCart);\n       } else {\n         res.status(404).json({ message: 'Product not found in cart' });\n       }\n"
                },
                {
                    "date": 1741891976384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n     }\n   });\n   \n   // Decrement product quantity in cart\n-  app.put('/cart/:productId/decrement', authenticateToken, (req, res) => {\n+  app.put('/:productId/decrement', authenticateToken, (req, res) => {\n     const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n     const userCart = db.carts.find(cart => cart.userId === req.user.id);\n     if (userCart) {\n       const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n"
                },
                {
                    "date": 1741891983295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+\n+const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const fs = require(\"fs\");\n+const router = express.Router();\n+require(\"dotenv\").config();\n+\n+const CART_DB = \"./jsonFiles/cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+\n+// Read cart data\n+const readCartDB = () => {\n+    try {\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return { carts: [] }; // Default to empty if error occurs\n+    }\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+};\n+\n+// 1. Get User Cart\n+router.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// 2. Add to Cart\n+router.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+    } else {\n+        return res.status(400).json({ message: \"Product already in cart\" });\n+    }\n+\n+    // Find user index\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = userCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: userCart });\n+    }\n+\n+    writeCartDB(db);\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+\n+// Increment product quantity in cart\n+app.put('/productId/increment', authenticateToken, (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n+    const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+    if (userCart) {\n+      const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n+      if (product) {\n+        product.quantity += 1;\n+        fs.writeFileSync(CART_DB, JSON.stringify(db, null, 2));\n+        res.json(userCart);\n+      } else {\n+        res.status(404).json({ message: 'Product not found in cart' });\n+      }\n+    } else {\n+      res.status(404).json({ message: 'Cart not found' });\n+    }\n+  });\n+  \n+  // Decrement product quantity in cart\n+  router.put('/:productId/decrement', authenticateToken, (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n+    const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+    if (userCart) {\n+      const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n+      if (product) {\n+        product.quantity = Math.max(0, product.quantity - 1);\n+        fs.writeFileSync(CART_DB, JSON.stringify(db, null, 2));\n+        res.json(userCart);\n+      } else {\n+        res.status(404).json({ message: 'Product not found in cart' });\n+      }\n+    } else {\n+      res.status(404).json({ message: 'Cart not found' });\n+    }\n+  });\n+\n+// 3. Remove from Cart\n+router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n+\n+    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n+    db.carts[userIndex].cart = updatedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n+});\n+\n+// 4. Merge Local Cart with Server Cart\n+router.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    \n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n+\n+    // Merge carts and remove duplicates\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = mergedCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: mergedCart });\n+    }\n+    \n+    writeCartDB(db);\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// 5. Clear Cart (Logout)\n+router.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741891991705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n });\n \n \n // Increment product quantity in cart\n-app.put('/productId/increment', authenticateToken, (req, res) => {\n+.put('/productId/increment', authenticateToken, (req, res) => {\n     const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n     const userCart = db.carts.find(cart => cart.userId === req.user.id);\n     if (userCart) {\n       const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n@@ -153,162 +153,5 @@\n     writeCartDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n-module.exports = router;\n-\n-const express = require(\"express\");\n-const jwt = require(\"jsonwebtoken\");\n-const fs = require(\"fs\");\n-const router = express.Router();\n-require(\"dotenv\").config();\n-\n-const CART_DB = \"./jsonFiles/cart.json\";\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n-\n-// Read cart data\n-const readCartDB = () => {\n-    try {\n-        const data = fs.readFileSync(CART_DB, \"utf8\");\n-        return JSON.parse(data);\n-    } catch (error) {\n-        console.error(\"Error reading cart database:\", error);\n-        return { carts: [] }; // Default to empty if error occurs\n-    }\n-};\n-\n-// Write cart data\n-const writeCartDB = (data) => {\n-    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n-};\n-\n-// Middleware: Verify Token\n-const verifyToken = (req, res, next) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        req.userId = decoded.userId;\n-        next();\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n-};\n-\n-// 1. Get User Cart\n-router.get(\"/cart\", verifyToken, (req, res) => {\n-    const db = readCartDB();\n-    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n-    res.json({ cart: userCart });\n-});\n-\n-// 2. Add to Cart\n-router.post(\"/cart\", verifyToken, (req, res) => {\n-    const { product } = req.body;\n-    if (!product) return res.status(400).json({ message: \"Product is required\" });\n-\n-    let db = readCartDB();\n-    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n-\n-    // Prevent duplicate products\n-    if (!userCart.find(item => item.id === product.id)) {\n-        userCart.push(product);\n-    } else {\n-        return res.status(400).json({ message: \"Product already in cart\" });\n-    }\n-\n-    // Find user index\n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-\n-    if (userIndex !== -1) {\n-        db.carts[userIndex].cart = userCart;\n-    } else {\n-        db.carts.push({ userId: req.userId, cart: userCart });\n-    }\n-\n-    writeCartDB(db);\n-    res.json({ message: \"Product added to cart\", cart: userCart });\n-});\n-\n-\n-// Increment product quantity in cart\n-app.put('/productId/increment', authenticateToken, (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n-    const userCart = db.carts.find(cart => cart.userId === req.user.id);\n-    if (userCart) {\n-      const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n-      if (product) {\n-        product.quantity += 1;\n-        fs.writeFileSync(CART_DB, JSON.stringify(db, null, 2));\n-        res.json(userCart);\n-      } else {\n-        res.status(404).json({ message: 'Product not found in cart' });\n-      }\n-    } else {\n-      res.status(404).json({ message: 'Cart not found' });\n-    }\n-  });\n-  \n-  // Decrement product quantity in cart\n-  app.put('/:productId/decrement', authenticateToken, (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n-    const userCart = db.carts.find(cart => cart.userId === req.user.id);\n-    if (userCart) {\n-      const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n-      if (product) {\n-        product.quantity = Math.max(0, product.quantity - 1);\n-        fs.writeFileSync(CART_DB, JSON.stringify(db, null, 2));\n-        res.json(userCart);\n-      } else {\n-        res.status(404).json({ message: 'Product not found in cart' });\n-      }\n-    } else {\n-      res.status(404).json({ message: 'Cart not found' });\n-    }\n-  });\n-\n-// 3. Remove from Cart\n-router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n-    const { productId } = req.params;\n-    let db = readCartDB();\n-\n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n-\n-    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n-    db.carts[userIndex].cart = updatedCart;\n-    writeCartDB(db);\n-\n-    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n-});\n-\n-// 4. Merge Local Cart with Server Cart\n-router.post(\"/cart/merge\", verifyToken, (req, res) => {\n-    const { localCart } = req.body;\n-    let db = readCartDB();\n-    \n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n-\n-    // Merge carts and remove duplicates\n-    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n-\n-    if (userIndex !== -1) {\n-        db.carts[userIndex].cart = mergedCart;\n-    } else {\n-        db.carts.push({ userId: req.userId, cart: mergedCart });\n-    }\n-    \n-    writeCartDB(db);\n-    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n-});\n-\n-// 5. Clear Cart (Logout)\n-router.delete(\"/cart\", verifyToken, (req, res) => {\n-    let db = readCartDB();\n-    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n-    writeCartDB(db);\n-    res.json({ message: \"Cart cleared\" });\n-});\n-\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741892063227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n });\n \n \n // Increment product quantity in cart\n-router.put('/productId/increment', authenticateToken, (req, res) => {\n+router.put('/productId/increment', verifyToken, (req, res) => {\n     const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n     const userCart = db.carts.find(cart => cart.userId === req.user.id);\n     if (userCart) {\n       const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n@@ -92,9 +92,9 @@\n     }\n   });\n   \n   // Decrement product quantity in cart\n-  router.put('/:productId/decrement', authenticateToken, (req, res) => {\n+  router.put('/:productId/decrement', verifyToken, (req, res) => {\n     const db = JSON.parse(fs.readFileSync(CART_DB, 'utf-8'));\n     const userCart = db.carts.find(cart => cart.userId === req.user.id);\n     if (userCart) {\n       const product = userCart.items.find(item => item.id === parseInt(req.params.productId));\n"
                }
            ],
            "date": 1740559434578,
            "name": "Commit-0",
            "content": "\nconst express = require(\"express\");\nconst jwt = require(\"jsonwebtoken\");\nconst fs = require(\"fs\");\nconst router = express.Router();\nrequire(\"dotenv\").config();\n\nconst CART_DB = \"../cart.json\";\nconst JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n\n// Read cart data\nconst readCartDB = () => {\n    try {\n        const data = fs.readFileSync(CART_DB, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading cart database:\", error);\n        return { carts: [] }; // Default to empty if error occurs\n    }\n};\n\n// Write cart data\nconst writeCartDB = (data) => {\n    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n};\n\n// Middleware: Verify Token\nconst verifyToken = (req, res, next) => {\n    const token = req.headers.authorization?.split(\" \")[1];\n    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n\n    try {\n        const decoded = jwt.verify(token, JWT_SECRET);\n        req.userId = decoded.userId;\n        next();\n    } catch (error) {\n        res.status(401).json({ message: \"Invalid token\" });\n    }\n};\n\n// 1. Get User Cart\nrouter.get(\"/cart\", verifyToken, (req, res) => {\n    const db = readCartDB();\n    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n    res.json({ cart: userCart });\n});\n\n// 2. Add to Cart\nrouter.post(\"/cart\", verifyToken, (req, res) => {\n    const { product } = req.body;\n    if (!product) return res.status(400).json({ message: \"Product is required\" });\n\n    let db = readCartDB();\n    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n\n    // Prevent duplicate products\n    if (!userCart.find(item => item.id === product.id)) {\n        userCart.push(product);\n    } else {\n        return res.status(400).json({ message: \"Product already in cart\" });\n    }\n\n    // Find user index\n    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n\n    if (userIndex !== -1) {\n        db.carts[userIndex].cart = userCart;\n    } else {\n        db.carts.push({ userId: req.userId, cart: userCart });\n    }\n\n    writeCartDB(db);\n    res.json({ message: \"Product added to cart\", cart: userCart });\n});\n\n// 3. Remove from Cart\nrouter.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n    const { productId } = req.params;\n    let db = readCartDB();\n\n    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n\n    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n    db.carts[userIndex].cart = updatedCart;\n    writeCartDB(db);\n\n    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n});\n\n// 4. Merge Local Cart with Server Cart\nrouter.post(\"/cart/merge\", verifyToken, (req, res) => {\n    const { localCart } = req.body;\n    let db = readCartDB();\n    \n    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n\n    // Merge carts and remove duplicates\n    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n\n    if (userIndex !== -1) {\n        db.carts[userIndex].cart = mergedCart;\n    } else {\n        db.carts.push({ userId: req.userId, cart: mergedCart });\n    }\n    \n    writeCartDB(db);\n    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n});\n\n// 5. Clear Cart (Logout)\nrouter.delete(\"/cart\", verifyToken, (req, res) => {\n    let db = readCartDB();\n    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n    writeCartDB(db);\n    res.json({ message: \"Cart cleared\" });\n});\n\nmodule.exports = router;"
        }
    ]
}