{
    "sourceFile": "jsFiles/signIn.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1740559322955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740559333374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"./account.json\");\n+const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559364706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559393890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559550694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \".jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559587903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \".jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"//jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559893586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"//jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559909751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1741881567344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,5 +90,17 @@\n   }\n });\n \n \n+router.put('/updateProfile/:id', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const userIndex = db.users.findIndex(u => u.id === parseInt(req.params.id));\n+  if (userIndex !== -1) {\n+    db.users[userIndex] = { ...db.users[userIndex], ...req.body };\n+    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+    res.json(db.users[userIndex]);\n+  } else {\n+    res.status(404).json({ message: 'User not found' });\n+  }\n+});\n+\n module.exports= router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741881587476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,13 +91,13 @@\n });\n \n \n router.put('/updateProfile/:id', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(dbFPath, 'utf-8'));\n   const userIndex = db.users.findIndex(u => u.id === parseInt(req.params.id));\n   if (userIndex !== -1) {\n     db.users[userIndex] = { ...db.users[userIndex], ...req.body };\n-    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+    fs.writeFileSync(dbFPath, JSON.stringify(db, null, 2));\n     res.json(db.users[userIndex]);\n   } else {\n     res.status(404).json({ message: 'User not found' });\n   }\n"
                },
                {
                    "date": 1741881594551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,13 +91,13 @@\n });\n \n \n router.put('/updateProfile/:id', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFPath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(Path, 'utf-8'));\n   const userIndex = db.users.findIndex(u => u.id === parseInt(req.params.id));\n   if (userIndex !== -1) {\n     db.users[userIndex] = { ...db.users[userIndex], ...req.body };\n-    fs.writeFileSync(dbFPath, JSON.stringify(db, null, 2));\n+    fs.writeFileSync(Path, JSON.stringify(db, null, 2));\n     res.json(db.users[userIndex]);\n   } else {\n     res.status(404).json({ message: 'User not found' });\n   }\n"
                },
                {
                    "date": 1741881603110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,13 +91,13 @@\n });\n \n \n router.put('/updateProfile/:id', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(Path, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n   const userIndex = db.users.findIndex(u => u.id === parseInt(req.params.id));\n   if (userIndex !== -1) {\n     db.users[userIndex] = { ...db.users[userIndex], ...req.body };\n-    fs.writeFileSync(Path, JSON.stringify(db, null, 2));\n+    fs.writeFileSync(accountPath, JSON.stringify(db, null, 2));\n     res.json(db.users[userIndex]);\n   } else {\n     res.status(404).json({ message: 'User not found' });\n   }\n"
                },
                {
                    "date": 1742729485280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n \n const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n \n+\n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n \n   fs.readFile(accountPath, \"utf8\", async (err, data) => {\n"
                },
                {
                    "date": 1742729490958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,14 @@\n \n \n const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n+// Get all products\n+router.get('/ps', (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  res.json(db.products);\n+});\n \n-\n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n \n   fs.readFile(accountPath, \"utf8\", async (err, data) => {\n"
                },
                {
                    "date": 1742729506281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n \n const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n // Get all products\n-router.get('/ps', (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+router.get('/profiles', (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n   res.json(db.products);\n });\n \n router.post(\"/signin\", async (req, res) => {\n"
                },
                {
                    "date": 1742729522836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,13 @@\n \n // Get all products\n router.get('/profiles', (req, res) => {\n   const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n-  res.json(db.products);\n+  res.json(db.products// Get all products\n+    router.get('/products', (req, res) => {\n+      const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+      res.json(db.products);\n+    }););\n });\n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1742729530173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,13 +46,9 @@\n \n // Get all products\n router.get('/profiles', (req, res) => {\n   const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n-  res.json(db.products// Get all products\n-    router.get('/products', (req, res) => {\n-      const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n-      res.json(db.products);\n-    }););\n+  res.json(db.);\n });\n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1742730176685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,11 @@\n \n const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n // Get all products\n-router.get('/profiles', (req, res) => {\n+router.get('/Aprofiles', (req, res) => {\n   const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n-  res.json(db.);\n+  res.json(db.users);\n });\n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1743600165114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const dotenv = require(\"dotenv\");\n const nodemailer = require(\"nodemailer\");\n const { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n const bodyParser = require('body-parser');  // Parse incoming request bodies\n-const JWT_SECRET = process.env.JWT_SECRET || \"mysecretkey\";\n+const JWT_SECRET = process.env.JWT_SECRET \n const SECRET_KEY = \"your-secret-key\"; // Change this in production\n const router = express.Router();\n \n const app = express();\n@@ -44,9 +44,9 @@\n \n const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n // Get all products\n-router.get('/Aprofiles', (req, res) => {\n+router.get('/AllProfiles', (req, res) => {\n   const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n   res.json(db.users);\n });\n \n"
                },
                {
                    "date": 1743758473902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n const dotenv = require(\"dotenv\");\n const nodemailer = require(\"nodemailer\");\n const { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n const bodyParser = require('body-parser');  // Parse incoming request bodies\n-const JWT_SECRET = process.env.JWT_SECRET \n-const SECRET_KEY = \"your-secret-key\"; // Change this in production\n+const JWT_SECRET = process.env.JWT_SECRET ;\n+\n const router = express.Router();\n \n const app = express();\n \n"
                },
                {
                    "date": 1744889827924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n const nodemailer = require(\"nodemailer\");\n const { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n const bodyParser = require('body-parser');  // Parse incoming request bodies\n const JWT_SECRET = process.env.JWT_SECRET ;\n-\n const router = express.Router();\n \n const app = express();\n \n@@ -107,5 +106,7 @@\n     res.status(404).json({ message: 'User not found' });\n   }\n });\n \n+\n+\n module.exports= router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744889835554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,7 +106,19 @@\n     res.status(404).json({ message: 'User not found' });\n   }\n });\n \n+router.post('/logs', (req, res) => {\n+  const { userId, action } = req.body;\n+  const db = JSON.parse(fs.readFileSync('db.json'));\n+  const newLog = {\n+    id: db.logs.length + 1,\n+    userId,\n+    action,\n+    timestamp: new Date().toISOString()\n+  };\n+  db.logs.push(newLog);\n+  fs.writeFileSync('db.json', JSON.stringify(db, null, 2));\n+  res.status(201).json(newLog);\n+});\n \n-\n module.exports= router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744889849080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     action,\n     timestamp: new Date().toISOString()\n   };\n   db.logs.push(newLog);\n-  fs.writeFileSync('db.j', JSON.stringify(db, null, 2));\n+  fs.writeFileSync('db.j, JSON.stringify(db, null, 2));\n   res.status(201).json(newLog);\n });\n \n module.exports= router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744889855477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     action,\n     timestamp: new Date().toISOString()\n   };\n   db.logs.push(newLog);\n-  fs.writeFileSync(a, JSON.stringify(db, null, 2));\n+  fs.writeFileSync(acc, JSON.stringify(db, null, 2));\n   res.status(201).json(newLog);\n });\n \n module.exports= router\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740559322955,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst axios = require('axios');\nconst fs = require(\"fs\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst cors =require(\"cors\")\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst dotenv = require(\"dotenv\");\nconst nodemailer = require(\"nodemailer\");\nconst { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\nconst bodyParser = require('body-parser');  // Parse incoming request bodies\nconst JWT_SECRET = process.env.JWT_SECRET || \"mysecretkey\";\nconst SECRET_KEY = \"your-secret-key\"; // Change this in production\nconst router = express.Router();\n\nconst app = express();\n\ndotenv.config();\n\n// Middleware to verify JWT token\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Format: \"Bearer <token>\"\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token is required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    req.user = user; // Attach the decoded user data to the request\n    next();\n  });\n};\n\n\napp.use(express.json());\napp.use(express.urlencoded({extended:true}))\n\n\n\nconst accountPath = path.join(__dirname, \"./account.json\");\n\n\nrouter.post(\"/signin\", async (req, res) => {\n  const { identifier, password} = req.body;\n\n  fs.readFile(accountPath, \"utf8\", async (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    let db = JSON.parse(data);\n    const user = db.users.find(user => user.email ===identifier || user.userName === identifier) \n    if (!user) return res.status(400).json({ message: \"Invalid credentials\" });\n    \n\n    // Compare password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({ message: \"Invalid credentials\" });\n\n    // Generate JWT token\n    const token = jwt.sign({ userId: user.id,role:user.role}, JWT_SECRET, { expiresIn: \"1h\" });\n    res.json({ token , role: user.role , id:user.id,username:user.userName});\n  });\n});\n\n// *Protected Route Example*\nrouter.get(\"/profile\", (req, res) => {\n  const token = req.headers.authorization?.split(\" \")[1];\n\n  if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    \n    fs.readFile(accountPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n      let db = JSON.parse(data);\n      const user = db.users.find(user => user.id === decoded.userId);\n      if (!user) return res.status(404).json({ message: \"User not found\" });\n\n      res.json(user);\n    });\n\n  } catch (error) {\n    res.status(401).json({ message: \"Invalid token\" });\n  }\n});\n\n\nmodule.exports= router"
        }
    ]
}