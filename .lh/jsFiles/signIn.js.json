{
    "sourceFile": "jsFiles/signIn.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1740559322955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740559333374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"./account.json\");\n+const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559364706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559393890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559550694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \".jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559587903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \".jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"//jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559893586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"//jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                },
                {
                    "date": 1740559909751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"./jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n \n router.post(\"/signin\", async (req, res) => {\n   const { identifier, password} = req.body;\n"
                }
            ],
            "date": 1740559322955,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst axios = require('axios');\nconst fs = require(\"fs\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst cors =require(\"cors\")\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst dotenv = require(\"dotenv\");\nconst nodemailer = require(\"nodemailer\");\nconst { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\nconst bodyParser = require('body-parser');  // Parse incoming request bodies\nconst JWT_SECRET = process.env.JWT_SECRET || \"mysecretkey\";\nconst SECRET_KEY = \"your-secret-key\"; // Change this in production\nconst router = express.Router();\n\nconst app = express();\n\ndotenv.config();\n\n// Middleware to verify JWT token\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Format: \"Bearer <token>\"\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token is required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    req.user = user; // Attach the decoded user data to the request\n    next();\n  });\n};\n\n\napp.use(express.json());\napp.use(express.urlencoded({extended:true}))\n\n\n\nconst accountPath = path.join(__dirname, \"./account.json\");\n\n\nrouter.post(\"/signin\", async (req, res) => {\n  const { identifier, password} = req.body;\n\n  fs.readFile(accountPath, \"utf8\", async (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    let db = JSON.parse(data);\n    const user = db.users.find(user => user.email ===identifier || user.userName === identifier) \n    if (!user) return res.status(400).json({ message: \"Invalid credentials\" });\n    \n\n    // Compare password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({ message: \"Invalid credentials\" });\n\n    // Generate JWT token\n    const token = jwt.sign({ userId: user.id,role:user.role}, JWT_SECRET, { expiresIn: \"1h\" });\n    res.json({ token , role: user.role , id:user.id,username:user.userName});\n  });\n});\n\n// *Protected Route Example*\nrouter.get(\"/profile\", (req, res) => {\n  const token = req.headers.authorization?.split(\" \")[1];\n\n  if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    \n    fs.readFile(accountPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n      let db = JSON.parse(data);\n      const user = db.users.find(user => user.id === decoded.userId);\n      if (!user) return res.status(404).json({ message: \"User not found\" });\n\n      res.json(user);\n    });\n\n  } catch (error) {\n    res.status(401).json({ message: \"Invalid token\" });\n  }\n});\n\n\nmodule.exports= router"
        }
    ]
}