{
    "sourceFile": "jsFiles/orders.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740560248830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740560254557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n-const ordersPath = path.join(__dirname, \"../orders.json\");\n+const ordersPath = path.join(__dirname, \"../jsonFilesorders.json\");\n \n \n \n // get orders\n"
                }
            ],
            "date": 1740560248830,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst router= express.Router();\nconst ordersPath = path.join(__dirname, \"../orders.json\");\n\n\n\n// get orders\nrouter.get(\"/orders/\", (req, res) => {\n  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    const jsonData = JSON.parse(data);\n    res.json(jsonData.orders);\n  });\n});\n\n// Add a oreders to ordersz.json\nrouter.post(\"/addTOorders/\", (req, res) => {\n  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    const jsonData = JSON.parse(data);\n    const order = { id: jsonData.products.length + 1, ...req.body };\n    jsonData.products.push(order);\n\n    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n      if (err) return res.status(500).json({ error: \"Error saving data\" });\n      res.status(201).json(order);\n    });\n  });\n});\n\n// Utility: Read products data from file\nconst readProductsOrders = () => {\n  const rawData = fs.readFileSync(ordersPath);\n  const data = JSON.parse(rawData);\n  return data.products;\n};\n\n// Utility: Write updated products back to file\nconst writeProductsOrders = (products) => {\n  const data = { products };\n  fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n};\n// Endpoint to get a single product by id\nrouter.get(\"/orders/:id\", (req, res) => {\n  try {\n    const orders = readProductsOrders();\n    const id = parseInt(req.params.id, 10);\n    const product = orders.find((p) => p.id === id);\n    if (!product) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n    res.json(product);\n  } catch (err) {\n    res.status(500).json({ error: \"Failed to read products data\" });\n  }\n});\n\n// PATCH endpoint to update a product partially\nrouter.patch(\"/updateOrders/:id\", (req, res) => {\n  try {\n    const products = readProductsOrders();\n    const id = parseInt(req.params.id, 10);\n    const index = products.findIndex((p) => p.id === id);\n\n    if (index === -1) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n\n    // Merge the existing product with the fields sent in the request body\n    const updatedProduct = { ...products[index], ...req.body };\n    products[index] = updatedProduct;\n\n    // Write the updated products back to the file\n    writeProductsOrders(products);\n\n    res.json(updatedProduct);\n  } catch (err) {\n    console.error(\"Error patching product:\", err);\n    res.status(500).json({ error: \"Failed to update product\" });\n  }\n});\n\n//  *API to Delete an orders by ID*\nrouter.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    let db = JSON.parse(data);\n    const itemId = parseInt(req.params.id);\n\n    // Find the item index\n    const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n    if (itemIndex === -1)\n      return res.status(404).json({ message: \"Item not found\" });\n\n    // Remove the item\n    db.orders.splice(itemIndex, 1);\n\n    // Save updated data to db.json\n    fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n      if (err) return res.status(500).json({ error: \"Error saving database\" });\n\n      res.json({ message: \"oreder  deleted successfully\" });\n    });\n  });\n});\n\n\n\nmodule.exports = router;\n"
        }
    ]
}