{
    "sourceFile": "jsFiles/orders.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 76,
            "patches": [
                {
                    "date": 1740560248830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740560254557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n-const ordersPath = path.join(__dirname, \"../orders.json\");\n+const ordersPath = path.join(__dirname, \"../jsonFilesorders.json\");\n \n \n \n // get orders\n"
                },
                {
                    "date": 1742203080402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n-const ordersPath = path.join(__dirname, \"../jsonFilesorders.json\");\n+const ordersPath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n \n \n // get orders\n@@ -16,9 +16,9 @@\n   });\n });\n \n // Add a oreders to ordersz.json\n-router.post(\"/addTOorders/\", (req, res) => {\n+router.post(\"/orders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742203110699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     res.json(jsonData.orders);\n   });\n });\n \n-// Add a oreders to ordersz.json\n+// Add a oreders to ordersr.json\n router.post(\"/orders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n"
                },
                {
                    "date": 1742203261833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n     res.json(jsonData.orders);\n   });\n });\n \n-// Add a oreders to ordersr.json\n-router.post(\"/orders/\", (req, res) => {\n+// Add a oreders to ordersz.json\n+router.post(\"/addTOorders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742204982497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   });\n });\n \n // Add a oreders to ordersz.json\n-router.post(\"/addTOorders/\", (req, res) => {\n+router.post(\"/addTorders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742205002604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   });\n });\n \n // Add a oreders to ordersz.json\n-router.post(\"/addTorders/\", (req, res) => {\n+router.post(\"/toorders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742205030311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   });\n });\n \n // Add a oreders to ordersz.json\n-router.post(\"/toorders/\", (req, res) => {\n+router.post(\"/addTorders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742205060402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   });\n });\n \n // Add a oreders to ordersz.json\n-router.post(\"/addTorders/\", (req, res) => {\n+// router.post(\"/addTOorders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742205086043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,21 +17,21 @@\n });\n \n // Add a oreders to ordersz.json\n // router.post(\"/addTOorders/\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-    const jsonData = JSON.parse(data);\n-    const order = { id: jsonData.products.length + 1, ...req.body };\n-    jsonData.products.push(order);\n+//     const jsonData = JSON.parse(data);\n+//     const order = { id: jsonData.products.length + 1, ...req.body };\n+//     jsonData.products.push(order);\n \n-    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-      if (err) return res.status(500).json({ error: \"Error saving data\" });\n-      res.status(201).json(order);\n-    });\n-  });\n-});\n+//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n+//       res.status(201).json(order);\n+//     });\n+//   });\n+// });\n \n // Utility: Read products data from file\n const readProductsOrders = () => {\n   const rawData = fs.readFileSync(ordersPath);\n"
                },
                {
                    "date": 1742205124182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n \n \n // get orders\n-router.get(\"/orders/\", (req, res) => {\n+router.get(\"/toorders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742205219898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n \n \n // get orders\n-router.get(\"/toorders/\", (req, res) => {\n+router.get(\"/orders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742205226685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,16 @@\n \n \n \n // get orders\n-router.get(\"/orders/\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// router.get(\"/orders/\", (req, res) => {\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-    const jsonData = JSON.parse(data);\n-    res.json(jsonData.orders);\n-  });\n-});\n+//     const jsonData = JSON.parse(data);\n+//     res.json(jsonData.orders);\n+//   });\n+// });\n \n // Add a oreders to ordersz.json\n // router.post(\"/addTOorders/\", (req, res) => {\n //   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n"
                },
                {
                    "date": 1742205265783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,114 +1,114 @@\n-const express = require(\"express\");\n-const fs = require(\"fs\");\n-const path = require(\"path\");\n-const router= express.Router();\n-const ordersPath = path.join(__dirname, \"../jsonFiles/orders.json\");\n+// const express = require(\"express\");\n+// const fs = require(\"fs\");\n+// const path = require(\"path\");\n+// const router= express.Router();\n+// const ordersPath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n \n \n-// get orders\n-// router.get(\"/orders/\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// // get orders\n+// // router.get(\"/orders/\", (req, res) => {\n+// //   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+// //     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     const jsonData = JSON.parse(data);\n-//     res.json(jsonData.orders);\n-//   });\n-// });\n+// //     const jsonData = JSON.parse(data);\n+// //     res.json(jsonData.orders);\n+// //   });\n+// // });\n \n-// Add a oreders to ordersz.json\n-// router.post(\"/addTOorders/\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// // Add a oreders to ordersz.json\n+// // router.post(\"/addTOorders/\", (req, res) => {\n+// //   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+// //     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     const jsonData = JSON.parse(data);\n-//     const order = { id: jsonData.products.length + 1, ...req.body };\n-//     jsonData.products.push(order);\n+// //     const jsonData = JSON.parse(data);\n+// //     const order = { id: jsonData.products.length + 1, ...req.body };\n+// //     jsonData.products.push(order);\n \n-//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n-//       res.status(201).json(order);\n-//     });\n-//   });\n-// });\n+// //     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+// //       if (err) return res.status(500).json({ error: \"Error saving data\" });\n+// //       res.status(201).json(order);\n+// //     });\n+// //   });\n+// // });\n \n-// Utility: Read products data from file\n-const readProductsOrders = () => {\n-  const rawData = fs.readFileSync(ordersPath);\n-  const data = JSON.parse(rawData);\n-  return data.products;\n-};\n+// // Utility: Read products data from file\n+// const readProductsOrders = () => {\n+//   const rawData = fs.readFileSync(ordersPath);\n+//   const data = JSON.parse(rawData);\n+//   return data.products;\n+// };\n \n-// Utility: Write updated products back to file\n-const writeProductsOrders = (products) => {\n-  const data = { products };\n-  fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n-};\n-// Endpoint to get a single product by id\n-router.get(\"/orders/:id\", (req, res) => {\n-  try {\n-    const orders = readProductsOrders();\n-    const id = parseInt(req.params.id, 10);\n-    const product = orders.find((p) => p.id === id);\n-    if (!product) {\n-      return res.status(404).json({ error: \"Product not found\" });\n-    }\n-    res.json(product);\n-  } catch (err) {\n-    res.status(500).json({ error: \"Failed to read products data\" });\n-  }\n-});\n+// // Utility: Write updated products back to file\n+// const writeProductsOrders = (products) => {\n+//   const data = { products };\n+//   fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n+// };\n+// // Endpoint to get a single product by id\n+// router.get(\"/orders/:id\", (req, res) => {\n+//   try {\n+//     const orders = readProductsOrders();\n+//     const id = parseInt(req.params.id, 10);\n+//     const product = orders.find((p) => p.id === id);\n+//     if (!product) {\n+//       return res.status(404).json({ error: \"Product not found\" });\n+//     }\n+//     res.json(product);\n+//   } catch (err) {\n+//     res.status(500).json({ error: \"Failed to read products data\" });\n+//   }\n+// });\n \n-// PATCH endpoint to update a product partially\n-router.patch(\"/updateOrders/:id\", (req, res) => {\n-  try {\n-    const products = readProductsOrders();\n-    const id = parseInt(req.params.id, 10);\n-    const index = products.findIndex((p) => p.id === id);\n+// // PATCH endpoint to update a product partially\n+// router.patch(\"/updateOrders/:id\", (req, res) => {\n+//   try {\n+//     const products = readProductsOrders();\n+//     const id = parseInt(req.params.id, 10);\n+//     const index = products.findIndex((p) => p.id === id);\n \n-    if (index === -1) {\n-      return res.status(404).json({ error: \"Product not found\" });\n-    }\n+//     if (index === -1) {\n+//       return res.status(404).json({ error: \"Product not found\" });\n+//     }\n \n-    // Merge the existing product with the fields sent in the request body\n-    const updatedProduct = { ...products[index], ...req.body };\n-    products[index] = updatedProduct;\n+//     // Merge the existing product with the fields sent in the request body\n+//     const updatedProduct = { ...products[index], ...req.body };\n+//     products[index] = updatedProduct;\n \n-    // Write the updated products back to the file\n-    writeProductsOrders(products);\n+//     // Write the updated products back to the file\n+//     writeProductsOrders(products);\n \n-    res.json(updatedProduct);\n-  } catch (err) {\n-    console.error(\"Error patching product:\", err);\n-    res.status(500).json({ error: \"Failed to update product\" });\n-  }\n-});\n+//     res.json(updatedProduct);\n+//   } catch (err) {\n+//     console.error(\"Error patching product:\", err);\n+//     res.status(500).json({ error: \"Failed to update product\" });\n+//   }\n+// });\n \n-//  *API to Delete an orders by ID*\n-router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// //  *API to Delete an orders by ID*\n+// router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-    let db = JSON.parse(data);\n-    const itemId = parseInt(req.params.id);\n+//     let db = JSON.parse(data);\n+//     const itemId = parseInt(req.params.id);\n \n-    // Find the item index\n-    const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n-    if (itemIndex === -1)\n-      return res.status(404).json({ message: \"Item not found\" });\n+//     // Find the item index\n+//     const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n+//     if (itemIndex === -1)\n+//       return res.status(404).json({ message: \"Item not found\" });\n \n-    // Remove the item\n-    db.orders.splice(itemIndex, 1);\n+//     // Remove the item\n+//     db.orders.splice(itemIndex, 1);\n \n-    // Save updated data to db.json\n-    fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n-      if (err) return res.status(500).json({ error: \"Error saving database\" });\n+//     // Save updated data to db.json\n+//     fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n+//       if (err) return res.status(500).json({ error: \"Error saving database\" });\n \n-      res.json({ message: \"oreder  deleted successfully\" });\n-    });\n-  });\n-});\n+//       res.json({ message: \"oreder  deleted successfully\" });\n+//     });\n+//   });\n+// });\n \n \n \n-module.exports = router;\n+// module.exports = router;\n"
                },
                {
                    "date": 1742205274554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,114 +1,114 @@\n-// const express = require(\"express\");\n-// const fs = require(\"fs\");\n-// const path = require(\"path\");\n-// const router= express.Router();\n-// const ordersPath = path.join(__dirname, \"../jsonFiles/orders.json\");\n+const express = require(\"express\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const router= express.Router();\n+const ordersPath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n \n \n-// // get orders\n-// // router.get(\"/orders/\", (req, res) => {\n-// //   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-// //     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// get orders\n+// router.get(\"/orders/\", (req, res) => {\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-// //     const jsonData = JSON.parse(data);\n-// //     res.json(jsonData.orders);\n-// //   });\n-// // });\n+//     const jsonData = JSON.parse(data);\n+//     res.json(jsonData.orders);\n+//   });\n+// });\n \n-// // Add a oreders to ordersz.json\n-// // router.post(\"/addTOorders/\", (req, res) => {\n-// //   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-// //     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// Add a oreders to ordersz.json\n+// router.post(\"/addTOorders/\", (req, res) => {\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-// //     const jsonData = JSON.parse(data);\n-// //     const order = { id: jsonData.products.length + 1, ...req.body };\n-// //     jsonData.products.push(order);\n+//     const jsonData = JSON.parse(data);\n+//     const order = { id: jsonData.products.length + 1, ...req.body };\n+//     jsonData.products.push(order);\n \n-// //     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-// //       if (err) return res.status(500).json({ error: \"Error saving data\" });\n-// //       res.status(201).json(order);\n-// //     });\n-// //   });\n-// // });\n+//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n+//       res.status(201).json(order);\n+//     });\n+//   });\n+// });\n \n-// // Utility: Read products data from file\n-// const readProductsOrders = () => {\n-//   const rawData = fs.readFileSync(ordersPath);\n-//   const data = JSON.parse(rawData);\n-//   return data.products;\n-// };\n+// Utility: Read products data from file\n+const readProductsOrders = () => {\n+  const rawData = fs.readFileSync(ordersPath);\n+  const data = JSON.parse(rawData);\n+  return data.products;\n+};\n \n-// // Utility: Write updated products back to file\n-// const writeProductsOrders = (products) => {\n-//   const data = { products };\n-//   fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n-// };\n-// // Endpoint to get a single product by id\n-// router.get(\"/orders/:id\", (req, res) => {\n-//   try {\n-//     const orders = readProductsOrders();\n-//     const id = parseInt(req.params.id, 10);\n-//     const product = orders.find((p) => p.id === id);\n-//     if (!product) {\n-//       return res.status(404).json({ error: \"Product not found\" });\n-//     }\n-//     res.json(product);\n-//   } catch (err) {\n-//     res.status(500).json({ error: \"Failed to read products data\" });\n-//   }\n-// });\n+// Utility: Write updated products back to file\n+const writeProductsOrders = (products) => {\n+  const data = { products };\n+  fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n+};\n+// Endpoint to get a single product by id\n+router.get(\"/orders/:id\", (req, res) => {\n+  try {\n+    const orders = readProductsOrders();\n+    const id = parseInt(req.params.id, 10);\n+    const product = orders.find((p) => p.id === id);\n+    if (!product) {\n+      return res.status(404).json({ error: \"Product not found\" });\n+    }\n+    res.json(product);\n+  } catch (err) {\n+    res.status(500).json({ error: \"Failed to read products data\" });\n+  }\n+});\n \n-// // PATCH endpoint to update a product partially\n-// router.patch(\"/updateOrders/:id\", (req, res) => {\n-//   try {\n-//     const products = readProductsOrders();\n-//     const id = parseInt(req.params.id, 10);\n-//     const index = products.findIndex((p) => p.id === id);\n+// PATCH endpoint to update a product partially\n+router.patch(\"/updateOrders/:id\", (req, res) => {\n+  try {\n+    const products = readProductsOrders();\n+    const id = parseInt(req.params.id, 10);\n+    const index = products.findIndex((p) => p.id === id);\n \n-//     if (index === -1) {\n-//       return res.status(404).json({ error: \"Product not found\" });\n-//     }\n+    if (index === -1) {\n+      return res.status(404).json({ error: \"Product not found\" });\n+    }\n \n-//     // Merge the existing product with the fields sent in the request body\n-//     const updatedProduct = { ...products[index], ...req.body };\n-//     products[index] = updatedProduct;\n+    // Merge the existing product with the fields sent in the request body\n+    const updatedProduct = { ...products[index], ...req.body };\n+    products[index] = updatedProduct;\n \n-//     // Write the updated products back to the file\n-//     writeProductsOrders(products);\n+    // Write the updated products back to the file\n+    writeProductsOrders(products);\n \n-//     res.json(updatedProduct);\n-//   } catch (err) {\n-//     console.error(\"Error patching product:\", err);\n-//     res.status(500).json({ error: \"Failed to update product\" });\n-//   }\n-// });\n+    res.json(updatedProduct);\n+  } catch (err) {\n+    console.error(\"Error patching product:\", err);\n+    res.status(500).json({ error: \"Failed to update product\" });\n+  }\n+});\n \n-// //  *API to Delete an orders by ID*\n-// router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+//  *API to Delete an orders by ID*\n+router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n+  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+    if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     let db = JSON.parse(data);\n-//     const itemId = parseInt(req.params.id);\n+    let db = JSON.parse(data);\n+    const itemId = parseInt(req.params.id);\n \n-//     // Find the item index\n-//     const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n-//     if (itemIndex === -1)\n-//       return res.status(404).json({ message: \"Item not found\" });\n+    // Find the item index\n+    const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n+    if (itemIndex === -1)\n+      return res.status(404).json({ message: \"Item not found\" });\n \n-//     // Remove the item\n-//     db.orders.splice(itemIndex, 1);\n+    // Remove the item\n+    db.orders.splice(itemIndex, 1);\n \n-//     // Save updated data to db.json\n-//     fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n-//       if (err) return res.status(500).json({ error: \"Error saving database\" });\n+    // Save updated data to db.json\n+    fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n+      if (err) return res.status(500).json({ error: \"Error saving database\" });\n \n-//       res.json({ message: \"oreder  deleted successfully\" });\n-//     });\n-//   });\n-// });\n+      res.json({ message: \"oreder  deleted successfully\" });\n+    });\n+  });\n+});\n \n \n \n-// module.exports = router;\n+module.exports = router;\n"
                },
                {
                    "date": 1742205287904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,83 +32,83 @@\n //   });\n // });\n \n // Utility: Read products data from file\n-const readProductsOrders = () => {\n-  const rawData = fs.readFileSync(ordersPath);\n-  const data = JSON.parse(rawData);\n-  return data.products;\n-};\n+// const readProductsOrders = () => {\n+//   const rawData = fs.readFileSync(ordersPath);\n+//   const data = JSON.parse(rawData);\n+//   return data.products;\n+// };\n \n-// Utility: Write updated products back to file\n-const writeProductsOrders = (products) => {\n-  const data = { products };\n-  fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n-};\n-// Endpoint to get a single product by id\n-router.get(\"/orders/:id\", (req, res) => {\n-  try {\n-    const orders = readProductsOrders();\n-    const id = parseInt(req.params.id, 10);\n-    const product = orders.find((p) => p.id === id);\n-    if (!product) {\n-      return res.status(404).json({ error: \"Product not found\" });\n-    }\n-    res.json(product);\n-  } catch (err) {\n-    res.status(500).json({ error: \"Failed to read products data\" });\n-  }\n-});\n+// // Utility: Write updated products back to file\n+// const writeProductsOrders = (products) => {\n+//   const data = { products };\n+//   fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n+// };\n+// // Endpoint to get a single product by id\n+// router.get(\"/orders/:id\", (req, res) => {\n+//   try {\n+//     const orders = readProductsOrders();\n+//     const id = parseInt(req.params.id, 10);\n+//     const product = orders.find((p) => p.id === id);\n+//     if (!product) {\n+//       return res.status(404).json({ error: \"Product not found\" });\n+//     }\n+//     res.json(product);\n+//   } catch (err) {\n+//     res.status(500).json({ error: \"Failed to read products data\" });\n+//   }\n+// });\n \n-// PATCH endpoint to update a product partially\n-router.patch(\"/updateOrders/:id\", (req, res) => {\n-  try {\n-    const products = readProductsOrders();\n-    const id = parseInt(req.params.id, 10);\n-    const index = products.findIndex((p) => p.id === id);\n+// // PATCH endpoint to update a product partially\n+// router.patch(\"/updateOrders/:id\", (req, res) => {\n+//   try {\n+//     const products = readProductsOrders();\n+//     const id = parseInt(req.params.id, 10);\n+//     const index = products.findIndex((p) => p.id === id);\n \n-    if (index === -1) {\n-      return res.status(404).json({ error: \"Product not found\" });\n-    }\n+//     if (index === -1) {\n+//       return res.status(404).json({ error: \"Product not found\" });\n+//     }\n \n-    // Merge the existing product with the fields sent in the request body\n-    const updatedProduct = { ...products[index], ...req.body };\n-    products[index] = updatedProduct;\n+//     // Merge the existing product with the fields sent in the request body\n+//     const updatedProduct = { ...products[index], ...req.body };\n+//     products[index] = updatedProduct;\n \n-    // Write the updated products back to the file\n-    writeProductsOrders(products);\n+//     // Write the updated products back to the file\n+//     writeProductsOrders(products);\n \n-    res.json(updatedProduct);\n-  } catch (err) {\n-    console.error(\"Error patching product:\", err);\n-    res.status(500).json({ error: \"Failed to update product\" });\n-  }\n-});\n+//     res.json(updatedProduct);\n+//   } catch (err) {\n+//     console.error(\"Error patching product:\", err);\n+//     res.status(500).json({ error: \"Failed to update product\" });\n+//   }\n+// });\n \n-//  *API to Delete an orders by ID*\n-router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// //  *API to Delete an orders by ID*\n+// router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-    let db = JSON.parse(data);\n-    const itemId = parseInt(req.params.id);\n+//     let db = JSON.parse(data);\n+//     const itemId = parseInt(req.params.id);\n \n-    // Find the item index\n-    const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n-    if (itemIndex === -1)\n-      return res.status(404).json({ message: \"Item not found\" });\n+//     // Find the item index\n+//     const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n+//     if (itemIndex === -1)\n+//       return res.status(404).json({ message: \"Item not found\" });\n \n-    // Remove the item\n-    db.orders.splice(itemIndex, 1);\n+//     // Remove the item\n+//     db.orders.splice(itemIndex, 1);\n \n-    // Save updated data to db.json\n-    fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n-      if (err) return res.status(500).json({ error: \"Error saving database\" });\n+//     // Save updated data to db.json\n+//     fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n+//       if (err) return res.status(500).json({ error: \"Error saving database\" });\n \n-      res.json({ message: \"oreder  deleted successfully\" });\n-    });\n-  });\n-});\n+//       res.json({ message: \"oreder  deleted successfully\" });\n+//     });\n+//   });\n+// });\n \n \n \n module.exports = router;\n"
                },
                {
                    "date": 1742207541813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,109 +6,109 @@\n \n \n \n // get orders\n-// router.get(\"/orders/\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+router.get(\"/orders/\", (req, res) => {\n+  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+    if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     const jsonData = JSON.parse(data);\n-//     res.json(jsonData.orders);\n-//   });\n-// });\n+    const jsonData = JSON.parse(data);\n+    res.json(jsonData.orders);\n+  });\n+});\n \n // Add a oreders to ordersz.json\n-// router.post(\"/addTOorders/\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+router.post(\"/addTOorders/\", (req, res) => {\n+  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+    if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     const jsonData = JSON.parse(data);\n-//     const order = { id: jsonData.products.length + 1, ...req.body };\n-//     jsonData.products.push(order);\n+    const jsonData = JSON.parse(data);\n+    const order = { id: jsonData.products.length + 1, ...req.body };\n+    jsonData.products.push(order);\n \n-//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n-//       res.status(201).json(order);\n-//     });\n-//   });\n-// });\n+    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+      if (err) return res.status(500).json({ error: \"Error saving data\" });\n+      res.status(201).json(order);\n+    });\n+  });\n+});\n \n // Utility: Read products data from file\n-// const readProductsOrders = () => {\n-//   const rawData = fs.readFileSync(ordersPath);\n-//   const data = JSON.parse(rawData);\n-//   return data.products;\n-// };\n+const readProductsOrders = () => {\n+  const rawData = fs.readFileSync(ordersPath);\n+  const data = JSON.parse(rawData);\n+  return data.products;\n+};\n \n-// // Utility: Write updated products back to file\n-// const writeProductsOrders = (products) => {\n-//   const data = { products };\n-//   fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n-// };\n-// // Endpoint to get a single product by id\n-// router.get(\"/orders/:id\", (req, res) => {\n-//   try {\n-//     const orders = readProductsOrders();\n-//     const id = parseInt(req.params.id, 10);\n-//     const product = orders.find((p) => p.id === id);\n-//     if (!product) {\n-//       return res.status(404).json({ error: \"Product not found\" });\n-//     }\n-//     res.json(product);\n-//   } catch (err) {\n-//     res.status(500).json({ error: \"Failed to read products data\" });\n-//   }\n-// });\n+// Utility: Write updated products back to file\n+const writeProductsOrders = (products) => {\n+  const data = { products };\n+  fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n+};\n+// Endpoint to get a single product by id\n+router.get(\"/orders/:id\", (req, res) => {\n+  try {\n+    const orders = readProductsOrders();\n+    const id = parseInt(req.params.id, 10);\n+    const product = orders.find((p) => p.id === id);\n+    if (!product) {\n+      return res.status(404).json({ error: \"Product not found\" });\n+    }\n+    res.json(product);\n+  } catch (err) {\n+    res.status(500).json({ error: \"Failed to read products data\" });\n+  }\n+});\n \n-// // PATCH endpoint to update a product partially\n-// router.patch(\"/updateOrders/:id\", (req, res) => {\n-//   try {\n-//     const products = readProductsOrders();\n-//     const id = parseInt(req.params.id, 10);\n-//     const index = products.findIndex((p) => p.id === id);\n+// PATCH endpoint to update a product partially\n+router.patch(\"/updateOrders/:id\", (req, res) => {\n+  try {\n+    const products = readProductsOrders();\n+    const id = parseInt(req.params.id, 10);\n+    const index = products.findIndex((p) => p.id === id);\n \n-//     if (index === -1) {\n-//       return res.status(404).json({ error: \"Product not found\" });\n-//     }\n+    if (index === -1) {\n+      return res.status(404).json({ error: \"Product not found\" });\n+    }\n \n-//     // Merge the existing product with the fields sent in the request body\n-//     const updatedProduct = { ...products[index], ...req.body };\n-//     products[index] = updatedProduct;\n+    // Merge the existing product with the fields sent in the request body\n+    const updatedProduct = { ...products[index], ...req.body };\n+    products[index] = updatedProduct;\n \n-//     // Write the updated products back to the file\n-//     writeProductsOrders(products);\n+    // Write the updated products back to the file\n+    writeProductsOrders(products);\n \n-//     res.json(updatedProduct);\n-//   } catch (err) {\n-//     console.error(\"Error patching product:\", err);\n-//     res.status(500).json({ error: \"Failed to update product\" });\n-//   }\n-// });\n+    res.json(updatedProduct);\n+  } catch (err) {\n+    console.error(\"Error patching product:\", err);\n+    res.status(500).json({ error: \"Failed to update product\" });\n+  }\n+});\n \n-// //  *API to Delete an orders by ID*\n-// router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+//  *API to Delete an orders by ID*\n+router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n+  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+    if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     let db = JSON.parse(data);\n-//     const itemId = parseInt(req.params.id);\n+    let db = JSON.parse(data);\n+    const itemId = parseInt(req.params.id);\n \n-//     // Find the item index\n-//     const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n-//     if (itemIndex === -1)\n-//       return res.status(404).json({ message: \"Item not found\" });\n+    // Find the item index\n+    const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n+    if (itemIndex === -1)\n+      return res.status(404).json({ message: \"Item not found\" });\n \n-//     // Remove the item\n-//     db.orders.splice(itemIndex, 1);\n+    // Remove the item\n+    db.orders.splice(itemIndex, 1);\n \n-//     // Save updated data to db.json\n-//     fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n-//       if (err) return res.status(500).json({ error: \"Error saving database\" });\n+    // Save updated data to db.json\n+    fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n+      if (err) return res.status(500).json({ error: \"Error saving database\" });\n \n-//       res.json({ message: \"oreder  deleted successfully\" });\n-//     });\n-//   });\n-// });\n+      res.json({ message: \"oreder  deleted successfully\" });\n+    });\n+  });\n+});\n \n \n \n module.exports = router;\n"
                },
                {
                    "date": 1742207556767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,23 +15,23 @@\n     res.json(jsonData.orders);\n   });\n });\n \n-// Add a oreders to ordersz.json\n-router.post(\"/addTOorders/\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// // Add a oreders to ordersz.json\n+// router.post(\"/addTOorders/\", (req, res) => {\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-    const jsonData = JSON.parse(data);\n-    const order = { id: jsonData.products.length + 1, ...req.body };\n-    jsonData.products.push(order);\n+//     const jsonData = JSON.parse(data);\n+//     const order = { id: jsonData.products.length + 1, ...req.body };\n+//     jsonData.products.push(order);\n \n-    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-      if (err) return res.status(500).json({ error: \"Error saving data\" });\n-      res.status(201).json(order);\n-    });\n-  });\n-});\n+//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n+//       res.status(201).json(order);\n+//     });\n+//   });\n+// });\n \n // Utility: Read products data from file\n const readProductsOrders = () => {\n   const rawData = fs.readFileSync(ordersPath);\n"
                },
                {
                    "date": 1742207572690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,28 @@\n     res.json(jsonData.orders);\n   });\n });\n \n+// 🛍️ Checkout Order\n+router.post(\"/orders\", (req, res) => {\n+  try {\n+    const orders = readJSONFile(ordersPath);\n+    const newOrder = { id: Date.now(), ...req.body };\n+\n+    orders.push(newOrder);\n+    writeJSONFile(ordersPath, orders);\n+\n+    // Clear the cart\n+    const db = readJSONFile(dbPath);\n+    db.cart = [];\n+    writeJSONFile(dbPath, db);\n+\n+    res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n+  } catch (error) {\n+    res.status(500).json({ error: \"Error processing order\" });\n+  }\n+});\n+\n // // Add a oreders to ordersz.json\n // router.post(\"/addTOorders/\", (req, res) => {\n //   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n //     if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1742207597471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n     // Clear the cart\n     const db = readJSONFile(dbPath);\n     db.cart = [];\n-    writeJSONFile(dbPath, db);\n+    writeJSONFile(orders, db);\n \n     res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n   } catch (error) {\n     res.status(500).json({ error: \"Error processing order\" });\n"
                },
                {
                    "date": 1742207620795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,11 @@\n     orders.push(newOrder);\n     writeJSONFile(ordersPath, orders);\n \n     // Clear the cart\n-    const db = readJSONFile(dbPath);\n+    const db = readJSONFile(Path);\n     db.cart = [];\n-    writeJSONFile(orders, db);\n+    writeJSONFile(ordersPath, db);\n \n     res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n   } catch (error) {\n     res.status(500).json({ error: \"Error processing order\" });\n"
                },
                {
                    "date": 1742207628718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     orders.push(newOrder);\n     writeJSONFile(ordersPath, orders);\n \n     // Clear the cart\n-    const db = readJSONFile(Path);\n+    const db = readJSONFile(ordersPath);\n     db.cart = [];\n     writeJSONFile(ordersPath, db);\n \n     res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n"
                },
                {
                    "date": 1742208545462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     const db = readJSONFile(ordersPath);\n     db.cart = [];\n     writeJSONFile(ordersPath, db);\n \n-    res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n+    res.status(201).json({ message: \"lllOrder placed successfully!\", order: newOrder });\n   } catch (error) {\n     res.status(500).json({ error: \"Error processing order\" });\n   }\n });\n"
                },
                {
                    "date": 1742208577974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     const db = readJSONFile(ordersPath);\n     db.cart = [];\n     writeJSONFile(ordersPath, db);\n \n-    res.status(201).json({ message: \"lllOrder placed successfully!\", order: newOrder });\n+    res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n   } catch (error) {\n     res.status(500).json({ error: \"Error processing order\" });\n   }\n });\n"
                },
                {
                    "date": 1742208588972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     writeJSONFile(ordersPath, orders);\n \n     // Clear the cart\n     const db = readJSONFile(ordersPath);\n-    db.cart = [];\n+    db.car = [];\n     writeJSONFile(ordersPath, db);\n \n     res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n   } catch (error) {\n"
                },
                {
                    "date": 1742208605342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,25 +15,9 @@\n     res.json(jsonData.orders);\n   });\n });\n \n-// 🛍️ Checkout Order\n-router.post(\"/orders\", (req, res) => {\n-  try {\n-    const orders = readJSONFile(ordersPath);\n-    const newOrder = { id: Date.now(), ...req.body };\n \n-    orders.push(newOrder);\n-    writeJSONFile(ordersPath, orders);\n-\n-    // Clear the cart\n-    const db = readJSONFile(ordersPath);\n-    db.car = [];\n-    writeJSONFile(ordersPath, db);\n-\n-    res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n-  } catch (error) {\n-    res.status(500).json({ error: \"Error processing order\" });\n   }\n });\n \n // // Add a oreders to ordersz.json\n"
                },
                {
                    "date": 1742208616799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,26 +16,24 @@\n   });\n });\n \n \n-  }\n-});\n \n-// // Add a oreders to ordersz.json\n-// router.post(\"/addTOorders/\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// Add a oreders to ordersz.json\n+router.post(\"/addTOorders/\", (req, res) => {\n+  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+    if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     const jsonData = JSON.parse(data);\n-//     const order = { id: jsonData.products.length + 1, ...req.body };\n-//     jsonData.products.push(order);\n+    const jsonData = JSON.parse(data);\n+    const order = { id: jsonData.products.length + 1, ...req.body };\n+    jsonData.products.push(order);\n \n-//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n-//       res.status(201).json(order);\n-//     });\n-//   });\n-// });\n+    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+      if (err) return res.status(500).json({ error: \"Error saving data\" });\n+      res.status(201).json(order);\n+    });\n+  });\n+});\n \n // Utility: Read products data from file\n const readProductsOrders = () => {\n   const rawData = fs.readFileSync(ordersPath);\n"
                },
                {
                    "date": 1742208656722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n \n \n // Add a oreders to ordersz.json\n-router.post(\"/addTOorders/\", (req, res) => {\n+router.post(\"/addorders/\", (req, res) => {\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n"
                },
                {
                    "date": 1742209456434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,24 +16,26 @@\n   });\n });\n \n \n+  }\n+});\n \n-// Add a oreders to ordersz.json\n-router.post(\"/addorders/\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// // Add a oreders to ordersz.json\n+// router.post(\"/addTOorders/\", (req, res) => {\n+//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-    const jsonData = JSON.parse(data);\n-    const order = { id: jsonData.products.length + 1, ...req.body };\n-    jsonData.products.push(order);\n+//     const jsonData = JSON.parse(data);\n+//     const order = { id: jsonData.products.length + 1, ...req.body };\n+//     jsonData.products.push(order);\n \n-    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-      if (err) return res.status(500).json({ error: \"Error saving data\" });\n-      res.status(201).json(order);\n-    });\n-  });\n-});\n+//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n+//       res.status(201).json(order);\n+//     });\n+//   });\n+// });\n \n // Utility: Read products data from file\n const readProductsOrders = () => {\n   const rawData = fs.readFileSync(ordersPath);\n"
                },
                {
                    "date": 1742209558561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,26 +16,24 @@\n   });\n });\n \n \n-  }\n-});\n \n-// // Add a oreders to ordersz.json\n-// router.post(\"/addTOorders/\", (req, res) => {\n-//   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-//     if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// Add a oreders to ordersz.json\n+router.post(\"/orders/\", (req, res) => {\n+  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n+    if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n-//     const jsonData = JSON.parse(data);\n-//     const order = { id: jsonData.products.length + 1, ...req.body };\n-//     jsonData.products.push(order);\n+    const jsonData = JSON.parse(data);\n+    const order = { id: jsonData.products.length + 1, ...req.body };\n+    jsonData.products.push(order);\n \n-//     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-//       if (err) return res.status(500).json({ error: \"Error saving data\" });\n-//       res.status(201).json(order);\n-//     });\n-//   });\n-// });\n+    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n+      if (err) return res.status(500).json({ error: \"Error saving data\" });\n+      res.status(201).json(order);\n+    });\n+  });\n+});\n \n // Utility: Read products data from file\n const readProductsOrders = () => {\n   const rawData = fs.readFileSync(ordersPath);\n"
                },
                {
                    "date": 1742209616975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n-    const order = { id: jsonData.products.length + 1, ...req.body };\n+    const order = { id:date, ...req.body };\n     jsonData.products.push(order);\n \n     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n       if (err) return res.status(500).json({ error: \"Error saving data\" });\n"
                },
                {
                    "date": 1742209624744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   fs.readFile(ordersPath, \"utf8\", (err, data) => {\n     if (err) return res.status(500).json({ error: \"Error reading database\" });\n \n     const jsonData = JSON.parse(data);\n-    const order = { id:date, ...req.body };\n+    const order = { id:Date.now(), ...req.body };\n     jsonData.products.push(order);\n \n     fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n       if (err) return res.status(500).json({ error: \"Error saving data\" });\n"
                },
                {
                    "date": 1742210431065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,116 +1,107 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n-const router= express.Router();\n-const ordersPath = path.join(__dirname, \"../jsonFiles/orders.json\");\n+const bodyParser = require(\"body-parser\");\n+const cors = require(\"cors\");\n \n+// Initialize Express app\n+const app = express();\n+const PORT = 5000;\n \n+// Middleware\n+app.use(cors());\n+app.use(bodyParser.json());\n \n-// get orders\n-router.get(\"/orders/\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// Path to the orders.json file\n+const ordersFilePath = path.join(__dirname, \"orders.json\");\n \n-    const jsonData = JSON.parse(data);\n-    res.json(jsonData.orders);\n-  });\n-});\n+// Helper function to read orders from the file\n+const readOrders = () => {\n+  if (!fs.existsSync(ordersFilePath)) {\n+    fs.writeFileSync(ordersFilePath, \"[]\"); // Create an empty array if the file doesn't exist\n+  }\n+  const data = fs.readFileSync(ordersFilePath, \"utf-8\");\n+  return JSON.parse(data);\n+};\n \n+// Helper function to write orders to the file\n+const writeOrders = (orders) => {\n+  fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n+};\n \n+// Checkout route\n+app.post(\"/api/checkout\", (req, res) => {\n+  const { userId, totalAmount, shippingFee, items, shipping } = req.body;\n \n-// Add a oreders to ordersz.json\n-router.post(\"/orders/\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  try {\n+    // Read existing orders\n+    const orders = readOrders();\n \n-    const jsonData = JSON.parse(data);\n-    const order = { id:Date.now(), ...req.body };\n-    jsonData.products.push(order);\n+    // Create a new order\n+    const newOrder = {\n+      id: Date.now().toString(), // Generate a unique ID\n+      userId,\n+      totalAmount,\n+      shippingFee,\n+      items,\n+      shipping,\n+      date: new Date().toISOString(), // Add the current date and time\n+    };\n \n-    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n-      if (err) return res.status(500).json({ error: \"Error saving data\" });\n-      res.status(201).json(order);\n-    });\n-  });\n-});\n+    // Add the new order to the list\n+    orders.push(newOrder);\n \n-// Utility: Read products data from file\n-const readProductsOrders = () => {\n-  const rawData = fs.readFileSync(ordersPath);\n-  const data = JSON.parse(rawData);\n-  return data.products;\n-};\n+    // Save the updated orders list to the file\n+    writeOrders(orders);\n \n-// Utility: Write updated products back to file\n-const writeProductsOrders = (products) => {\n-  const data = { products };\n-  fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n-};\n-// Endpoint to get a single product by id\n-router.get(\"/orders/:id\", (req, res) => {\n-  try {\n-    const orders = readProductsOrders();\n-    const id = parseInt(req.params.id, 10);\n-    const product = orders.find((p) => p.id === id);\n-    if (!product) {\n-      return res.status(404).json({ error: \"Product not found\" });\n-    }\n-    res.json(product);\n-  } catch (err) {\n-    res.status(500).json({ error: \"Failed to read products data\" });\n+    // Respond with success message and the new order\n+    res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n+  } catch (error) {\n+    console.error(\"Error during checkout:\", error);\n+    res.status(500).json({ message: \"Checkout failed. Please try again.\" });\n   }\n });\n \n-// PATCH endpoint to update a product partially\n-router.patch(\"/updateOrders/:id\", (req, res) => {\n+// Get all orders route\n+app.get(\"/api/orders\", (req, res) => {\n   try {\n-    const products = readProductsOrders();\n-    const id = parseInt(req.params.id, 10);\n-    const index = products.findIndex((p) => p.id === id);\n-\n-    if (index === -1) {\n-      return res.status(404).json({ error: \"Product not found\" });\n-    }\n-\n-    // Merge the existing product with the fields sent in the request body\n-    const updatedProduct = { ...products[index], ...req.body };\n-    products[index] = updatedProduct;\n-\n-    // Write the updated products back to the file\n-    writeProductsOrders(products);\n-\n-    res.json(updatedProduct);\n-  } catch (err) {\n-    console.error(\"Error patching product:\", err);\n-    res.status(500).json({ error: \"Failed to update product\" });\n+    const orders = readOrders();\n+    res.status(200).json(orders);\n+  } catch (error) {\n+    console.error(\"Error fetching orders:\", error);\n+    res.status(500).json({ message: \"Failed to fetch orders.\" });\n   }\n });\n \n-//  *API to Delete an orders by ID*\n-router.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n-  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n+// Delete order route\n+app.delete(\"/api/orders/:id\", (req, res) => {\n+  const { id } = req.params;\n \n-    let db = JSON.parse(data);\n-    const itemId = parseInt(req.params.id);\n+  try {\n+    // Read existing orders\n+    let orders = readOrders();\n \n-    // Find the item index\n-    const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n-    if (itemIndex === -1)\n-      return res.status(404).json({ message: \"Item not found\" });\n+    // Find the index of the order to delete\n+    const orderIndex = orders.findIndex((order) => order.id === id);\n \n-    // Remove the item\n-    db.orders.splice(itemIndex, 1);\n+    if (orderIndex === -1) {\n+      return res.status(404).json({ message: \"Order not found.\" });\n+    }\n \n-    // Save updated data to db.json\n-    fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n-      if (err) return res.status(500).json({ error: \"Error saving database\" });\n+    // Remove the order from the list\n+    orders.splice(orderIndex, 1);\n \n-      res.json({ message: \"oreder  deleted successfully\" });\n-    });\n-  });\n+    // Save the updated orders list to the file\n+    writeOrders(orders);\n+\n+    res.status(200).json({ message: \"Order deleted successfully!\" });\n+  } catch (error) {\n+    console.error(\"Error deleting order:\", error);\n+    res.status(500).json({ message: \"Failed to delete order.\" });\n+  }\n });\n \n-\n-\n-module.exports = router;\n+// Start the server\n+app.listen(PORT, () => {\n+  console.log(Server is running on http://localhost:${PORT});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742210440011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,5 @@\n     res.status(500).json({ message: \"Failed to delete order.\" });\n   }\n });\n \n-// Start the server\n-app.listen(PORT, () => {\n-  console.log(Server is running on http://localhost:${PORT});\n-});\n\\ No newline at end of file\n+modu\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742210447857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,5 +100,5 @@\n     res.status(500).json({ message: \"Failed to delete order.\" });\n   }\n });\n \n-modu\n\\ No newline at end of file\n+module.exports = rou\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742210453309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const fs = require(\"fs\");\n const path = require(\"path\");\n const bodyParser = require(\"body-parser\");\n const cors = require(\"cors\");\n+const { route } = require(\"./cart\");\n \n // Initialize Express app\n const app = express();\n const PORT = 5000;\n@@ -100,5 +101,5 @@\n     res.status(500).json({ message: \"Failed to delete order.\" });\n   }\n });\n \n-module.exports = rou\n\\ No newline at end of file\n+module.exports = route\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742210462033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,5 +101,5 @@\n     res.status(500).json({ message: \"Failed to delete order.\" });\n   }\n });\n \n-module.exports = route\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742210470980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n const { route } = require(\"./cart\");\n \n // Initialize Express app\n const app = express();\n-const PORT = 5000;\n \n+\n // Middleware\n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1742210490756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n const bodyParser = require(\"body-parser\");\n const cors = require(\"cors\");\n const { route } = require(\"./cart\");\n \n+\n // Initialize Express app\n const app = express();\n \n \n"
                },
                {
                    "date": 1742210498295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n const path = require(\"path\");\n const bodyParser = require(\"body-parser\");\n const cors = require(\"cors\");\n const { route } = require(\"./cart\");\n+cons\n \n-\n // Initialize Express app\n const app = express();\n \n \n"
                },
                {
                    "date": 1742210536607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require(\"path\");\n const bodyParser = require(\"body-parser\");\n const cors = require(\"cors\");\n const { route } = require(\"./cart\");\n-cons\n+const router = express.Router();\n \n // Initialize Express app\n const app = express();\n \n@@ -31,9 +31,9 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n // Checkout route\n-app.post(\"/api/checkout\", (req, res) => {\n+router.post(\"/api/checkout\", (req, res) => {\n   const { userId, totalAmount, shippingFee, items, shipping } = req.body;\n \n   try {\n     // Read existing orders\n"
                },
                {
                    "date": 1742210547159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,9 @@\n     res.status(500).json({ message: \"Checkout failed. Please try again.\" });\n   }\n });\n \n-// Get all orders route\n-app.get(\"/api/orders\", (req, res) => {\n+// Get all orders route.get(\"/api/orders\", (req, res) => {\n   try {\n     const orders = readOrders();\n     res.status(200).json(orders);\n   } catch (error) {\n"
                },
                {
                    "date": 1742210552388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,10 @@\n     res.status(500).json({ message: \"Checkout failed. Please try again.\" });\n   }\n });\n \n-// Get all orders route.get(\"/api/orders\", (req, res) => {\n+// Get all orders route\n+router.get(\"/api/orders\", (req, res) => {\n   try {\n     const orders = readOrders();\n     res.status(200).json(orders);\n   } catch (error) {\n"
                },
                {
                    "date": 1742210564217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n   }\n });\n \n // Delete order route\n-app.delete(\"/api/orders/:id\", (req, res) => {\n+router.delete(\"/api/orders/:id\", (req, res) => {\n   const { id } = req.params;\n \n   try {\n     // Read existing orders\n"
                },
                {
                    "date": 1742210643352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,22 @@\n     res.status(500).json({ message: \"Failed to fetch orders.\" });\n   }\n });\n \n+router.get(\"/orders/:id\", (req, res) => {\n+  try {\n+    const orders = readProductsOrders();\n+    const id = parseInt(req.params.id, 10);\n+    const product = orders.find((p) => p.id === id);\n+    if (!product) {\n+      return res.status(404).json({ error: \"Product not found\" });\n+    }\n+    res.json(product);\n+  } catch (err) {\n+    res.status(500).json({ error: \"Failed to read products data\" });\n+  }\n+});\n+\n // Delete order route\n router.delete(\"/api/orders/:id\", (req, res) => {\n   const { id } = req.params;\n \n"
                },
                {
                    "date": 1742210668021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   }\n });\n \n // Get all orders route\n-router.get(\"/api/orders\", (req, res) => {\n+router.get(\"/orders\", (req, res) => {\n   try {\n     const orders = readOrders();\n     res.status(200).json(orders);\n   } catch (error) {\n"
                },
                {
                    "date": 1742210700898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n // Checkout route\n-router.post(\"/api/checkout\", (req, res) => {\n+router.post(\"/order\", (req, res) => {\n   const { userId, totalAmount, shippingFee, items, shipping } = req.body;\n \n   try {\n     // Read existing orders\n"
                },
                {
                    "date": 1742211262250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n // Checkout route\n-router.post(\"/order\", (req, res) => {\n+router.post(\"/orders\", (req, res) => {\n   const { userId, totalAmount, shippingFee, items, shipping } = req.body;\n \n   try {\n     // Read existing orders\n@@ -41,12 +41,9 @@\n \n     // Create a new order\n     const newOrder = {\n       id: Date.now().toString(), // Generate a unique ID\n-      userId,\n-      totalAmount,\n-      shippingFee,\n-      items,\n+      \n       shipping,\n       date: new Date().toISOString(), // Add the current date and time\n     };\n \n"
                },
                {
                    "date": 1742211272954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,17 @@\n \n     // Create a new order\n     const newOrder = {\n       id: Date.now().toString(), // Generate a unique ID\n-      \n+      user: userInfo,\n+        date: formattedDate,\n+        totalAmount calculateTotalWithShipping(),\n+        cart: cart,\n+        shipping: {\n+          address,\n+          deliveryDate,\n+          isPickup,\n+        },\n       shipping,\n       date: new Date().toISOString(), // Add the current date and time\n     };\n \n"
                },
                {
                    "date": 1742212001345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,17 +41,12 @@\n \n     // Create a new order\n     const newOrder = {\n       id: Date.now().toString(), // Generate a unique ID\n-      user: userInfo,\n-        date: formattedDate,\n-        totalAmount calculateTotalWithShipping(),\n-        cart: cart,\n-        shipping: {\n-          address,\n-          deliveryDate,\n-          isPickup,\n-        },\n+      userId,\n+      totalAmount,\n+      shippingFee,\n+      items,\n       shipping,\n       date: new Date().toISOString(), // Add the current date and time\n     };\n \n"
                },
                {
                    "date": 1742212134090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n app.use(cors());\n app.use(bodyParser.json());\n \n // Path to the orders.json file\n-const ordersFilePath = path.join(__dirname, \"orders.json\");\n+const ordersFilePath = path.join(__dirname, \");\n \n // Helper function to read orders from the file\n const readOrders = () => {\n   if (!fs.existsSync(ordersFilePath)) {\n"
                },
                {
                    "date": 1742212139401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n app.use(cors());\n app.use(bodyParser.json());\n \n // Path to the orders.json file\n-const ordersFilePath = path.join(__dirname, \");\n+const ordersFilePath = path.join(__dirname, \"../jsonFiles/.json\");\n \n // Helper function to read orders from the file\n const readOrders = () => {\n   if (!fs.existsSync(ordersFilePath)) {\n"
                },
                {
                    "date": 1742212435362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n app.use(cors());\n app.use(bodyParser.json());\n \n // Path to the orders.json file\n-const ordersFilePath = path.join(__dirname, \"../jsonFiles/.json\");\n+const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n // Helper function to read orders from the file\n const readOrders = () => {\n   if (!fs.existsSync(ordersFilePath)) {\n@@ -30,41 +30,9 @@\n const writeOrders = (orders) => {\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n-// Checkout route\n-router.post(\"/orders\", (req, res) => {\n-  const { userId, totalAmount, shippingFee, items, shipping } = req.body;\n \n-  try {\n-    // Read existing orders\n-    const orders = readOrders();\n-\n-    // Create a new order\n-    const newOrder = {\n-      id: Date.now().toString(), // Generate a unique ID\n-      userId,\n-      totalAmount,\n-      shippingFee,\n-      items,\n-      shipping,\n-      date: new Date().toISOString(), // Add the current date and time\n-    };\n-\n-    // Add the new order to the list\n-    orders.push(newOrder);\n-\n-    // Save the updated orders list to the file\n-    writeOrders(orders);\n-\n-    // Respond with success message and the new order\n-    res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n-  } catch (error) {\n-    console.error(\"Error during checkout:\", error);\n-    res.status(500).json({ message: \"Checkout failed. Please try again.\" });\n-  }\n-});\n-\n // Get all orders route\n router.get(\"/orders\", (req, res) => {\n   try {\n     const orders = readOrders();\n"
                },
                {
                    "date": 1742212465648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n const writeOrders = (orders) => {\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n+\"../jsonFiles/db.json\n \n // Get all orders route\n router.get(\"/orders\", (req, res) => {\n   try {\n"
                },
                {
                    "date": 1742212471042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n const writeOrders = (orders) => {\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n-\"../jsonFiles/db.json\n \n+\n // Get all orders route\n router.get(\"/orders\", (req, res) => {\n   try {\n     const orders = readOrders();\n"
                },
                {
                    "date": 1742212495831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,20 @@\n const writeOrders = (orders) => {\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n+app.post('/orders', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const newOrder = {\n+    id: db.orders.length + 1,\n+    userId: req.user.id,\n+    ...req.body.orderData,\n+  };\n+  db.orders.push(newOrder);\n+  fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+  res.status(201).json(newOrder);\n+});\n \n-\n // Get all orders route\n router.get(\"/orders\", (req, res) => {\n   try {\n     const orders = readOrders();\n"
                },
                {
                    "date": 1742212502360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n const writeOrders = (orders) => {\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n-app.post('/orders', authenticateToken, (req, res) => {\n+router.post('/orders', authenticateToken, (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const newOrder = {\n     id: db.orders.length + 1,\n     userId: req.user.id,\n"
                },
                {
                    "date": 1742212510888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n router.post('/orders', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(orderPath, 'utf-8'));\n   const newOrder = {\n     id: db.orders.length + 1,\n     userId: req.user.id,\n     ...req.body.orderData,\n"
                },
                {
                    "date": 1742212519525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n router.post('/orders', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(orderPath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(ordersPath, 'utf-8'));\n   const newOrder = {\n     id: db.orders.length + 1,\n     userId: req.user.id,\n     ...req.body.orderData,\n"
                },
                {
                    "date": 1742212528199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n router.post('/orders', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(ordersPath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(ordersfilePath, 'utf-8'));\n   const newOrder = {\n     id: db.orders.length + 1,\n     userId: req.user.id,\n     ...req.body.orderData,\n"
                },
                {
                    "date": 1742212533583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n };\n \n router.post('/orders', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(ordersfilePath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(ordersFilePath, 'utf-8'));\n   const newOrder = {\n     id: db.orders.length + 1,\n     userId: req.user.id,\n     ...req.body.orderData,\n"
                },
                {
                    "date": 1742212905342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,46 @@\n-const express = require(\"express\");\n-const fs = require(\"fs\");\n-const path = require(\"path\");\n-const bodyParser = require(\"body-parser\");\n-const cors = require(\"cors\");\n-const { route } = require(\"./cart\");\n-const router = express.Router();\n+const express = require('express');\n+const cors = require('cors');\n+const fs = require('fs');\n+const path = require('path');\n+const bodyParser = require('body-parser');\n+const jwt = require('jsonwebtoken');\n \n-// Initialize Express app\n const app = express();\n+const PORT = 5000;\n+const dbFilePath = path.join(__dirname, 'db.json');\n+const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n \n-\n-// Middleware\n app.use(cors());\n app.use(bodyParser.json());\n+app.use(bodyParser.urlencoded({ extended: true }));\n \n-// Path to the orders.json file\n-const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n+// Middleware to authenticate token\n+const authenticateToken = (req, res, next) => {\n+  const token = req.headers['authorization'];\n+  if (!token) return res.sendStatus(401);\n \n-// Helper function to read orders from the file\n-const readOrders = () => {\n-  if (!fs.existsSync(ordersFilePath)) {\n-    fs.writeFileSync(ordersFilePath, \"[]\"); // Create an empty array if the file doesn't exist\n-  }\n-  const data = fs.readFileSync(ordersFilePath, \"utf-8\");\n-  return JSON.parse(data);\n+  jwt.verify(token.split(' ')[1], SECRET_KEY, (err, user) => {\n+    if (err) return res.sendStatus(403);\n+    req.user = user;\n+    next();\n+  });\n };\n \n-// Helper function to write orders to the file\n-const writeOrders = (orders) => {\n-  fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n-};\n+// Get user cart\n+app.get('/cart', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+  if (userCart) {\n+    res.json(userCart);\n+  } else {\n+    res.status(404).json({ message: 'Cart not found' });\n+  }\n+});\n \n-router.post('/orders', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(ordersFilePath, 'utf-8'));\n+// Place order\n+app.post('/orders', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const newOrder = {\n     id: db.orders.length + 1,\n     userId: req.user.id,\n     ...req.body.orderData,\n@@ -42,58 +49,20 @@\n   fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n   res.status(201).json(newOrder);\n });\n \n-// Get all orders route\n-router.get(\"/orders\", (req, res) => {\n-  try {\n-    const orders = readOrders();\n-    res.status(200).json(orders);\n-  } catch (error) {\n-    console.error(\"Error fetching orders:\", error);\n-    res.status(500).json({ message: \"Failed to fetch orders.\" });\n+// Clear cart\n+app.delete('/cart/:productId', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+  if (userCart) {\n+    userCart.items = userCart.items.filter(item => item.id !== parseInt(req.params.productId));\n+    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+    res.json(userCart);\n+  } else {\n+    res.status(404).json({ message: 'Cart not found' });\n   }\n });\n \n-router.get(\"/orders/:id\", (req, res) => {\n-  try {\n-    const orders = readProductsOrders();\n-    const id = parseInt(req.params.id, 10);\n-    const product = orders.find((p) => p.id === id);\n-    if (!product) {\n-      return res.status(404).json({ error: \"Product not found\" });\n-    }\n-    res.json(product);\n-  } catch (err) {\n-    res.status(500).json({ error: \"Failed to read products data\" });\n-  }\n-});\n-\n-// Delete order route\n-router.delete(\"/api/orders/:id\", (req, res) => {\n-  const { id } = req.params;\n-\n-  try {\n-    // Read existing orders\n-    let orders = readOrders();\n-\n-    // Find the index of the order to delete\n-    const orderIndex = orders.findIndex((order) => order.id === id);\n-\n-    if (orderIndex === -1) {\n-      return res.status(404).json({ message: \"Order not found.\" });\n-    }\n-\n-    // Remove the order from the list\n-    orders.splice(orderIndex, 1);\n-\n-    // Save the updated orders list to the file\n\\ No newline at end of file\n-    writeOrders(orders);\n-\n-    res.status(200).json({ message: \"Order deleted successfully!\" });\n-  } catch (error) {\n-    console.error(\"Error deleting order:\", error);\n-    res.status(500).json({ message: \"Failed to delete order.\" });\n-  }\n-});\n-\n-module.exports = router;\n+app.listen(PORT, () => {\n+  console.log(`Server is running on http://localhost:${PORT}`);\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742212915585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,5 @@\n   } else {\n     res.status(404).json({ message: 'Cart not found' });\n   }\n });\n-\n-app.listen(PORT, () => {\n-  console.log(`Server is running on http://localhost:${PORT}`);\n-});\n\\ No newline at end of file\n+module.export\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742212923116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+const express = require('express');\n+const cors = require('cors');\n+const fs = require('fs');\n+const path = require('path');\n+const bodyParser = require('body-parser');\n+const jwt = require('jsonwebtoken');\n+\n+const app = express();\n+const PORT = 5000;\n+const dbFilePath = path.join(__dirname, 'db.json');\n+const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n+\n+app.use(cors());\n+app.use(bodyParser.json());\n+app.use(bodyParser.urlencoded({ extended: true }));\n+\n+// Middleware to authenticate token\n+const authenticateToken = (req, res, next) => {\n+  const token = req.headers['authorization'];\n+  if (!token) return res.sendStatus(401);\n+\n+  jwt.verify(token.split(' ')[1], SECRET_KEY, (err, user) => {\n+    if (err) return res.sendStatus(403);\n+    req.user = user;\n+    next();\n+  });\n+};\n+\n+// Get user cart\n+app.get('/cart', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+  if (userCart) {\n+    res.json(userCart);\n+  } else {\n+    res.status(404).json({ message: 'Cart not found' });\n+  }\n+});\n+\n+// Place order\n+app.post('/orders', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const newOrder = {\n+    id: db.orders.length + 1,\n+    userId: req.user.id,\n+    ...req.body.orderData,\n+  };\n+  db.orders.push(newOrder);\n+  fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+  res.status(201).json(newOrder);\n+});\n+\n+// Clear cart\n+app.delete('/cart/:productId', authenticateToken, (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n+  if (userCart) {\n+    userCart.items = userCart.items.filter(item => item.id !== parseInt(req.params.productId));\n+    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+    res.json(userCart);\n+  } else {\n+    res.status(404).json({ message: 'Cart not found' });\n+  }\n+});\n+module.exports = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742212928546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n   res.status(201).json(newOrder);\n });\n \n // Clear cart\n-app.delete('/cart/:productId', authenticateToken, (req, res) => {\n+a.delete('/cart/:productId', authenticateToken, (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const userCart = db.carts.find(cart => cart.userId === req.user.id);\n   if (userCart) {\n     userCart.items = userCart.items.filter(item => item.id !== parseInt(req.params.productId));\n@@ -61,70 +61,5 @@\n   } else {\n     res.status(404).json({ message: 'Cart not found' });\n   }\n });\n-module.exports = router\n-const express = require('express');\n-const cors = require('cors');\n-const fs = require('fs');\n-const path = require('path');\n-const bodyParser = require('body-parser');\n-const jwt = require('jsonwebtoken');\n-\n-const app = express();\n-const PORT = 5000;\n-const dbFilePath = path.join(__dirname, 'db.json');\n-const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n-\n-app.use(cors());\n-app.use(bodyParser.json());\n-app.use(bodyParser.urlencoded({ extended: true }));\n-\n-// Middleware to authenticate token\n-const authenticateToken = (req, res, next) => {\n-  const token = req.headers['authorization'];\n-  if (!token) return res.sendStatus(401);\n-\n-  jwt.verify(token.split(' ')[1], SECRET_KEY, (err, user) => {\n-    if (err) return res.sendStatus(403);\n-    req.user = user;\n-    next();\n-  });\n-};\n-\n-// Get user cart\n-app.get('/cart', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n-  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n-  if (userCart) {\n-    res.json(userCart);\n-  } else {\n-    res.status(404).json({ message: 'Cart not found' });\n-  }\n-});\n-\n-// Place order\n-app.post('/orders', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n-  const newOrder = {\n-    id: db.orders.length + 1,\n-    userId: req.user.id,\n-    ...req.body.orderData,\n-  };\n-  db.orders.push(newOrder);\n-  fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n-  res.status(201).json(newOrder);\n-});\n-\n-// Clear cart\n-app.delete('/cart/:productId', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n-  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n-  if (userCart) {\n-    userCart.items = userCart.items.filter(item => item.id !== parseInt(req.params.productId));\n-    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n-    res.json(userCart);\n-  } else {\n-    res.status(404).json({ message: 'Cart not found' });\n-  }\n-});\n-module.export\n\\ No newline at end of file\n+module.exports = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742212944965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n   res.status(201).json(newOrder);\n });\n \n // Clear cart\n-a.delete('/cart/:productId', authenticateToken, (req, res) => {\n+router.delete('/cart/:productId', authenticateToken, (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const userCart = db.carts.find(cart => cart.userId === req.user.id);\n   if (userCart) {\n     userCart.items = userCart.items.filter(item => item.id !== parseInt(req.params.productId));\n"
                },
                {
                    "date": 1742212951153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n   }\n });\n \n // Place order\n-app.post('/orders', authenticateToken, (req, res) => {\n+router.post('/orders', authenticateToken, (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const newOrder = {\n     id: db.orders.length + 1,\n     userId: req.user.id,\n"
                },
                {
                    "date": 1742212963843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   });\n };\n \n // Get user cart\n-app.get('/cart', authenticateToken, (req, res) => {\n+cart.get('/cart', authenticateToken, (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const userCart = db.carts.find(cart => cart.userId === req.user.id);\n   if (userCart) {\n     res.json(userCart);\n"
                },
                {
                    "date": 1742212975360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   });\n };\n \n // Get user cart\n-cart.get('/cart', authenticateToken, (req, res) => {\n+router.get('/cart', authenticateToken, (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const userCart = db.carts.find(cart => cart.userId === req.user.id);\n   if (userCart) {\n     res.json(userCart);\n"
                },
                {
                    "date": 1742212986020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const app = express();\n const PORT = 5000;\n const dbFilePath = path.join(__dirname, 'db.json');\n const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n-\n+se\n app.use(cors());\n app.use(bodyParser.json());\n app.use(bodyParser.urlencoded({ extended: true }));\n \n"
                },
                {
                    "date": 1742212995525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const app = express();\n const PORT = 5000;\n const dbFilePath = path.join(__dirname, 'db.json');\n const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n-se\n+const\n app.use(cors());\n app.use(bodyParser.json());\n app.use(bodyParser.urlencoded({ extended: true }));\n \n"
                },
                {
                    "date": 1742213043528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,11 @@\n const jwt = require('jsonwebtoken');\n \n const app = express();\n const PORT = 5000;\n-const dbFilePath = path.join(__dirname, 'db.json');\n+const dbFilePath = path.join(__dirname, \"../jsonFiles/db.json);\n const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n-const\n+const router = express.Router();\n app.use(cors());\n app.use(bodyParser.json());\n app.use(bodyParser.urlencoded({ extended: true }));\n \n"
                },
                {
                    "date": 1742213054063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const jwt = require('jsonwebtoken');\n \n const app = express();\n const PORT = 5000;\n-const dbFilePath = path.join(__dirname, \"../jsonFiles/db.json);\n+const dbFilePath = path.join(__dirname, \"../jsonFiles/orders.json)\";\n const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n const router = express.Router();\n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742213060827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const jwt = require('jsonwebtoken');\n \n const app = express();\n const PORT = 5000;\n-const dbFilePath = path.join(__dirname, \"../jsonFiles/orders.json)\";\n+const dbFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n const router = express.Router();\n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742213318109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,65 +1,125 @@\n-const express = require('express');\n-const cors = require('cors');\n-const fs = require('fs');\n-const path = require('path');\n-const bodyParser = require('body-parser');\n-const jwt = require('jsonwebtoken');\n+const express = require(\"express\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const bodyParser = require(\"body-parser\");\n+const cors = require(\"cors\");\n \n+// Initialize Express app\n const app = express();\n const PORT = 5000;\n-const dbFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n-const SECRET_KEY = 'your_secret_key'; // Replace with your actual secret key\n-const router = express.Router();\n+\n+// Middleware\n app.use(cors());\n app.use(bodyParser.json());\n-app.use(bodyParser.urlencoded({ extended: true }));\n \n-// Middleware to authenticate token\n-const authenticateToken = (req, res, next) => {\n-  const token = req.headers['authorization'];\n-  if (!token) return res.sendStatus(401);\n+// Path to the orders.json file\n+const ordersFilePath = path.join(__dirname, \"orders.json\");\n \n-  jwt.verify(token.split(' ')[1], SECRET_KEY, (err, user) => {\n-    if (err) return res.sendStatus(403);\n-    req.user = user;\n-    next();\n-  });\n+// Helper function to read orders from the file\n+const readOrders = () => {\n+  if (!fs.existsSync(ordersFilePath)) {\n+    fs.writeFileSync(ordersFilePath, \"[]\"); // Create an empty array if the file doesn't exist\n+  }\n+  const data = fs.readFileSync(ordersFilePath, \"utf-8\");\n+  return JSON.parse(data);\n };\n \n-// Get user cart\n-router.get('/cart', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n-  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n-  if (userCart) {\n-    res.json(userCart);\n-  } else {\n-    res.status(404).json({ message: 'Cart not found' });\n+// Helper function to write orders to the file\n+const writeOrders = (orders) => {\n+  fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n+};\n+\n+// Checkout route\n+app.post(\"/api/checkout\", (req, res) => {\n+  const { user, totalAmount, cart, shipping } = req.body;\n+\n+  try {\n+    // Read existing orders\n+    const orders = readOrders();\n\\ No newline at end of file\n+\n+    // Create a new order\n+    const newOrder = {\n+      id: Date.now().toString(), // Generate a unique ID\n+      user,\n+      totalAmount,\n+      cart,\n+      shipping,\n+      date: new Date().toISOString(), // Add the current date and time\n+    };\n+\n+    // Add the new order to the list\n+    orders.push(newOrder);\n+\n+    // Save the updated orders list to the file\n+    writeOrders(orders);\n+\n+    // Respond with success message and the new order\n+    res.status(201).json({ message: \"Order placed successfully!\", order: newOrder });\n+  } catch (error) {\n+    console.error(\"Error during checkout:\", error);\n+    res.status(500).json({ message: \"Checkout failed. Please try again.\" });\n   }\n });\n \n-// Place order\n-router.post('/orders', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n-  const newOrder = {\n-    id: db.orders.length + 1,\n-    userId: req.user.id,\n-    ...req.body.orderData,\n-  };\n-  db.orders.push(newOrder);\n-  fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n-  res.status(201).json(newOrder);\n+// Get all orders route\n+app.get(\"/api/orders\", (req, res) => {\n+  try {\n+    const orders = readOrders();\n+    res.status(200).json(orders);\n+  } catch (error) {\n+    console.error(\"Error fetching orders:\", error);\n+    res.status(500).json({ message: \"Failed to fetch orders.\" });\n+  }\n });\n \n-// Clear cart\n-router.delete('/cart/:productId', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n-  const userCart = db.carts.find(cart => cart.userId === req.user.id);\n-  if (userCart) {\n-    userCart.items = userCart.items.filter(item => item.id !== parseInt(req.params.productId));\n-    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n-    res.json(userCart);\n-  } else {\n-    res.status(404).json({ message: 'Cart not found' });\n+// Get order by ID route\n+app.get(\"/api/orders/:id\", (req, res) => {\n+  const { id } = req.params;\n+\n+  try {\n+    const orders = readOrders();\n+    const order = orders.find((order) => order.id === id);\n+\n+    if (!order) {\n+      return res.status(404).json({ message: \"Order not found.\" });\n+    }\n+\n+    res.status(200).json(order);\n+  } catch (error) {\n+    console.error(\"Error fetching order:\", error);\n+    res.status(500).json({ message: \"Failed to fetch order.\" });\n   }\n });\n-module.exports = router\n+\n+// Delete order route\n+app.delete(\"/api/orders/:id\", (req, res) => {\n+  const { id } = req.params;\n+\n+  try {\n+    // Read existing orders\n+    let orders = readOrders();\n+\n+    // Find the index of the order to delete\n+    const orderIndex = orders.findIndex((order) => order.id === id);\n+\n+    if (orderIndex === -1) {\n+      return res.status(404).json({ message: \"Order not found.\" });\n+    }\n+\n+    // Remove the order from the list\n+    orders.splice(orderIndex, 1);\n+\n+    // Save the updated orders list to the file\n+    writeOrders(orders);\n+\n+    res.status(200).json({ message: \"Order deleted successfully!\" });\n+  } catch (error) {\n+    console.error(\"Error deleting order:\", error);\n+    res.status(500).json({ message: \"Failed to delete order.\" });\n+  }\n+});\n+\n+// Start the server\n+app.listen(PORT, () => {\n+  console.log(Server is running on http://localhost:${PORT});\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742213326048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,5 @@\n     res.status(500).json({ message: \"Failed to delete order.\" });\n   }\n });\n \n-// Start the server\n-app.listen(PORT, () => {\n-  console.log(Server is running on http://localhost:${PORT});\n-})\n\\ No newline at end of file\n+module\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742213334625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,5 +118,5 @@\n     res.status(500).json({ message: \"Failed to delete order.\" });\n   }\n });\n \n-module.exports = router\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740560248830,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst router= express.Router();\nconst ordersPath = path.join(__dirname, \"../orders.json\");\n\n\n\n// get orders\nrouter.get(\"/orders/\", (req, res) => {\n  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    const jsonData = JSON.parse(data);\n    res.json(jsonData.orders);\n  });\n});\n\n// Add a oreders to ordersz.json\nrouter.post(\"/addTOorders/\", (req, res) => {\n  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    const jsonData = JSON.parse(data);\n    const order = { id: jsonData.products.length + 1, ...req.body };\n    jsonData.products.push(order);\n\n    fs.writeFile(ordersPath, JSON.stringify(jsonData, null, 2), (err) => {\n      if (err) return res.status(500).json({ error: \"Error saving data\" });\n      res.status(201).json(order);\n    });\n  });\n});\n\n// Utility: Read products data from file\nconst readProductsOrders = () => {\n  const rawData = fs.readFileSync(ordersPath);\n  const data = JSON.parse(rawData);\n  return data.products;\n};\n\n// Utility: Write updated products back to file\nconst writeProductsOrders = (products) => {\n  const data = { products };\n  fs.writeFileSync(ordersPath, JSON.stringify(data, null, 2));\n};\n// Endpoint to get a single product by id\nrouter.get(\"/orders/:id\", (req, res) => {\n  try {\n    const orders = readProductsOrders();\n    const id = parseInt(req.params.id, 10);\n    const product = orders.find((p) => p.id === id);\n    if (!product) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n    res.json(product);\n  } catch (err) {\n    res.status(500).json({ error: \"Failed to read products data\" });\n  }\n});\n\n// PATCH endpoint to update a product partially\nrouter.patch(\"/updateOrders/:id\", (req, res) => {\n  try {\n    const products = readProductsOrders();\n    const id = parseInt(req.params.id, 10);\n    const index = products.findIndex((p) => p.id === id);\n\n    if (index === -1) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n\n    // Merge the existing product with the fields sent in the request body\n    const updatedProduct = { ...products[index], ...req.body };\n    products[index] = updatedProduct;\n\n    // Write the updated products back to the file\n    writeProductsOrders(products);\n\n    res.json(updatedProduct);\n  } catch (err) {\n    console.error(\"Error patching product:\", err);\n    res.status(500).json({ error: \"Failed to update product\" });\n  }\n});\n\n//  *API to Delete an orders by ID*\nrouter.delete(\"/ordersRemoveItem/:id\", (req, res) => {\n  fs.readFile(ordersPath, \"utf8\", (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    let db = JSON.parse(data);\n    const itemId = parseInt(req.params.id);\n\n    // Find the item index\n    const itemIndex = db.cart.findIndex((item) => item.id === itemId);\n    if (itemIndex === -1)\n      return res.status(404).json({ message: \"Item not found\" });\n\n    // Remove the item\n    db.orders.splice(itemIndex, 1);\n\n    // Save updated data to db.json\n    fs.writeFile(ordersPath, JSON.stringify(db, null, 2), (err) => {\n      if (err) return res.status(500).json({ error: \"Error saving database\" });\n\n      res.json({ message: \"oreder  deleted successfully\" });\n    });\n  });\n});\n\n\n\nmodule.exports = router;\n"
        }
    ]
}