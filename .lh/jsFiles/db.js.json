{
    "sourceFile": "jsFiles/db.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1740559957211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740559964882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+const express = require(\"express\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const router= express.Router();\n+const dbPath = path.join(__dirname, \"./jsonFilesdb.json\");\n+\n+\n+// Read db.json\n+router.get(\"/products\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      const jsonData = JSON.parse(data);\n+      res.json(jsonData.products);\n+    });\n+  });\n+  \n+  // Add a new Product to db.json\n+  router.post(\"/newProducts/\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      const jsonData = JSON.parse(data);\n+      const product = { id: jsonData.products.length + 1, ...req.body };\n+      jsonData.products.push(product);\n+  \n+      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n+        if (err) return res.status(500).json({ error: \"Error saving data\" });\n+        res.status(201).json(product);\n+      });\n+    });\n+  });\n+  \n+  // Utility: Read products data from file\n+  const readProducts = () => {\n+    const rawData = fs.readFileSync(dbPath);\n+    const data = JSON.parse(rawData);\n+    return data.products;\n+  };\n+  \n+  // Utility: Write updated products back to file\n+  const writeProducts = (products) => {\n+    const data = { products };\n+    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n+  };\n+  // Endpoint to get a single product by id\n+  router.get(\"/products/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const product = products.find((p) => p.id === id);\n+      if (!product) {\n+        return res.status(404).json({ error: \"Product not found\" });\n+      }\n+      res.json(product);\n+    } catch (err) {\n+      res.status(500).json({ error: \"Failed to read products data\" });\n+    }\n+  });\n+  \n+  // PATCH endpoint to update a product partially\n+  router.patch(\"/updateProducts/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const index = products.findIndex((p) => p.id === id);\n+  \n+      if (index === -1) {\n+        return res.status(404).json({ error: \"Product not found\" });\n+      }\n+  \n+      // Merge the existing product with the fields sent in the request body\n+      const updatedProduct = { ...products[index], ...req.body };\n+      products[index] = updatedProduct;\n+  \n+      // Write the updated products back to the file\n+      writeProducts(products);\n+  \n+      res.json(updatedProduct);\n+    } catch (err) {\n+      console.error(\"Error patching product:\", err);\n+      res.status(500).json({ error: \"Failed to update product\" });\n+    }\n+  });\n+  \n+  // *API to Delete an products by ID*\n+  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      let db = JSON.parse(data);\n+      const itemId = parseInt(req.params.id);\n+  \n+      // Find the item index\n+      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n+      if (itemIndex === -1)\n+        return res.status(404).json({ message: \"Item not found\" });\n+  \n+      // Remove the item\n+      db.products.splice(itemIndex, 1);\n+  \n+      // Save updated data to db.json\n+      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n+        if (err) return res.status(500).json({ error: \"Error saving database\" });\n+  \n+        res.json({ message: \"product deleted successfully\" });\n+      });\n+    });\n+  });\n+\n+  module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740559984894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n-const dbPath = path.join(__dirname, \"./jsonFilesdb.json\");\n+const dbPath = path.join(__dirname, \"../jsonFiles/db.json\");\n \n \n // Read db.json\n router.get(\"/products\", (req, res) => {\n@@ -107,116 +107,5 @@\n       });\n     });\n   });\n \n-  module.exports = router;\n-const express = require(\"express\");\n-const fs = require(\"fs\");\n-const path = require(\"path\");\n-const router= express.Router();\n-const dbPath = path.join(__dirname, \"./db.json\");\n-\n-\n-// Read db.json\n-router.get(\"/products\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      res.json(jsonData.products);\n-    });\n-  });\n-  \n-  // Add a new Product to db.json\n-  router.post(\"/newProducts/\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      const product = { id: jsonData.products.length + 1, ...req.body };\n-      jsonData.products.push(product);\n-  \n-      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving data\" });\n-        res.status(201).json(product);\n-      });\n-    });\n-  });\n-  \n-  // Utility: Read products data from file\n-  const readProducts = () => {\n-    const rawData = fs.readFileSync(dbPath);\n-    const data = JSON.parse(rawData);\n-    return data.products;\n-  };\n-  \n-  // Utility: Write updated products back to file\n-  const writeProducts = (products) => {\n-    const data = { products };\n-    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n-  };\n-  // Endpoint to get a single product by id\n-  router.get(\"/products/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const product = products.find((p) => p.id === id);\n-      if (!product) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-      res.json(product);\n-    } catch (err) {\n-      res.status(500).json({ error: \"Failed to read products data\" });\n-    }\n-  });\n-  \n-  // PATCH endpoint to update a product partially\n-  router.patch(\"/updateProducts/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const index = products.findIndex((p) => p.id === id);\n-  \n-      if (index === -1) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-  \n-      // Merge the existing product with the fields sent in the request body\n-      const updatedProduct = { ...products[index], ...req.body };\n-      products[index] = updatedProduct;\n-  \n-      // Write the updated products back to the file\n-      writeProducts(products);\n-  \n-      res.json(updatedProduct);\n-    } catch (err) {\n-      console.error(\"Error patching product:\", err);\n-      res.status(500).json({ error: \"Failed to update product\" });\n-    }\n-  });\n-  \n-  // *API to Delete an products by ID*\n-  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      let db = JSON.parse(data);\n-      const itemId = parseInt(req.params.id);\n-  \n-      // Find the item index\n-      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n-      if (itemIndex === -1)\n-        return res.status(404).json({ message: \"Item not found\" });\n-  \n-      // Remove the item\n-      db.products.splice(itemIndex, 1);\n-  \n-      // Save updated data to db.json\n-      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving database\" });\n-  \n-        res.json({ message: \"product deleted successfully\" });\n-      });\n-    });\n-  });\n-\n   module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741853667128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,99 +13,6 @@\n       const jsonData = JSON.parse(data);\n       res.json(jsonData.products);\n     });\n   });\n-  \n-  // Add a new Product to db.json\n-  router.post(\"/newProducts/\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      const product = { id: jsonData.products.length + 1, ...req.body };\n-      jsonData.products.push(product);\n-  \n-      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving data\" });\n-        res.status(201).json(product);\n-      });\n-    });\n-  });\n-  \n-  // Utility: Read products data from file\n-  const readProducts = () => {\n-    const rawData = fs.readFileSync(dbPath);\n-    const data = JSON.parse(rawData);\n-    return data.products;\n-  };\n-  \n-  // Utility: Write updated products back to file\n-  const writeProducts = (products) => {\n-    const data = { products };\n-    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n-  };\n-  // Endpoint to get a single product by id\n-  router.get(\"/products/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const product = products.find((p) => p.id === id);\n-      if (!product) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-      res.json(product);\n-    } catch (err) {\n-      res.status(500).json({ error: \"Failed to read products data\" });\n-    }\n-  });\n-  \n-  // PATCH endpoint to update a product partially\n-  router.patch(\"/updateProducts/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const index = products.findIndex((p) => p.id === id);\n-  \n-      if (index === -1) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-  \n-      // Merge the existing product with the fields sent in the request body\n-      const updatedProduct = { ...products[index], ...req.body };\n-      products[index] = updatedProduct;\n-  \n-      // Write the updated products back to the file\n-      writeProducts(products);\n-  \n-      res.json(updatedProduct);\n-    } catch (err) {\n-      console.error(\"Error patching product:\", err);\n-      res.status(500).json({ error: \"Failed to update product\" });\n-    }\n-  });\n-  \n-  // *API to Delete an products by ID*\n-  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      let db = JSON.parse(data);\n-      const itemId = parseInt(req.params.id);\n-  \n-      // Find the item index\n-      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n-      if (itemIndex === -1)\n-        return res.status(404).json({ message: \"Item not found\" });\n-  \n-      // Remove the item\n-      db.products.splice(itemIndex, 1);\n-  \n-      // Save updated data to db.json\n-      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving database\" });\n-  \n-        res.json({ message: \"product deleted successfully\" });\n-      });\n-    });\n-  });\n \n   module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741853675821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,5 +14,28 @@\n       res.json(jsonData.products);\n     });\n   });\n \n+  // Get a single product by ID\n+app.get('/products/:id', (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const product = db.products.find(p => p.id === parseInt(req.params.id));\n+  if (product) {\n+    res.json(product);\n+  } else {\n+    res.status(404).json({ message: 'Product not found' });\n+  }\n+});\n+\n+// Update a product by ID\n+app.put('/products/:id', (req, res) => {\n+  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n+  if (productIndex !== -1) {\n+    db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n+    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+    res.json(db.products[productIndex]);\n+  } else {\n+    res.status(404).json({ message: 'Product not found' });\n+  }\n+});\n   module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741853689738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     });\n   });\n \n   // Get a single product by ID\n-app.get('/products/:id', (req, res) => {\n+router.get('/products/:id', (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const product = db.products.find(p => p.id === parseInt(req.params.id));\n   if (product) {\n     res.json(product);\n"
                },
                {
                    "date": 1741853695141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   }\n });\n \n // Update a product by ID\n-app.put('/products/:id', (req, res) => {\n+router.put('/products/:id', (req, res) => {\n   const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n   const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n   if (productIndex !== -1) {\n     db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n"
                },
                {
                    "date": 1741853713760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   });\n \n   // Get a single product by ID\n router.get('/products/:id', (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n   const product = db.products.find(p => p.id === parseInt(req.params.id));\n   if (product) {\n     res.json(product);\n   } else {\n@@ -27,13 +27,13 @@\n });\n \n // Update a product by ID\n router.put('/products/:id', (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+  const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n   const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n   if (productIndex !== -1) {\n     db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n-    fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+    fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n     res.json(db.products[productIndex]);\n   } else {\n     res.status(404).json({ message: 'Product not found' });\n   }\n"
                },
                {
                    "date": 1741854962162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,29 +13,99 @@\n       const jsonData = JSON.parse(data);\n       res.json(jsonData.products);\n     });\n   });\n+  \n+  // Add a new Product to db.json\n+  router.post(\"/newProducts/\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      const jsonData = JSON.parse(data);\n+      const product = { id: jsonData.products.length + 1, ...req.body };\n+      jsonData.products.push(product);\n+  \n+      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n+        if (err) return res.status(500).json({ error: \"Error saving data\" });\n+        res.status(201).json(product);\n+      });\n+    });\n+  });\n+  \n+  // Utility: Read products data from file\n+  const readProducts = () => {\n+    const rawData = fs.readFileSync(dbPath);\n+    const data = JSON.parse(rawData);\n+    return data.products;\n+  };\n+  \n+  // Utility: Write updated products back to file\n+  const writeProducts = (products) => {\n+    const data = { products };\n+    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n+  };\n+  // Endpoint to get a single product by id\n+  router.get(\"/products/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const product = products.find((p) => p.id === id);\n+      if (!product) {\n+        return res.status(404).json({ error: \"Product not found\" });\n+      }\n+      res.json(product);\n+    } catch (err) {\n+      res.status(500).json({ error: \"Failed to read products data\" });\n+    }\n+  });\n+  \n+  // PATCH endpoint to update a product partially\n+  router.patch(\"/updateProducts/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const index = products.findIndex((p) => p.id === id);\n+  \n+      if (index === -1) {\n+        return res.status(404).json({ error: \"Product not found\" });\n+      }\n+  \n+      // Merge the existing product with the fields sent in the request body\n+      const updatedProduct = { ...products[index], ...req.body };\n+      products[index] = updatedProduct;\n+  \n+      // Write the updated products back to the file\n+      writeProducts(products);\n+  \n+      res.json(updatedProduct);\n+    } catch (err) {\n+      console.error(\"Error patching product:\", err);\n+      res.status(500).json({ error: \"Failed to update product\" });\n+    }\n+  });\n+  \n+  // *API to Delete an products by ID*\n+  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      let db = JSON.parse(data);\n+      const itemId = parseInt(req.params.id);\n+  \n+      // Find the item index\n+      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n+      if (itemIndex === -1)\n+        return res.status(404).json({ message: \"Item not found\" });\n+  \n+      // Remove the item\n+      db.products.splice(itemIndex, 1);\n+  \n+      // Save updated data to db.json\n+      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n+        if (err) return res.status(500).json({ error: \"Error saving database\" });\n+  \n+        res.json({ message: \"product deleted successfully\" });\n+      });\n+    });\n+  });\n \n-  // Get a single product by ID\n-router.get('/products/:id', (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n-  const product = db.products.find(p => p.id === parseInt(req.params.id));\n-  if (product) {\n-    res.json(product);\n-  } else {\n-    res.status(404).json({ message: 'Product not found' });\n-  }\n-});\n-\n-// Update a product by ID\n-router.put('/products/:id', (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n-  const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n-  if (productIndex !== -1) {\n-    db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n-    fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n-    res.json(db.products[productIndex]);\n-  } else {\n-    res.status(404).json({ message: 'Product not found' });\n-  }\n-});\n   module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741854989236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     }\n   });\n   \n   // PATCH endpoint to update a product partially\n-  router.patch(\"/updateProducts/:id\", (req, res) => {\n+  router.patch(\"/Products/:id\", (req, res) => {\n     try {\n       const products = readProducts();\n       const id = parseInt(req.params.id, 10);\n       const index = products.findIndex((p) => p.id === id);\n"
                },
                {
                    "date": 1741855329232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,60 +30,10 @@\n       });\n     });\n   });\n   \n-  // Utility: Read products data from file\n-  const readProducts = () => {\n-    const rawData = fs.readFileSync(dbPath);\n-    const data = JSON.parse(rawData);\n-    return data.products;\n-  };\n+\n   \n-  // Utility: Write updated products back to file\n-  const writeProducts = (products) => {\n-    const data = { products };\n-    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n-  };\n-  // Endpoint to get a single product by id\n-  router.get(\"/products/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const product = products.find((p) => p.id === id);\n-      if (!product) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-      res.json(product);\n-    } catch (err) {\n-      res.status(500).json({ error: \"Failed to read products data\" });\n-    }\n-  });\n-  \n-  // PATCH endpoint to update a product partially\n-  router.patch(\"/Products/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const index = products.findIndex((p) => p.id === id);\n-  \n-      if (index === -1) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-  \n-      // Merge the existing product with the fields sent in the request body\n-      const updatedProduct = { ...products[index], ...req.body };\n-      products[index] = updatedProduct;\n-  \n-      // Write the updated products back to the file\n-      writeProducts(products);\n-  \n-      res.json(updatedProduct);\n-    } catch (err) {\n-      console.error(\"Error patching product:\", err);\n-      res.status(500).json({ error: \"Failed to update product\" });\n-    }\n-  });\n-  \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741855342482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,32 @@\n       });\n     });\n   });\n   \n-\n+  // Get a single product by ID\n+  router.get('/products/:id', (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n+    const product = db.products.find(p => p.id === parseInt(req.params.id));\n+    if (product) {\n+      res.json(product);\n+    } else {\n+      res.status(404).json({ message: 'Product not found' });\n+    }\n+  });\n   \n+  // Update a product by ID\n+  router.put('/products/:id', (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n+    const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n+    if (productIndex !== -1) {\n+      db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n+      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+      res.json(db.products[productIndex]);\n+    } else {\n+      res.status(404).json({ message: 'Product not found' });\n+    }\n+  });\n+  \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741855568664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     }\n   });\n   \n   // Update a product by ID\n-  router.put('/products/:id', (req, res) => {\n+  router.put('/updateproducts/:id', (req, res) => {\n     const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n     const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n     if (productIndex !== -1) {\n       db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n"
                },
                {
                    "date": 1741856060298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,22 +40,9 @@\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n-  \n-  // Update a product by ID\n-  router.put('/updateproducts/:id', (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n-    const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n-    if (productIndex !== -1) {\n-      db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n-      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n-      res.json(db.products[productIndex]);\n-    } else {\n-      res.status(404).json({ message: 'Product not found' });\n-    }\n-  });\n-  \n+ \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856068364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,54 @@\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n- \n+ // ...existing code...\n+\n+// Route to handle product update by ID\n+router.put(\"/update/:id\", upload.array(\"images\", 11), (req, res) => {\n+  const productId = parseInt(req.params.id);\n+  const updatedData = req.body;\n+  const files = req.files;\n+\n+  // Read the existing products from db.json\n+  const dbPath = path.join(__dirname, \"../jsonFiles/db.json\");\n+  let db = { products: [] };\n+\n+  if (fs.existsSync(dbPath)) {\n+    db = JSON.parse(fs.readFileSync(dbPath, \"utf-8\"));\n+  }\n+\n+  // Find the product by ID\n+  const productIndex = db.products.findIndex((product) => product.id === productId);\n+\n+  if (productIndex === -1) {\n+    return res.status(404).json({ message: \"Product not found\" });\n+  }\n+\n+  // Update the product details\n+  const updatedProduct = {\n+    ...db.products[productIndex],\n+    ...updatedData,\n+    price: parseFloat(updatedData.price),\n+    quantity: parseInt(updatedData.quantity),\n+    numberInStock: parseInt(updatedData.numberInStock),\n+    discount: parseFloat(updatedData.discount),\n+    likes: parseInt(updatedData.likes),\n+    brand: JSON.parse(updatedData.brand),\n+    location: JSON.parse(updatedData.location),\n+    images: files.length > 0 ? files.map((file) => `/images/${file.filename}`) : db.products[productIndex].images,\n+  };\n+\n+  db.products[productIndex] = updatedProduct;\n+\n+  // Save the updated products back to db.json\n+  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+\n+  res.json({ message: \"Product updated successfully!\", product: updatedProduct });\n+});\n+\n+\n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856095606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n- // ...existing code...\n+ \n \n // Route to handle product update by ID\n router.put(\"/update/:id\", upload.array(\"images\", 11), (req, res) => {\n   const productId = parseInt(req.params.id);\n"
                },
                {
                    "date": 1741856172906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,53 +41,8 @@\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n  \n-\n-// Route to handle product update by ID\n-router.put(\"/update/:id\", upload.array(\"images\", 11), (req, res) => {\n-  const productId = parseInt(req.params.id);\n-  const updatedData = req.body;\n-  const files = req.files;\n-\n-  // Read the existing products from db.json\n-  const dbPath = path.join(__dirname, \"../jsonFiles/db.json\");\n-  let db = { products: [] };\n-\n-  if (fs.existsSync(dbPath)) {\n-    db = JSON.parse(fs.readFileSync(dbPath, \"utf-8\"));\n-  }\n-\n-  // Find the product by ID\n-  const productIndex = db.products.findIndex((product) => product.id === productId);\n-\n-  if (productIndex === -1) {\n-    return res.status(404).json({ message: \"Product not found\" });\n-  }\n-\n-  // Update the product details\n-  const updatedProduct = {\n-    ...db.products[productIndex],\n-    ...updatedData,\n-    price: parseFloat(updatedData.price),\n-    quantity: parseInt(updatedData.quantity),\n-    numberInStock: parseInt(updatedData.numberInStock),\n-    discount: parseFloat(updatedData.discount),\n-    likes: parseInt(updatedData.likes),\n-    brand: JSON.parse(updatedData.brand),\n-    location: JSON.parse(updatedData.location),\n-    images: files.length > 0 ? files.map((file) => `/images/${file.filename}`) : db.products[productIndex].images,\n-  };\n-\n-  db.products[productIndex] = updatedProduct;\n-\n-  // Save the updated products back to db.json\n-  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n-\n-  res.json({ message: \"Product updated successfully!\", product: updatedProduct });\n-});\n-\n-\n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856179439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,54 @@\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n- \n+ // ...existing code...\n+\n+// Route to handle product update by ID\n+router.put(\"/update/:id\", upload.array(\"images\", 11), (req, res) => {\n+  const productId = parseInt(req.params.id);\n+  const updatedData = req.body;\n+  const files = req.files;\n+\n+  // Read the existing products from db.json\n+  const dbPath = path.join(__dirname, \"../jsonFiles/db.json\");\n+  let db = { products: [] };\n+\n+  if (fs.existsSync(dbPath)) {\n+    db = JSON.parse(fs.readFileSync(dbPath, \"utf-8\"));\n+  }\n+\n+  // Find the product by ID\n+  const productIndex = db.products.findIndex((product) => product.id === productId);\n+\n+  if (productIndex === -1) {\n+    return res.status(404).json({ message: \"Product not found\" });\n+  }\n+\n+  // Update the product details\n+  const updatedProduct = {\n+    ...db.products[productIndex],\n+    ...updatedData,\n+    price: parseFloat(updatedData.price),\n+    quantity: parseInt(updatedData.quantity),\n+    numberInStock: parseInt(updatedData.numberInStock),\n+    discount: parseFloat(updatedData.discount),\n+    likes: parseInt(updatedData.likes),\n+    brand: JSON.parse(updatedData.brand),\n+    location: JSON.parse(updatedData.location),\n+    images: files.length > 0 ? files.map((file) => `/images/${file.filename}`) : db.products[productIndex].images,\n+  };\n+\n+  db.products[productIndex] = updatedProduct;\n+\n+  // Save the updated products back to db.json\n+  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+\n+  res.json({ message: \"Product updated successfully!\", product: updatedProduct });\n+});\n+\n+// ...existing code...\n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856319465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,54 +40,22 @@\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n- // ...existing code...\n-\n-// Route to handle product update by ID\n-router.put(\"/update/:id\", upload.array(\"images\", 11), (req, res) => {\n-  const productId = parseInt(req.params.id);\n-  const updatedData = req.body;\n-  const files = req.files;\n-\n-  // Read the existing products from db.json\n-  const dbPath = path.join(__dirname, \"../jsonFiles/db.json\");\n-  let db = { products: [] };\n-\n-  if (fs.existsSync(dbPath)) {\n-    db = JSON.parse(fs.readFileSync(dbPath, \"utf-8\"));\n-  }\n-\n-  // Find the product by ID\n-  const productIndex = db.products.findIndex((product) => product.id === productId);\n-\n-  if (productIndex === -1) {\n-    return res.status(404).json({ message: \"Product not found\" });\n-  }\n-\n-  // Update the product details\n-  const updatedProduct = {\n-    ...db.products[productIndex],\n-    ...updatedData,\n-    price: parseFloat(updatedData.price),\n-    quantity: parseInt(updatedData.quantity),\n-    numberInStock: parseInt(updatedData.numberInStock),\n-    discount: parseFloat(updatedData.discount),\n-    likes: parseInt(updatedData.likes),\n-    brand: JSON.parse(updatedData.brand),\n-    location: JSON.parse(updatedData.location),\n-    images: files.length > 0 ? files.map((file) => `/images/${file.filename}`) : db.products[productIndex].images,\n-  };\n-\n-  db.products[productIndex] = updatedProduct;\n-\n-  // Save the updated products back to db.json\n-  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n-\n-  res.json({ message: \"Product updated successfully!\", product: updatedProduct });\n-});\n-\n-// ...existing code...\n+  \n+  // Update a product by ID\n+  router.put('/updateproducts/:id', (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n+    const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n+    if (productIndex !== -1) {\n+      db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n+      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+      res.json(db.products[productIndex]);\n+    } else {\n+      res.status(404).json({ message: 'Product not found' });\n+    }\n+  });\n+  \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856624137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,21 +41,27 @@\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n   \n-  // Update a product by ID\n-  router.put('/updateproducts/:id', (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n+  / Update a product by ID\n+  app.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n     const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n     if (productIndex !== -1) {\n-      db.products[productIndex] = { ...db.products[productIndex], ...req.body };\n-      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n-      res.json(db.products[productIndex]);\n+      const updatedProduct = { ...db.products[productIndex], ...JSON.parse(req.body.product) };\n+  \n+      // Handle image uploads\n+      if (req.files && req.files.length > 0) {\n+        updatedProduct.images = req.files.map(file => `data:${file.mimetype};base64,${file.buffer.toString('base64')}`);\n+      }\n+  \n+      db.products[productIndex] = updatedProduct;\n+      fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+      res.json(updatedProduct);\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n-  \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856636025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n   \n-  / Update a product by ID\n+  // Update a product by ID\n   app.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n     const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n     const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n     if (productIndex !== -1) {\n@@ -60,8 +60,9 @@\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n   });\n+\n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856647900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   });\n   \n   // Update a product by ID\n   app.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n     const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n     if (productIndex !== -1) {\n       const updatedProduct = { ...db.products[productIndex], ...JSON.parse(req.body.product) };\n   \n@@ -54,9 +54,9 @@\n         updatedProduct.images = req.files.map(file => `data:${file.mimetype};base64,${file.buffer.toString('base64')}`);\n       }\n   \n       db.products[productIndex] = updatedProduct;\n-      fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n       res.json(updatedProduct);\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n"
                },
                {
                    "date": 1741856656892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   });\n   \n   // Update a product by ID\n   app.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n+    const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n     const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n     if (productIndex !== -1) {\n       const updatedProduct = { ...db.products[productIndex], ...JSON.parse(req.body.product) };\n   \n@@ -54,9 +54,9 @@\n         updatedProduct.images = req.files.map(file => `data:${file.mimetype};base64,${file.buffer.toString('base64')}`);\n       }\n   \n       db.products[productIndex] = updatedProduct;\n-      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+      fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n       res.json(updatedProduct);\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n"
                },
                {
                    "date": 1741856683285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   });\n   \n   // Update a product by ID\n   app.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(dbFilePath, 'utf-8'));\n+    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n     const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n     if (productIndex !== -1) {\n       const updatedProduct = { ...db.products[productIndex], ...JSON.parse(req.body.product) };\n   \n@@ -54,9 +54,9 @@\n         updatedProduct.images = req.files.map(file => `data:${file.mimetype};base64,${file.buffer.toString('base64')}`);\n       }\n   \n       db.products[productIndex] = updatedProduct;\n-      fs.writeFileSync(dbFilePath, JSON.stringify(db, null, 2));\n+      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n       res.json(updatedProduct);\n     } else {\n       res.status(404).json({ message: 'Product not found' });\n     }\n"
                },
                {
                    "date": 1741856694203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     }\n   });\n   \n   // Update a product by ID\n-  app.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n+  router.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n     const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n     const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n     if (productIndex !== -1) {\n       const updatedProduct = { ...db.products[productIndex], ...JSON.parse(req.body.product) };\n"
                },
                {
                    "date": 1741856752352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,39 +30,60 @@\n       });\n     });\n   });\n   \n-  // Get a single product by ID\n-  router.get('/products/:id', (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n-    const product = db.products.find(p => p.id === parseInt(req.params.id));\n-    if (product) {\n+  // Utility: Read products data from file\n+  const readProducts = () => {\n+    const rawData = fs.readFileSync(dbPath);\n+    const data = JSON.parse(rawData);\n+    return data.products;\n+  };\n+  \n+  // Utility: Write updated products back to file\n+  const writeProducts = (products) => {\n+    const data = { products };\n+    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n+  };\n+  // Endpoint to get a single product by id\n+  router.get(\"/products/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const product = products.find((p) => p.id === id);\n+      if (!product) {\n+        return res.status(404).json({ error: \"Product not found\" });\n+      }\n       res.json(product);\n-    } else {\n-      res.status(404).json({ message: 'Product not found' });\n+    } catch (err) {\n+      res.status(500).json({ error: \"Failed to read products data\" });\n     }\n   });\n   \n-  // Update a product by ID\n-  router.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n-    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n-    const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n-    if (productIndex !== -1) {\n-      const updatedProduct = { ...db.products[productIndex], ...JSON.parse(req.body.product) };\n+  // PATCH endpoint to update a product partially\n+  router.patch(\"/Products/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const index = products.findIndex((p) => p.id === id);\n   \n-      // Handle image uploads\n-      if (req.files && req.files.length > 0) {\n-        updatedProduct.images = req.files.map(file => `data:${file.mimetype};base64,${file.buffer.toString('base64')}`);\n+      if (index === -1) {\n+        return res.status(404).json({ error: \"Product not found\" });\n       }\n   \n-      db.products[productIndex] = updatedProduct;\n-      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+      // Merge the existing product with the fields sent in the request body\n+      const updatedProduct = { ...products[index], ...req.body };\n+      products[index] = updatedProduct;\n+  \n+      // Write the updated products back to the file\n+      writeProducts(products);\n+  \n       res.json(updatedProduct);\n-    } else {\n-      res.status(404).json({ message: 'Product not found' });\n+    } catch (err) {\n+      console.error(\"Error patching product:\", err);\n+      res.status(500).json({ error: \"Failed to update product\" });\n     }\n   });\n-\n+  \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856758141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,60 +30,10 @@\n       });\n     });\n   });\n   \n-  // Utility: Read products data from file\n-  const readProducts = () => {\n-    const rawData = fs.readFileSync(dbPath);\n-    const data = JSON.parse(rawData);\n-    return data.products;\n-  };\n+\n   \n-  // Utility: Write updated products back to file\n-  const writeProducts = (products) => {\n-    const data = { products };\n-    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n-  };\n-  // Endpoint to get a single product by id\n-  router.get(\"/products/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const product = products.find((p) => p.id === id);\n-      if (!product) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-      res.json(product);\n-    } catch (err) {\n-      res.status(500).json({ error: \"Failed to read products data\" });\n-    }\n-  });\n-  \n-  // PATCH endpoint to update a product partially\n-  router.patch(\"/Products/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const index = products.findIndex((p) => p.id === id);\n-  \n-      if (index === -1) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-  \n-      // Merge the existing product with the fields sent in the request body\n-      const updatedProduct = { ...products[index], ...req.body };\n-      products[index] = updatedProduct;\n-  \n-      // Write the updated products back to the file\n-      writeProducts(products);\n-  \n-      res.json(updatedProduct);\n-    } catch (err) {\n-      console.error(\"Error patching product:\", err);\n-      res.status(500).json({ error: \"Failed to update product\" });\n-    }\n-  });\n-  \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856767808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,39 @@\n       });\n     });\n   });\n   \n+  // Get a single product by ID\n+  router.get('/products/:id', (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n+    const product = db.products.find(p => p.id === parseInt(req.params.id));\n+    if (product) {\n+      res.json(product);\n+    } else {\n+      res.status(404).json({ message: 'Product not found' });\n+    }\n+  });\n+  \n+  // Update a product by ID\n+  router.put('/updateProduct/:id', upload.array('images'), (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(dbPath, 'utf-8'));\n+    const productIndex = db.products.findIndex(p => p.id === parseInt(req.params.id));\n+    if (productIndex !== -1) {\n+      const updatedProduct = { ...db.products[productIndex], ...JSON.parse(req.body.product) };\n+  \n+      // Handle image uploads\n+      if (req.files && req.files.length > 0) {\n+        updatedProduct.images = req.files.map(file => `data:${file.mimetype};base64,${file.buffer.toString('base64')}`);\n+      }\n+  \n+      db.products[productIndex] = updatedProduct;\n+      fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+      res.json(updatedProduct);\n+    } else {\n+      res.status(404).json({ message: 'Product not found' });\n+    }\n+  });\n \n-  \n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                },
                {
                    "date": 1741856818511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,50 @@\n     }\n   });\n   \n \n+// Route to handle product update by ID\n+router.put(\"/update/:id\", upload.array(\"images\", 11), (req, res) => {\n+  const productId = parseInt(req.params.id);\n+  const updatedData = req.body;\n+  const files = req.files;\n+\n+  // Read the existing products from db.json\n+  const dbPath = path.join(__dirname, \"../jsonFiles/db.json\");\n+  let db = { products: [] };\n+\n+  if (fs.existsSync(dbPath)) {\n+    db = JSON.parse(fs.readFileSync(dbPath, \"utf-8\"));\n+  }\n+\n+  // Find the product by ID\n+  const productIndex = db.products.findIndex((product) => product.id === productId);\n+\n+  if (productIndex === -1) {\n+    return res.status(404).json({ message: \"Product not found\" });\n+  }\n+\n+  // Update the product details\n+  const updatedProduct = {\n+    ...db.products[productIndex],\n+    ...updatedData,\n+    price: parseFloat(updatedData.price),\n+    quantity: parseInt(updatedData.quantity),\n+    numberInStock: parseInt(updatedData.numberInStock),\n+    discount: parseFloat(updatedData.discount),\n+    likes: parseInt(updatedData.likes),\n+    brand: JSON.parse(updatedData.brand),\n+    location: JSON.parse(updatedData.location),\n+    images: files.length > 0 ? files.map((file) => `/images/${file.filename}`) : db.products[productIndex].images,\n+  };\n+\n+  db.products[productIndex] = updatedProduct;\n+\n+  // Save the updated products back to db.json\n+  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));\n+\n+  res.json({ message: \"Product updated successfully!\", product: updatedProduct });\n+});\n   // *API to Delete an products by ID*\n   router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n     fs.readFile(dbPath, \"utf8\", (err, data) => {\n       if (err) return res.status(500).json({ error: \"Error reading database\" });\n"
                }
            ],
            "date": 1740559957211,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst router= express.Router();\nconst dbPath = path.join(__dirname, \"./db.json\");\n\n\n// Read db.json\nrouter.get(\"/products\", (req, res) => {\n    fs.readFile(dbPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      res.json(jsonData.products);\n    });\n  });\n  \n  // Add a new Product to db.json\n  router.post(\"/newProducts/\", (req, res) => {\n    fs.readFile(dbPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      const product = { id: jsonData.products.length + 1, ...req.body };\n      jsonData.products.push(product);\n  \n      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving data\" });\n        res.status(201).json(product);\n      });\n    });\n  });\n  \n  // Utility: Read products data from file\n  const readProducts = () => {\n    const rawData = fs.readFileSync(dbPath);\n    const data = JSON.parse(rawData);\n    return data.products;\n  };\n  \n  // Utility: Write updated products back to file\n  const writeProducts = (products) => {\n    const data = { products };\n    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n  };\n  // Endpoint to get a single product by id\n  router.get(\"/products/:id\", (req, res) => {\n    try {\n      const products = readProducts();\n      const id = parseInt(req.params.id, 10);\n      const product = products.find((p) => p.id === id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to read products data\" });\n    }\n  });\n  \n  // PATCH endpoint to update a product partially\n  router.patch(\"/updateProducts/:id\", (req, res) => {\n    try {\n      const products = readProducts();\n      const id = parseInt(req.params.id, 10);\n      const index = products.findIndex((p) => p.id === id);\n  \n      if (index === -1) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n  \n      // Merge the existing product with the fields sent in the request body\n      const updatedProduct = { ...products[index], ...req.body };\n      products[index] = updatedProduct;\n  \n      // Write the updated products back to the file\n      writeProducts(products);\n  \n      res.json(updatedProduct);\n    } catch (err) {\n      console.error(\"Error patching product:\", err);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n  \n  // *API to Delete an products by ID*\n  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n    fs.readFile(dbPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item index\n      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n      if (itemIndex === -1)\n        return res.status(404).json({ message: \"Item not found\" });\n  \n      // Remove the item\n      db.products.splice(itemIndex, 1);\n  \n      // Save updated data to db.json\n      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"product deleted successfully\" });\n      });\n    });\n  });\n\n  module.exports = router;"
        }
    ]
}