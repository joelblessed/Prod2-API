{
    "sourceFile": "jsFiles/db.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740559957211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740559964882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+const express = require(\"express\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const router= express.Router();\n+const dbPath = path.join(__dirname, \"./jsonFilesdb.json\");\n+\n+\n+// Read db.json\n+router.get(\"/products\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      const jsonData = JSON.parse(data);\n+      res.json(jsonData.products);\n+    });\n+  });\n+  \n+  // Add a new Product to db.json\n+  router.post(\"/newProducts/\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      const jsonData = JSON.parse(data);\n+      const product = { id: jsonData.products.length + 1, ...req.body };\n+      jsonData.products.push(product);\n+  \n+      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n+        if (err) return res.status(500).json({ error: \"Error saving data\" });\n+        res.status(201).json(product);\n+      });\n+    });\n+  });\n+  \n+  // Utility: Read products data from file\n+  const readProducts = () => {\n+    const rawData = fs.readFileSync(dbPath);\n+    const data = JSON.parse(rawData);\n+    return data.products;\n+  };\n+  \n+  // Utility: Write updated products back to file\n+  const writeProducts = (products) => {\n+    const data = { products };\n+    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n+  };\n+  // Endpoint to get a single product by id\n+  router.get(\"/products/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const product = products.find((p) => p.id === id);\n+      if (!product) {\n+        return res.status(404).json({ error: \"Product not found\" });\n+      }\n+      res.json(product);\n+    } catch (err) {\n+      res.status(500).json({ error: \"Failed to read products data\" });\n+    }\n+  });\n+  \n+  // PATCH endpoint to update a product partially\n+  router.patch(\"/updateProducts/:id\", (req, res) => {\n+    try {\n+      const products = readProducts();\n+      const id = parseInt(req.params.id, 10);\n+      const index = products.findIndex((p) => p.id === id);\n+  \n+      if (index === -1) {\n+        return res.status(404).json({ error: \"Product not found\" });\n+      }\n+  \n+      // Merge the existing product with the fields sent in the request body\n+      const updatedProduct = { ...products[index], ...req.body };\n+      products[index] = updatedProduct;\n+  \n+      // Write the updated products back to the file\n+      writeProducts(products);\n+  \n+      res.json(updatedProduct);\n+    } catch (err) {\n+      console.error(\"Error patching product:\", err);\n+      res.status(500).json({ error: \"Failed to update product\" });\n+    }\n+  });\n+  \n+  // *API to Delete an products by ID*\n+  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n+    fs.readFile(dbPath, \"utf8\", (err, data) => {\n+      if (err) return res.status(500).json({ error: \"Error reading database\" });\n+  \n+      let db = JSON.parse(data);\n+      const itemId = parseInt(req.params.id);\n+  \n+      // Find the item index\n+      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n+      if (itemIndex === -1)\n+        return res.status(404).json({ message: \"Item not found\" });\n+  \n+      // Remove the item\n+      db.products.splice(itemIndex, 1);\n+  \n+      // Save updated data to db.json\n+      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n+        if (err) return res.status(500).json({ error: \"Error saving database\" });\n+  \n+        res.json({ message: \"product deleted successfully\" });\n+      });\n+    });\n+  });\n+\n+  module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740559984894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\");\n const path = require(\"path\");\n const router= express.Router();\n-const dbPath = path.join(__dirname, \"./jsonFilesdb.json\");\n+const dbPath = path.join(__dirname, \"../jsonFiles/db.json\");\n \n \n // Read db.json\n router.get(\"/products\", (req, res) => {\n@@ -107,116 +107,5 @@\n       });\n     });\n   });\n \n-  module.exports = router;\n-const express = require(\"express\");\n-const fs = require(\"fs\");\n-const path = require(\"path\");\n-const router= express.Router();\n-const dbPath = path.join(__dirname, \"./db.json\");\n-\n-\n-// Read db.json\n-router.get(\"/products\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      res.json(jsonData.products);\n-    });\n-  });\n-  \n-  // Add a new Product to db.json\n-  router.post(\"/newProducts/\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      const product = { id: jsonData.products.length + 1, ...req.body };\n-      jsonData.products.push(product);\n-  \n-      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving data\" });\n-        res.status(201).json(product);\n-      });\n-    });\n-  });\n-  \n-  // Utility: Read products data from file\n-  const readProducts = () => {\n-    const rawData = fs.readFileSync(dbPath);\n-    const data = JSON.parse(rawData);\n-    return data.products;\n-  };\n-  \n-  // Utility: Write updated products back to file\n-  const writeProducts = (products) => {\n-    const data = { products };\n-    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n-  };\n-  // Endpoint to get a single product by id\n-  router.get(\"/products/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const product = products.find((p) => p.id === id);\n-      if (!product) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-      res.json(product);\n-    } catch (err) {\n-      res.status(500).json({ error: \"Failed to read products data\" });\n-    }\n-  });\n-  \n-  // PATCH endpoint to update a product partially\n-  router.patch(\"/updateProducts/:id\", (req, res) => {\n-    try {\n-      const products = readProducts();\n-      const id = parseInt(req.params.id, 10);\n-      const index = products.findIndex((p) => p.id === id);\n-  \n-      if (index === -1) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-  \n-      // Merge the existing product with the fields sent in the request body\n-      const updatedProduct = { ...products[index], ...req.body };\n-      products[index] = updatedProduct;\n-  \n-      // Write the updated products back to the file\n-      writeProducts(products);\n-  \n-      res.json(updatedProduct);\n-    } catch (err) {\n-      console.error(\"Error patching product:\", err);\n-      res.status(500).json({ error: \"Failed to update product\" });\n-    }\n-  });\n-  \n-  // *API to Delete an products by ID*\n-  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n-    fs.readFile(dbPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      let db = JSON.parse(data);\n-      const itemId = parseInt(req.params.id);\n-  \n-      // Find the item index\n-      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n-      if (itemIndex === -1)\n-        return res.status(404).json({ message: \"Item not found\" });\n-  \n-      // Remove the item\n-      db.products.splice(itemIndex, 1);\n-  \n-      // Save updated data to db.json\n-      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving database\" });\n-  \n-        res.json({ message: \"product deleted successfully\" });\n-      });\n-    });\n-  });\n-\n   module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740559957211,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst router= express.Router();\nconst dbPath = path.join(__dirname, \"./db.json\");\n\n\n// Read db.json\nrouter.get(\"/products\", (req, res) => {\n    fs.readFile(dbPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      res.json(jsonData.products);\n    });\n  });\n  \n  // Add a new Product to db.json\n  router.post(\"/newProducts/\", (req, res) => {\n    fs.readFile(dbPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      const product = { id: jsonData.products.length + 1, ...req.body };\n      jsonData.products.push(product);\n  \n      fs.writeFile(dbPath, JSON.stringify(jsonData, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving data\" });\n        res.status(201).json(product);\n      });\n    });\n  });\n  \n  // Utility: Read products data from file\n  const readProducts = () => {\n    const rawData = fs.readFileSync(dbPath);\n    const data = JSON.parse(rawData);\n    return data.products;\n  };\n  \n  // Utility: Write updated products back to file\n  const writeProducts = (products) => {\n    const data = { products };\n    fs.writeFileSync(dbPath, JSON.stringify(data, null, 2));\n  };\n  // Endpoint to get a single product by id\n  router.get(\"/products/:id\", (req, res) => {\n    try {\n      const products = readProducts();\n      const id = parseInt(req.params.id, 10);\n      const product = products.find((p) => p.id === id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to read products data\" });\n    }\n  });\n  \n  // PATCH endpoint to update a product partially\n  router.patch(\"/updateProducts/:id\", (req, res) => {\n    try {\n      const products = readProducts();\n      const id = parseInt(req.params.id, 10);\n      const index = products.findIndex((p) => p.id === id);\n  \n      if (index === -1) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n  \n      // Merge the existing product with the fields sent in the request body\n      const updatedProduct = { ...products[index], ...req.body };\n      products[index] = updatedProduct;\n  \n      // Write the updated products back to the file\n      writeProducts(products);\n  \n      res.json(updatedProduct);\n    } catch (err) {\n      console.error(\"Error patching product:\", err);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n  \n  // *API to Delete an products by ID*\n  router.delete(\"/productsRemoveItem/:id\", (req, res) => {\n    fs.readFile(dbPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item index\n      const itemIndex = db.products.findIndex((item) => item.id === itemId);\n      if (itemIndex === -1)\n        return res.status(404).json({ message: \"Item not found\" });\n  \n      // Remove the item\n      db.products.splice(itemIndex, 1);\n  \n      // Save updated data to db.json\n      fs.writeFile(dbPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"product deleted successfully\" });\n      });\n    });\n  });\n\n  module.exports = router;"
        }
    ]
}