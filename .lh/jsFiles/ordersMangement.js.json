{
    "sourceFile": "jsFiles/ordersMangement.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1742912799187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742912819564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const fs = require('fs').promises;\n const path = require('path');\n const jwt = require('jsonwebtoken');\n \n-const ORDERS_FILE = path.join(__dirname, 'orders.json');\n+const ORDERS_FILE = path.join(__dirname, './orders.json');\n const SECRET_KEY = 'your-secret-key'; // In production, use environment variable\n \n // Authentication middleware\n const authenticateToken = (req, res, next) => {\n"
                },
                {
                    "date": 1742912825479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const fs = require('fs').promises;\n const path = require('path');\n const jwt = require('jsonwebtoken');\n \n-const ORDERS_FILE = path.join(__dirname, './orders.json');\n+const ORDERS_FILE = path.join(__dirname, '../jorders.json');\n const SECRET_KEY = 'your-secret-key'; // In production, use environment variable\n \n // Authentication middleware\n const authenticateToken = (req, res, next) => {\n"
                },
                {
                    "date": 1742912831291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const fs = require('fs').promises;\n const path = require('path');\n const jwt = require('jsonwebtoken');\n \n-const ORDERS_FILE = path.join(__dirname, '../jorders.json');\n+const ORDERS_FILE = path.join(__dirname, '../jsonFilesorders.json');\n const SECRET_KEY = 'your-secret-key'; // In production, use environment variable\n \n // Authentication middleware\n const authenticateToken = (req, res, next) => {\n"
                },
                {
                    "date": 1742915307610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const fs = require('fs').promises;\n const path = require('path');\n const jwt = require('jsonwebtoken');\n \n-const ORDERS_FILE = path.join(__dirname, '../jsonFilesorders.json');\n+const ORDERS_FILE = path.join(__dirname, '../jsonFiles/orders.json');\n const SECRET_KEY = 'your-secret-key'; // In production, use environment variable\n \n // Authentication middleware\n const authenticateToken = (req, res, next) => {\n@@ -32,9 +32,9 @@\n   await fs.writeFile(ORDERS_FILE, JSON.stringify({ orders }, null, 2));\n };\n \n // Get all orders (admin only)\n-router.get('/', authenticateToken, async (req, res) => {\n+router.get('/all', authenticateToken, async (req, res) => {\n   try {\n     if (!req.user.isAdmin) return res.status(403).json({ error: \"Forbidden\" });\n     \n     const orders = await readOrders();\n"
                },
                {
                    "date": 1742915314700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   await fs.writeFile(ORDERS_FILE, JSON.stringify({ orders }, null, 2));\n };\n \n // Get all orders (admin only)\n-router.get('/all', authenticateToken, async (req, res) => {\n+router.get('/allOrders', authenticateToken, async (req, res) => {\n   try {\n     if (!req.user.isAdmin) return res.status(403).json({ error: \"Forbidden\" });\n     \n     const orders = await readOrders();\n"
                },
                {
                    "date": 1742916516925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +1,74 @@\n-const express = require('express');\n-const router = express.Router();\n-const fs = require('fs').promises;\n-const path = require('path');\n-const jwt = require('jsonwebtoken');\n+const express = require(\"express\");\n+const fs = require(\"fs\");\n+const cors = require(\"cors\");\n+const bodyParser = require(\"body-parser\");\n \n-const ORDERS_FILE = path.join(__dirname, '../jsonFiles/orders.json');\n-const SECRET_KEY = 'your-secret-key'; // In production, use environment variable\n+const app = express();\n+const PORT = 5000;\n+const ordersFilePath = \"./orders.json\";\n \n-// Authentication middleware\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+// Middleware to check authentication token\n const authenticateToken = (req, res, next) => {\n-  const authHeader = req.headers['authorization'];\n-  const token = authHeader && authHeader.split(' ')[1];\n-  \n-  if (!token) return res.sendStatus(401);\n-  \n-  jwt.verify(token, SECRET_KEY, (err, user) => {\n-    if (err) return res.sendStatus(403);\n-    req.user = user;\n-    next();\n-  });\n+  const token = req.headers.authorization;\n+  if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+  next();\n };\n \n // Read orders from file\n-const readOrders = async () => {\n-  const data = await fs.readFile(ORDERS_FILE, 'utf8');\n+const getOrders = () => {\n+  const data = fs.readFileSync(ordersFilePath);\n   return JSON.parse(data).orders;\n };\n \n-// Write orders to file\n-const writeOrders = async (orders) => {\n-  await fs.writeFile(ORDERS_FILE, JSON.stringify({ orders }, null, 2));\n+// Write updated orders to file\n+const saveOrders = (orders) => {\n+  fs.writeFileSync(ordersFilePath, JSON.stringify({ orders }, null, 2));\n };\n \n-// Get all orders (admin only)\n-router.get('/allOrders', authenticateToken, async (req, res) => {\n-  try {\n-    if (!req.user.isAdmin) return res.status(403).json({ error: \"Forbidden\" });\n-    \n-    const orders = await readOrders();\n-    res.json(orders);\n-  } catch (error) {\n-    res.status(500).json({ error: error.message });\n-  }\n+// *1. Fetch all orders (Requires Token)*\n+app.get(\"/orders\", authenticateToken, (req, res) => {\n+  res.json(getOrders());\n });\n \n-// Get orders by user ID\n-router.get('/user/:userId', authenticateToken, async (req, res) => {\n-  try {\n-    const userId = parseInt(req.params.userId);\n-    if (req.user.userId !== userId && !req.user.isAdmin) {\n-      return res.status(403).json({ error: \"Forbidden\" });\n-    }\n-\n-    const orders = await readOrders();\n-    const userOrders = orders.filter(order => order.user.userId === userId);\n-    res.json(userOrders);\n-  } catch (error) {\n-    res.status(500).json({ error: error.message });\n-  }\n+// *2. Fetch orders by userId (Requires Token)*\n+app.get(\"/orders/:userId\", authenticateToken, (req, res) => {\n+  const { userId } = req.params;\n+  const orders = getOrders().filter((order) => order.user.userId == userId);\n+  res.json(orders);\n });\n \n-// Cancel order\n-router.patch('/:orderId/cancel', authenticateToken, async (req, res) => {\n-  try {\n-    const orderId = parseInt(req.params.orderId);\n-    let orders = await readOrders();\n-    const orderIndex = orders.findIndex(o => o.id === orderId);\n-    \n-    if (orderIndex === -1) return res.status(404).json({ error: \"Order not found\" });\n-    if (orders[orderIndex].user.userId !== req.user.userId && !req.user.isAdmin) {\n-      return res.status(403).json({ error: \"Forbidden\" });\n-    }\n-    if (orders[orderIndex].status !== \"Pending\") {\n-      return res.status(400).json({ error: \"Order cannot be canceled\" });\n-    }\n-    \n-    orders[orderIndex].status = \"Canceled\";\n-    await writeOrders(orders);\n-    res.json(orders[orderIndex]);\n-  } catch (error) {\n-    res.status(500).json({ error: error.message });\n-  }\n\\ No newline at end of file\n+// *3. Cancel an Order (Requires Token)*\n+app.patch(\"/orders/cancel/:orderId\", authenticateToken, (req, res) => {\n+  const { orderId } = req.params;\n+  const orders = getOrders();\n+  const orderIndex = orders.findIndex((order) => order.id == orderId);\n+\n+  if (orderIndex === -1) return res.status(404).json({ message: \"Order not found\" });\n+\n+  orders[orderIndex].status = \"Canceled\";\n+  saveOrders(orders);\n+  res.json({ message: \"Order canceled successfully\" });\n });\n \n-// Mark as delivered\n-router.patch('/:orderId/deliver', authenticateToken, async (req, res) => {\n-  try {\n-    const orderId = parseInt(req.params.orderId);\n-    const { deliveryDate } = req.body;\n-    let orders = await readOrders();\n-    const orderIndex = orders.findIndex(o => o.id === orderId);\n-    \n-    if (orderIndex === -1) return res.status(404).json({ error: \"Order not found\" });\n-    if (!req.user.isAdmin) return res.status(403).json({ error: \"Forbidden\" });\n-    if (orders[orderIndex].status === \"Canceled\") {\n-      return res.status(400).json({ error: \"Cannot deliver canceled order\" });\n-    }\n-    \n-    orders[orderIndex].status = \"Delivered\";\n-    orders[orderIndex].shipping.deliveryDate = deliveryDate || new Date().toISOString();\n-    await writeOrders(orders);\n-    \n-    res.json(orders[orderIndex]);\n-  } catch (error) {\n-    res.status(500).json({ error: error.message });\n-  }\n+// *4. Mark an Order as Delivered and Store Delivery Date*\n+app.patch(\"/orders/deliver/:orderId\", authenticateToken, (req, res) => {\n+  const { orderId } = req.params;\n+  const deliveryDate = new Date().toISOString();\n+  const orders = getOrders();\n+  const orderIndex = orders.findIndex((order) => order.id == orderId);\n+\n+  if (orderIndex === -1) return res.status(404).json({ message: \"Order not found\" });\n+\n+  orders[orderIndex].status = \"Delivered\";\n+  orders[orderIndex].shipping.deliveryDate = deliveryDate;\n+  saveOrders(orders);\n+  res.json({ message: \"Order delivered successfully\", deliveryDate });\n });\n \n-module.exports = router;\n+// *Start Server*\n+app.listen(PORT, () => {\n+  console.log(Server running on http://localhost:${PORT});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742916530892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,7 +68,5 @@\n   res.json({ message: \"Order delivered successfully\", deliveryDate });\n });\n \n // *Start Server*\n-app.listen(PORT, () => {\n-  console.log(Server running on http://localhost:${PORT});\n-});\n\\ No newline at end of file\n+module.exports \n\\ No newline at end of file\n"
                },
                {
                    "date": 1742916536259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,5 @@\n   res.json({ message: \"Order delivered successfully\", deliveryDate });\n });\n \n // *Start Server*\n-module.exports \n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742916585331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n const PORT = 5000;\n-const ordersFilePath = \"./orders.json\";\n+const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1742916593360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const PORT = 5000;\n+const \n const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742916603549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const \n+const router = \n const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742916622658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router = \n+const router = express.router\n const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742916815184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router = express.router\n+const router = express.Router()\n const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n \n app.use(cors());\n app.use(bodyParser.json());\n@@ -28,21 +28,21 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify({ orders }, null, 2));\n };\n \n // *1. Fetch all orders (Requires Token)*\n-app.get(\"/orders\", authenticateToken, (req, res) => {\n+.get(\"/orders\", authenticateToken, (req, res) => {\n   res.json(getOrders());\n });\n \n // *2. Fetch orders by userId (Requires Token)*\n-app.get(\"/orders/:userId\", authenticateToken, (req, res) => {\n+.get(\"/orders/:userId\", authenticateToken, (req, res) => {\n   const { userId } = req.params;\n   const orders = getOrders().filter((order) => order.user.userId == userId);\n   res.json(orders);\n });\n \n // *3. Cancel an Order (Requires Token)*\n-app.patch(\"/orders/cancel/:orderId\", authenticateToken, (req, res) => {\n+.patch(\"/orders/cancel/:orderId\", authenticateToken, (req, res) => {\n   const { orderId } = req.params;\n   const orders = getOrders();\n   const orderIndex = orders.findIndex((order) => order.id == orderId);\n \n@@ -53,9 +53,9 @@\n   res.json({ message: \"Order canceled successfully\" });\n });\n \n // *4. Mark an Order as Delivered and Store Delivery Date*\n-app.patch(\"/orders/deliver/:orderId\", authenticateToken, (req, res) => {\n+.patch(\"/orders/deliver/:orderId\", authenticateToken, (req, res) => {\n   const { orderId } = req.params;\n   const deliveryDate = new Date().toISOString();\n   const orders = getOrders();\n   const orderIndex = orders.findIndex((order) => order.id == orderId);\n"
                },
                {
                    "date": 1742916886918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router = express.Router()\n-const ordersFilePath = path.join(__dirname, \"../jsonFiles/orders.json\");\n+const PORT = 5000;\n+const ordersFilePath = \"./orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n \n@@ -28,21 +28,21 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify({ orders }, null, 2));\n };\n \n // *1. Fetch all orders (Requires Token)*\n-.get(\"/orders\", authenticateToken, (req, res) => {\n+app.get(\"/orders\", authenticateToken, (req, res) => {\n   res.json(getOrders());\n });\n \n // *2. Fetch orders by userId (Requires Token)*\n-.get(\"/orders/:userId\", authenticateToken, (req, res) => {\n+app.get(\"/orders/:userId\", authenticateToken, (req, res) => {\n   const { userId } = req.params;\n   const orders = getOrders().filter((order) => order.user.userId == userId);\n   res.json(orders);\n });\n \n // *3. Cancel an Order (Requires Token)*\n-.patch(\"/orders/cancel/:orderId\", authenticateToken, (req, res) => {\n+app.patch(\"/orders/cancel/:orderId\", authenticateToken, (req, res) => {\n   const { orderId } = req.params;\n   const orders = getOrders();\n   const orderIndex = orders.findIndex((order) => order.id == orderId);\n \n@@ -53,9 +53,9 @@\n   res.json({ message: \"Order canceled successfully\" });\n });\n \n // *4. Mark an Order as Delivered and Store Delivery Date*\n-.patch(\"/orders/deliver/:orderId\", authenticateToken, (req, res) => {\n+app.patch(\"/orders/deliver/:orderId\", authenticateToken, (req, res) => {\n   const { orderId } = req.params;\n   const deliveryDate = new Date().toISOString();\n   const orders = getOrders();\n   const orderIndex = orders.findIndex((order) => order.id == orderId);\n"
                },
                {
                    "date": 1742916903390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n const PORT = 5000;\n-const ordersFilePath = \"./orders.json\";\n+const ordersFilePath = \".jso/orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1742916909326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n const PORT = 5000;\n-const ordersFilePath = \".jso/orders.json\";\n+const ordersFilePath = \".jsonFiles/orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1742916953395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n const PORT = 5000;\n-const ordersFilePath = \".jsonFiles/orders.json\";\n+const ordersFilePath = \"./jsonFiles/orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n \n@@ -28,21 +28,21 @@\n   fs.writeFileSync(ordersFilePath, JSON.stringify({ orders }, null, 2));\n };\n \n // *1. Fetch all orders (Requires Token)*\n-app.get(\"/orders\", authenticateToken, (req, res) => {\n+router.get(\"/orders\", authenticateToken, (req, res) => {\n   res.json(getOrders());\n });\n \n // *2. Fetch orders by userId (Requires Token)*\n-app.get(\"/orders/:userId\", authenticateToken, (req, res) => {\n+router.get(\"/orders/:userId\", authenticateToken, (req, res) => {\n   const { userId } = req.params;\n   const orders = getOrders().filter((order) => order.user.userId == userId);\n   res.json(orders);\n });\n \n // *3. Cancel an Order (Requires Token)*\n-app.patch(\"/orders/cancel/:orderId\", authenticateToken, (req, res) => {\n+router.patch(\"/orders/cancel/:orderId\", authenticateToken, (req, res) => {\n   const { orderId } = req.params;\n   const orders = getOrders();\n   const orderIndex = orders.findIndex((order) => order.id == orderId);\n \n@@ -53,9 +53,9 @@\n   res.json({ message: \"Order canceled successfully\" });\n });\n \n // *4. Mark an Order as Delivered and Store Delivery Date*\n-app.patch(\"/orders/deliver/:orderId\", authenticateToken, (req, res) => {\n+router.patch(\"/orders/deliver/:orderId\", authenticateToken, (req, res) => {\n   const { orderId } = req.params;\n   const deliveryDate = new Date().toISOString();\n   const orders = getOrders();\n   const orderIndex = orders.findIndex((order) => order.id == orderId);\n"
                },
                {
                    "date": 1742916988003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const PORT = 5000;\n+const router\n const ordersFilePath = \"./jsonFiles/orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742916995348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router\n+const router = router\n const ordersFilePath = \"./jsonFiles/orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742917002550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router = router\n+const router = express\n const ordersFilePath = \"./jsonFiles/orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742917009291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router = express\n+const router = express.Router()\n const ordersFilePath = \"./jsonFiles/orders.json\";\n \n app.use(cors());\n app.use(bodyParser.json());\n"
                },
                {
                    "date": 1742933200527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,6 +67,9 @@\n   saveOrders(orders);\n   res.json({ message: \"Order delivered successfully\", deliveryDate });\n });\n \n+\n+\n+\n // *Start Server*\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742933215525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,6 +70,49 @@\n \n \n \n \n+// 📌 Helper function to read JSON file\n+const readData = (file) => {\n+    try {\n+      return JSON.parse(fs.readFileSync(file));\n+    } catch (err) {\n+      return { cart: [], wishlist: [] };\n+    }\n+  };\n+  \n+  // 📌 Helper function to write JSON file\n+  const writeData = (file, data) => {\n+    fs.writeFileSync(file, JSON.stringify(data, null, 2));\n+  };\n+  \n+  // ✅ Add to Cart and Remove from Wishlist\n+  router.post(\"/cart/add\", (req, res) => {\n+    const { userId, product } = req.body;\n+    const cartData = readData(CART_FILE);\n+    const wishlistData = readData(WISHLIST_FILE);\n+  \n+    // Check if product already exists in cart\n+    if (cartData.carts.some((item) => item.id === product.id)) {\n+      return res.status(400).json({ message: \"Product already in cart\" });\n+    }\n+  \n+    // Add to cart\n+    cartData.cart.push(product);\n+    writeData(CART_FILE, cartData);\n+  \n+    // Remove from wishlist\n+    wishlistData.wishlist = wishlistData.wishlist.map((user) => {\n+      if (user.userId === userId) {\n+        user.cart = user.cart.filter((item) => item.id !== product.id);\n+      }\n+      return user;\n+    });\n+  \n+    writeData(WISHLIST_FILE, wishlistData);\n+  \n+    res.json({ message: \"Added to cart and removed from wishlist\" });\n+  });\n+  \n+ \n // *Start Server*\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742933238714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n       return res.status(400).json({ message: \"Product already in cart\" });\n     }\n   \n     // Add to cart\n-    cartData.cart.push(product);\n+    cartData.carts.push(product);\n     writeData(CART_FILE, cartData);\n   \n     // Remove from wishlist\n     wishlistData.wishlist = wishlistData.wishlist.map((user) => {\n"
                },
                {
                    "date": 1742933479522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,49 +70,6 @@\n \n \n \n \n-// 📌 Helper function to read JSON file\n-const readData = (file) => {\n-    try {\n-      return JSON.parse(fs.readFileSync(file));\n-    } catch (err) {\n-      return { cart: [], wishlist: [] };\n-    }\n-  };\n-  \n-  // 📌 Helper function to write JSON file\n-  const writeData = (file, data) => {\n-    fs.writeFileSync(file, JSON.stringify(data, null, 2));\n-  };\n-  \n-  // ✅ Add to Cart and Remove from Wishlist\n-  router.post(\"/cart/add\", (req, res) => {\n-    const { userId, product } = req.body;\n-    const cartData = readData(CART_FILE);\n-    const wishlistData = readData(WISHLIST_FILE);\n-  \n-    // Check if product already exists in cart\n-    if (cartData.carts.some((item) => item.id === product.id)) {\n-      return res.status(400).json({ message: \"Product already in cart\" });\n-    }\n-  \n-    // Add to cart\n-    cartData.carts.push(product);\n-    writeData(CART_FILE, cartData);\n-  \n-    // Remove from wishlist\n-    wishlistData.wishlist = wishlistData.wishlist.map((user) => {\n-      if (user.userId === userId) {\n-        user.cart = user.cart.filter((item) => item.id !== product.id);\n-      }\n-      return user;\n-    });\n-  \n-    writeData(WISHLIST_FILE, wishlistData);\n-  \n-    res.json({ message: \"Added to cart and removed from wishlist\" });\n-  });\n-  \n- \n-// *Start Server*\n+\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742933488878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,5 @@\n   res.json({ message: \"Order delivered successfully\", deliveryDate });\n });\n \n \n-\n-\n-\n module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1742912799187,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst fs = require('fs').promises;\nconst path = require('path');\nconst jwt = require('jsonwebtoken');\n\nconst ORDERS_FILE = path.join(__dirname, 'orders.json');\nconst SECRET_KEY = 'your-secret-key'; // In production, use environment variable\n\n// Authentication middleware\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (!token) return res.sendStatus(401);\n  \n  jwt.verify(token, SECRET_KEY, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n\n// Read orders from file\nconst readOrders = async () => {\n  const data = await fs.readFile(ORDERS_FILE, 'utf8');\n  return JSON.parse(data).orders;\n};\n\n// Write orders to file\nconst writeOrders = async (orders) => {\n  await fs.writeFile(ORDERS_FILE, JSON.stringify({ orders }, null, 2));\n};\n\n// Get all orders (admin only)\nrouter.get('/', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.isAdmin) return res.status(403).json({ error: \"Forbidden\" });\n    \n    const orders = await readOrders();\n    res.json(orders);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get orders by user ID\nrouter.get('/user/:userId', authenticateToken, async (req, res) => {\n  try {\n    const userId = parseInt(req.params.userId);\n    if (req.user.userId !== userId && !req.user.isAdmin) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n\n    const orders = await readOrders();\n    const userOrders = orders.filter(order => order.user.userId === userId);\n    res.json(userOrders);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Cancel order\nrouter.patch('/:orderId/cancel', authenticateToken, async (req, res) => {\n  try {\n    const orderId = parseInt(req.params.orderId);\n    let orders = await readOrders();\n    const orderIndex = orders.findIndex(o => o.id === orderId);\n    \n    if (orderIndex === -1) return res.status(404).json({ error: \"Order not found\" });\n    if (orders[orderIndex].user.userId !== req.user.userId && !req.user.isAdmin) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    if (orders[orderIndex].status !== \"Pending\") {\n      return res.status(400).json({ error: \"Order cannot be canceled\" });\n    }\n    \n    orders[orderIndex].status = \"Canceled\";\n    await writeOrders(orders);\n    res.json(orders[orderIndex]);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Mark as delivered\nrouter.patch('/:orderId/deliver', authenticateToken, async (req, res) => {\n  try {\n    const orderId = parseInt(req.params.orderId);\n    const { deliveryDate } = req.body;\n    let orders = await readOrders();\n    const orderIndex = orders.findIndex(o => o.id === orderId);\n    \n    if (orderIndex === -1) return res.status(404).json({ error: \"Order not found\" });\n    if (!req.user.isAdmin) return res.status(403).json({ error: \"Forbidden\" });\n    if (orders[orderIndex].status === \"Canceled\") {\n      return res.status(400).json({ error: \"Cannot deliver canceled order\" });\n    }\n    \n    orders[orderIndex].status = \"Delivered\";\n    orders[orderIndex].shipping.deliveryDate = deliveryDate || new Date().toISOString();\n    await writeOrders(orders);\n    \n    res.json(orders[orderIndex]);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;"
        }
    ]
}