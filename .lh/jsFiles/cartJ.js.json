{
    "sourceFile": "jsFiles/cartJ.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1741896317994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741896332543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,4 @@\n     const data = await readCartData();\n     res.json(data);\n });\n \n-// Start Server\n-app.listen(PORT, () => {\n-    console.log(âœ… Server running on http://localhost:${PORT});\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741896339934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,4 +83,5 @@\n     const data = await readCartData();\n     res.json(data);\n });\n \n+modu\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741896345649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,5 +83,5 @@\n     const data = await readCartData();\n     res.json(data);\n });\n \n-modu\n\\ No newline at end of file\n+module.exports = app;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741896351432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,5 +83,5 @@\n     const data = await readCartData();\n     res.json(data);\n });\n \n-module.exports = app;\n\\ No newline at end of file\n+module.exports = rout\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741896358285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const express = require(\"express\");\n const fs = require(\"fs\").promises;\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n+const { route } = require(\"./cart\");\n \n const app = express();\n const PORT = 5000;\n \n@@ -83,5 +84,5 @@\n     const data = await readCartData();\n     res.json(data);\n });\n \n-module.exports = rout\n\\ No newline at end of file\n+module.exports = routeer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741896378734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const PORT = 5000;\n \n app.use(cors());\n app.use(bodyParser.json());\n-\n+const\n const CART_FILE = \"cart.json\";\n \n // Helper function to read cart data\n const readCartData = async () => {\n@@ -84,5 +84,5 @@\n     const data = await readCartData();\n     res.json(data);\n });\n \n-module.exports = routeer;\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741896498511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const PORT = 5000;\n \n app.use(cors());\n app.use(bodyParser.json());\n-const\n+const router = express.Router();\n const CART_FILE = \"cart.json\";\n \n // Helper function to read cart data\n const readCartData = async () => {\n@@ -59,9 +59,9 @@\n     res.json({ message: \"Product quantity increased\", cart: data.cart });\n });\n \n // ðŸ”» Decrement Product Quantity\n-app.put(\"/cart/:productId/decrement\", authenticate, async (req, res) => {\n+.put(\"/cart/:productId/decrement\", authenticate, async (req, res) => {\n     const { productId } = req.params;\n     let data = await readCartData();\n \n     const productIndex = data.cart.findIndex((item) => item.productId === productId);\n"
                },
                {
                    "date": 1741896515519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     next();\n };\n \n // ðŸŸ¢ Increment Product Quantity\n-app.put(\"/cart/:productId/increment\", authenticate, async (req, res) => {\n+.put(\"/cart/:productId/increment\", authenticate, async (req, res) => {\n     const { productId } = req.params;\n     let data = await readCartData();\n \n     const productIndex = data.cart.findIndex((item) => item.productId === productId);\n@@ -59,9 +59,9 @@\n     res.json({ message: \"Product quantity increased\", cart: data.cart });\n });\n \n // ðŸ”» Decrement Product Quantity\n-.put(\"/cart/:productId/decrement\", authenticate, async (req, res) => {\n+router.put(\"/cart/:productId/decrement\", authenticate, async (req, res) => {\n     const { productId } = req.params;\n     let data = await readCartData();\n \n     const productIndex = data.cart.findIndex((item) => item.productId === productId);\n"
                },
                {
                    "date": 1741896558504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     next();\n };\n \n // ðŸŸ¢ Increment Product Quantity\n-.put(\"/cart/:productId/increment\", authenticate, async (req, res) => {\n+router.put(\"/cart/:productId/increment\", authenticate, async (req, res) => {\n     const { productId } = req.params;\n     let data = await readCartData();\n \n     const productIndex = data.cart.findIndex((item) => item.productId === productId);\n@@ -79,9 +79,9 @@\n     res.json({ message: \"Product quantity decreased\", cart: data.cart });\n });\n \n // ðŸ›’ Get Cart Items\n-app.get(\"/cart\", authenticate, async (req, res) => {\n+.get(\"/cart\", authenticate, async (req, res) => {\n     const data = await readCartData();\n     res.json(data);\n });\n \n"
                },
                {
                    "date": 1741896563738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n     res.json({ message: \"Product quantity decreased\", cart: data.cart });\n });\n \n // ðŸ›’ Get Cart Items\n-.get(\"/cart\", authenticate, async (req, res) => {\n+router.get(\"/cart\", authenticate, async (req, res) => {\n     const data = await readCartData();\n     res.json(data);\n });\n \n"
                },
                {
                    "date": 1741896626465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n app.use(cors());\n app.use(bodyParser.json());\n const router = express.Router();\n-const CART_FILE = \"cart.json\";\n+const CART_FILE = \n \n // Helper function to read cart data\n const readCartData = async () => {\n     try {\n"
                },
                {
                    "date": 1741896743693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n app.use(cors());\n app.use(bodyParser.json());\n const router = express.Router();\n-const CART_FILE = \n+const CART_FILE = \"./jsonFiles/cart.json\";\n \n // Helper function to read cart data\n const readCartData = async () => {\n     try {\n"
                },
                {
                    "date": 1741897485660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n router.put(\"/cart/:productId/increment\", authenticate, async (req, res) => {\n     const { productId } = req.params;\n     let data = await readCartData();\n \n-    const productIndex = data.cart.findIndex((item) => item.productId === productId);\n+    const productIndex = data.carts.findIndex((item) => item.productId === productId);\n     if (productIndex !== -1) {\n         data.cart[productIndex].quantity += 1;\n     } else {\n         data.cart.push({ productId, quantity: 1 });\n"
                },
                {
                    "date": 1741897502373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n router.put(\"/cart/:productId/decrement\", authenticate, async (req, res) => {\n     const { productId } = req.params;\n     let data = await readCartData();\n \n-    const productIndex = data.cart.findIndex((item) => item.productId === productId);\n+    const productIndex = data.carts.findIndex((item) => item.productId === productId);\n     if (productIndex === -1) {\n         return res.status(404).json({ message: \"Product not found in cart\" });\n     }\n \n"
                },
                {
                    "date": 1741897638095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \n     if (data.cart[productIndex].quantity > 1) {\n         data.cart[productIndex].quantity -= 1;\n     } else {\n-        data.cart.splice(productIndex, 1); // Remove product if quantity is 0\n+        data.carts.splice(productIndex, 1); // Remove product if quantity is 0\n     }\n \n     const result = await writeCartData(data);\n     res.json({ message: \"Product quantity decreased\", cart: data.cart });\n"
                },
                {
                    "date": 1741897648541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     const productIndex = data.carts.findIndex((item) => item.productId === productId);\n     if (productIndex !== -1) {\n         data.cart[productIndex].quantity += 1;\n     } else {\n-        data.cart.push({ productId, quantity: 1 });\n+        data.carts.push({ productId, quantity: 1 });\n     }\n \n     const result = await writeCartData(data);\n     res.json({ message: \"Product quantity increased\", cart: data.cart });\n"
                },
                {
                    "date": 1741898046082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     let data = await readCartData();\n \n     const productIndex = data.carts.findIndex((item) => item.productId === productId);\n     if (productIndex !== -1) {\n-        data.cart[productIndex].quantity += 1;\n+        data.cart[productIndex].quantity + 1;\n     } else {\n         data.carts.push({ productId, quantity: 1 });\n     }\n \n"
                },
                {
                    "date": 1741900818804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +0,0 @@\n-const express = require(\"express\");\n-const fs = require(\"fs\").promises;\n-const cors = require(\"cors\");\n-const bodyParser = require(\"body-parser\");\n-const { route } = require(\"./cart\");\n-\n-const app = express();\n-const PORT = 5000;\n-\n-app.use(cors());\n-app.use(bodyParser.json());\n-const router = express.Router();\n-const CART_FILE = \"./jsonFiles/cart.json\";\n-\n-// Helper function to read cart data\n-const readCartData = async () => {\n-    try {\n-        const data = await fs.readFile(CART_FILE, \"utf8\");\n-        return JSON.parse(data);\n-    } catch (error) {\n-        console.error(\"Error reading cart data:\", error);\n-        return { cart: [] };\n-    }\n-};\n-\n-// Helper function to write cart data\n-const writeCartData = async (data) => {\n-    try {\n-        await fs.writeFile(CART_FILE, JSON.stringify(data, null, 2));\n-        return { message: \"Cart updated successfully\" };\n-    } catch (error) {\n-        console.error(\"Error writing cart data:\", error);\n-        return { message: \"Error updating cart\", error };\n-    }\n-};\n-\n-// Middleware for authentication (dummy check)\n-const authenticate = (req, res, next) => {\n-    const token = req.headers.authorization;\n-    if (!token || !token.startsWith(\"Bearer \")) {\n-        return res.status(401).json({ message: \"Unauthorized\" });\n-    }\n-    next();\n-};\n-\n-// ðŸŸ¢ Increment Product Quantity\n-router.put(\"/cart/:productId/increment\", authenticate, async (req, res) => {\n-    const { productId } = req.params;\n-    let data = await readCartData();\n-\n-    const productIndex = data.carts.findIndex((item) => item.productId === productId);\n-    if (productIndex !== -1) {\n-        data.cart[productIndex].quantity + 1;\n-    } else {\n-        data.carts.push({ productId, quantity: 1 });\n-    }\n-\n-    const result = await writeCartData(data);\n-    res.json({ message: \"Product quantity increased\", cart: data.cart });\n-});\n-\n-// ðŸ”» Decrement Product Quantity\n-router.put(\"/cart/:productId/decrement\", authenticate, async (req, res) => {\n-    const { productId } = req.params;\n-    let data = await readCartData();\n-\n-    const productIndex = data.carts.findIndex((item) => item.productId === productId);\n-    if (productIndex === -1) {\n-        return res.status(404).json({ message: \"Product not found in cart\" });\n-    }\n-\n-    if (data.cart[productIndex].quantity > 1) {\n-        data.cart[productIndex].quantity -= 1;\n-    } else {\n-        data.carts.splice(productIndex, 1); // Remove product if quantity is 0\n-    }\n-\n-    const result = await writeCartData(data);\n-    res.json({ message: \"Product quantity decreased\", cart: data.cart });\n-});\n-\n-// ðŸ›’ Get Cart Items\n-router.get(\"/cart\", authenticate, async (req, res) => {\n-    const data = await readCartData();\n-    res.json(data);\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741900825327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+const express = require(\"express\");\n+const fs = require(\"fs\").promises;\n+const cors = require(\"cors\");\n+const bodyParser = require(\"body-parser\");\n+\n+const app = express();\n+const PORT = 5000;\n+\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+const CART_FILE = \"cart.json\";\n+\n+// Helper function to read cart data\n+const readCartData = async () => {\n+    try {\n+        const data = await fs.readFile(CART_FILE, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart data:\", error);\n+        return { carts: [] };\n+    }\n+};\n+\n+// Helper function to write cart data\n+const writeCartData = async (data) => {\n+    try {\n+        await fs.writeFile(CART_FILE, JSON.stringify(data, null, 2));\n+        return { message: \"Cart updated successfully\" };\n+    } catch (error) {\n+        console.error(\"Error writing cart data:\", error);\n+        return { message: \"Error updating cart\", error };\n+    }\n+};\n+\n+// Middleware to authenticate user (Dummy check)\n+const authenticate = (req, res, next) => {\n+    const token = req.headers.authorization;\n+    if (!token || !token.startsWith(\"Bearer \")) {\n+        return res.status(401).json({ message: \"Unauthorized\" });\n+    }\n+    next();\n+};\n+\n+// ðŸŸ¢ Increment Product Quantity\n+app.put(\"/cart/:userId/:productId/increment\", authenticate, async (req, res) => {\n+    const { userId, productId } = req.params;\n+    let data = await readCartData();\n+\n+    const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n+    if (!userCart) return res.status(404).json({ message: \"User not found\" });\n+\n+    const product = userCart.cart.find((item) => item.id === parseInt(productId));\n+    if (!product) return res.status(404).json({ message: \"Product not found in cart\" });\n+\n+    if (product.quantity < product.numberInStock) {\n+        product.quantity += 1;\n+        const result = await writeCartData(data);\n+        return res.json({ message: \"Product quantity increased\", cart: userCart.cart });\n+    }\n+\n+    res.status(400).json({ message: \"Cannot exceed stock limit\" });\n+});\n+\n+// ðŸ”» Decrement Product Quantity\n+app.put(\"/cart/:userId/:productId/decrement\", authenticate, async (req, res) => {\n+    const { userId, productId } = req.params;\n+    let data = await readCartData();\n+\n+    const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n+    if (!userCart) return res.status(404).json({ message: \"User not found\" });\n+\n+    const productIndex = userCart.cart.findIndex((item) => item.id === parseInt(productId));\n+    if (productIndex === -1) return res.status(404).json({ message: \"Product not found in cart\" });\n+\n+    const product = userCart.cart[productIndex];\n+\n+    if (product.quantity > 1) {\n+        product.quantity -= 1;\n+    } else {\n+        userCart.cart.splice(productIndex, 1); // Remove item if quantity is 0\n+    }\n+\n+    const result = await writeCartData(data);\n+    res.json({ message: \"Product quantity decreased\", cart: userCart.cart });\n+});\n+\n+// ðŸ›’ Get User's Cart\n+app.get(\"/cart/:userId\", authenticate, async (req, res) => {\n+    const { userId } = req.params;\n+    const data = await readCartData();\n+\n+    const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n+    if (!userCart) return res.status(404).json({ message: \"User not found\" });\n+\n+    res.json(userCart.cart);\n+});\n+\n"
                },
                {
                    "date": 1741900844012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,4 +95,5 @@\n \n     res.json(userCart.cart);\n });\n \n+m\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741900849498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,5 +95,5 @@\n \n     res.json(userCart.cart);\n });\n \n-m\n\\ No newline at end of file\n+module\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741900854699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,5 +95,5 @@\n \n     res.json(userCart.cart);\n });\n \n-module\n\\ No newline at end of file\n+module.exports\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741900860696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,5 +95,5 @@\n \n     res.json(userCart.cart);\n });\n \n-module.exports\n\\ No newline at end of file\n+module.exports= router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741900869711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const PORT = 5000;\n \n+\n app.use(cors());\n app.use(bodyParser.json());\n \n const CART_FILE = \"cart.json\";\n"
                },
                {
                    "date": 1741900886158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n+const \n \n-\n app.use(cors());\n app.use(bodyParser.json());\n \n const CART_FILE = \"cart.json\";\n"
                },
                {
                    "date": 1741900893958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const \n+const router \n \n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1741900901048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router \n+const router = R\n \n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1741900909280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router = R\n+const router = express\n \n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1741900951804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const cors = require(\"cors\");\n const bodyParser = require(\"body-parser\");\n \n const app = express();\n-const router = express\n+const router = express.Router();\n \n app.use(cors());\n app.use(bodyParser.json());\n \n"
                },
                {
                    "date": 1741900997940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n app.use(cors());\n app.use(bodyParser.json());\n \n-const CART_FILE = \"cart.json\";\n+const CART_FILE = \"./jsonFiles/cart.json\";\n \n // Helper function to read cart data\n const readCartData = async () => {\n     try {\n"
                },
                {
                    "date": 1741901063114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     }\n };\n \n // Helper function to write cart data\n-const writeCartData = async (data) => {\n+ writeCartData = async (data) => {\n     try {\n         await fs.writeFile(CART_FILE, JSON.stringify(data, null, 2));\n         return { message: \"Cart updated successfully\" };\n     } catch (error) {\n"
                },
                {
                    "date": 1741901080012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     }\n };\n \n // Helper function to write cart data\n- writeCartData = async (data) => {\n+const writeCartData = async (data) => {\n     try {\n         await fs.writeFile(CART_FILE, JSON.stringify(data, null, 2));\n         return { message: \"Cart updated successfully\" };\n     } catch (error) {\n@@ -42,9 +42,9 @@\n     next();\n };\n \n // ðŸŸ¢ Increment Product Quantity\n-app.put(\"/cart/:userId/:productId/increment\", authenticate, async (req, res) => {\n+.put(\"/cart/:userId/:productId/increment\", authenticate, async (req, res) => {\n     const { userId, productId } = req.params;\n     let data = await readCartData();\n \n     const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n"
                },
                {
                    "date": 1741901090775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     next();\n };\n \n // ðŸŸ¢ Increment Product Quantity\n-.put(\"/cart/:userId/:productId/increment\", authenticate, async (req, res) => {\n+router.put(\"/cart/:userId/:productId/increment\", authenticate, async (req, res) => {\n     const { userId, productId } = req.params;\n     let data = await readCartData();\n \n     const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n@@ -62,9 +62,9 @@\n     res.status(400).json({ message: \"Cannot exceed stock limit\" });\n });\n \n // ðŸ”» Decrement Product Quantity\n-app.put(\"/cart/:userId/:productId/decrement\", authenticate, async (req, res) => {\n+.put(\"/cart/:userId/:productId/decrement\", authenticate, async (req, res) => {\n     const { userId, productId } = req.params;\n     let data = await readCartData();\n \n     const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n"
                },
                {
                    "date": 1741901103350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     res.status(400).json({ message: \"Cannot exceed stock limit\" });\n });\n \n // ðŸ”» Decrement Product Quantity\n-.put(\"/cart/:userId/:productId/decrement\", authenticate, async (req, res) => {\n+router.put(\"/cart/:userId/:productId/decrement\", authenticate, async (req, res) => {\n     const { userId, productId } = req.params;\n     let data = await readCartData();\n \n     const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n@@ -85,9 +85,9 @@\n     res.json({ message: \"Product quantity decreased\", cart: userCart.cart });\n });\n \n // ðŸ›’ Get User's Cart\n-app.get(\"/cart/:userId\", authenticate, async (req, res) => {\n+router.get(\"/cart/:userId\", authenticate, async (req, res) => {\n     const { userId } = req.params;\n     const data = await readCartData();\n \n     const userCart = data.carts.find((cart) => cart.userId === parseInt(userId));\n"
                }
            ],
            "date": 1741896317994,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst fs = require(\"fs\").promises;\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\n\nconst app = express();\nconst PORT = 5000;\n\napp.use(cors());\napp.use(bodyParser.json());\n\nconst CART_FILE = \"cart.json\";\n\n// Helper function to read cart data\nconst readCartData = async () => {\n    try {\n        const data = await fs.readFile(CART_FILE, \"utf8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading cart data:\", error);\n        return { cart: [] };\n    }\n};\n\n// Helper function to write cart data\nconst writeCartData = async (data) => {\n    try {\n        await fs.writeFile(CART_FILE, JSON.stringify(data, null, 2));\n        return { message: \"Cart updated successfully\" };\n    } catch (error) {\n        console.error(\"Error writing cart data:\", error);\n        return { message: \"Error updating cart\", error };\n    }\n};\n\n// Middleware for authentication (dummy check)\nconst authenticate = (req, res, next) => {\n    const token = req.headers.authorization;\n    if (!token || !token.startsWith(\"Bearer \")) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    next();\n};\n\n// ðŸŸ¢ Increment Product Quantity\napp.put(\"/cart/:productId/increment\", authenticate, async (req, res) => {\n    const { productId } = req.params;\n    let data = await readCartData();\n\n    const productIndex = data.cart.findIndex((item) => item.productId === productId);\n    if (productIndex !== -1) {\n        data.cart[productIndex].quantity += 1;\n    } else {\n        data.cart.push({ productId, quantity: 1 });\n    }\n\n    const result = await writeCartData(data);\n    res.json({ message: \"Product quantity increased\", cart: data.cart });\n});\n\n// ðŸ”» Decrement Product Quantity\napp.put(\"/cart/:productId/decrement\", authenticate, async (req, res) => {\n    const { productId } = req.params;\n    let data = await readCartData();\n\n    const productIndex = data.cart.findIndex((item) => item.productId === productId);\n    if (productIndex === -1) {\n        return res.status(404).json({ message: \"Product not found in cart\" });\n    }\n\n    if (data.cart[productIndex].quantity > 1) {\n        data.cart[productIndex].quantity -= 1;\n    } else {\n        data.cart.splice(productIndex, 1); // Remove product if quantity is 0\n    }\n\n    const result = await writeCartData(data);\n    res.json({ message: \"Product quantity decreased\", cart: data.cart });\n});\n\n// ðŸ›’ Get Cart Items\napp.get(\"/cart\", authenticate, async (req, res) => {\n    const data = await readCartData();\n    res.json(data);\n});\n\n// Start Server\napp.listen(PORT, () => {\n    console.log(âœ… Server running on http://localhost:${PORT});\n});"
        }
    ]
}