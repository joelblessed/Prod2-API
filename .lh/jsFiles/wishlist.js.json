{
    "sourceFile": "jsFiles/wishlist.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740560347068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740560352254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const fs = require(\"fs\");\n const path = require(\"path\");\n const app = express();\n const router= express.Router();\n-const wishlistPath = path.join(__dirname, \"../jwishlist.json\");\n+const wishlistPath = path.join(__dirname, \"../jsonFileswishlist.json\");\n \n // Read wishlist.json\n router.get(\"/wishlist/\", (req, res) => {\n     fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n"
                }
            ],
            "date": 1740560347068,
            "name": "Commit-0",
            "content": "\nconst express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst app = express();\nconst router= express.Router();\nconst wishlistPath = path.join(__dirname, \"../jwishlist.json\");\n\n// Read wishlist.json\nrouter.get(\"/wishlist/\", (req, res) => {\n    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      res.json(jsonData.wishlist);\n    });\n  });\n  \n  // Add a new Product in wishlist.json\n  router.post(\"/addTowishlist/\", (req, res) => {\n    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      const product = { id: jsonData.wishlist.length + 1, ...req.body };\n      jsonData.wishlist.push(product);\n  \n      fs.writeFile(wishlistPath, JSON.stringify(jsonData, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving data\" });\n        res.status(201).json(product);\n      });\n    });\n  });\n  \n  // Utility: Read wishlist data from file\n  const readProductsWishList = () => {\n    const rawData = fs.readFileSync(wishlistPath);\n    const data = JSON.parse(rawData);\n    return data.wishlist;\n  };\n  \n  // Utility: Write updated wishlist back to file\n  const writeProductsWishList = (wishlist) => {\n    const data = { wishlist };\n    fs.writeFileSync(wishlistPath, JSON.stringify(data, null, 2));\n  };\n  // Endpoint to get a single product by id\n  router.get(\"/wishlist/:id\", (req, res) => {\n    try {\n      const wishlist = readProductsWishList();\n      const id = parseInt(req.params.id, 10);\n      const product = wishlist.find((p) => p.id === id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to read products data\" });\n    }\n  });\n  \n  // PATCH endpoint to update a product partially\n  router.patch(\"/updateWishlist/:id\", (req, res) => {\n    try {\n      const products = readProductsWishList();\n      const id = parseInt(req.params.id, 10);\n      const index = wishlist.findIndex((p) => p.id === id);\n  \n      if (index === -1) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n  \n      // Merge the existing product with the fields sent in the request body\n      const updatedProduct = { ...products[index], ...req.body };\n      products[index] = updatedProduct;\n  \n      // Write the updated products back to the file\n      writeProductsWishList(products);\n  \n      res.json(updatedProduct);\n    } catch (err) {\n      console.error(\"Error patching product:\", err);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n  \n  // *API to Delete an Item by ID wishlist*\n  router.delete(\"/wishlistRemoveItem/:id\", (req, res) => {\n    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item index\n      const itemIndex = db.wishlist.findIndex((item) => item.id === itemId);\n      if (itemIndex === -1)\n        return res.status(404).json({ message: \"Item not found\" });\n  \n      // Remove the item\n      db.wishlist.splice(itemIndex, 1);\n  \n      // Save updated data to db.json\n      fs.writeFile(wishlistPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"product deleted successfully\" });\n      });\n    });\n  });\n  \n  module.exports = router"
        }
    ]
}