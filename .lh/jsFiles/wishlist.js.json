{
    "sourceFile": "jsFiles/wishlist.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1740560347068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740560352254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const fs = require(\"fs\");\n const path = require(\"path\");\n const app = express();\n const router= express.Router();\n-const wishlistPath = path.join(__dirname, \"../jwishlist.json\");\n+const wishlistPath = path.join(__dirname, \"../jsonFileswishlist.json\");\n \n // Read wishlist.json\n router.get(\"/wishlist/\", (req, res) => {\n     fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n"
                },
                {
                    "date": 1740916102621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,112 +1,120 @@\n \n const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n const fs = require(\"fs\");\n-const path = require(\"path\");\n-const app = express();\n-const router= express.Router();\n-const wishlistPath = path.join(__dirname, \"../jsonFileswishlist.json\");\n+const router = express.Router();\n+require(\"dotenv\").config();\n \n-// Read wishlist.json\n-router.get(\"/wishlist/\", (req, res) => {\n-    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      res.json(jsonData.wishlist);\n-    });\n-  });\n-  \n-  // Add a new Product in wishlist.json\n-  router.post(\"/addTowishlist/\", (req, res) => {\n-    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      const jsonData = JSON.parse(data);\n-      const product = { id: jsonData.wishlist.length + 1, ...req.body };\n-      jsonData.wishlist.push(product);\n-  \n-      fs.writeFile(wishlistPath, JSON.stringify(jsonData, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving data\" });\n-        res.status(201).json(product);\n-      });\n-    });\n-  });\n-  \n-  // Utility: Read wishlist data from file\n-  const readProductsWishList = () => {\n-    const rawData = fs.readFileSync(wishlistPath);\n-    const data = JSON.parse(rawData);\n-    return data.wishlist;\n-  };\n-  \n-  // Utility: Write updated wishlist back to file\n-  const writeProductsWishList = (wishlist) => {\n-    const data = { wishlist };\n-    fs.writeFileSync(wishlistPath, JSON.stringify(data, null, 2));\n-  };\n-  // Endpoint to get a single product by id\n-  router.get(\"/wishlist/:id\", (req, res) => {\n+const CART_DB = \"./jsonFiles/cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+\n+// Read cart data\n+const readCartDB = () => {\n     try {\n-      const wishlist = readProductsWishList();\n-      const id = parseInt(req.params.id, 10);\n-      const product = wishlist.find((p) => p.id === id);\n-      if (!product) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-      res.json(product);\n-    } catch (err) {\n-      res.status(500).json({ error: \"Failed to read products data\" });\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return { carts: [] }; // Default to empty if error occurs\n     }\n-  });\n-  \n-  // PATCH endpoint to update a product partially\n-  router.patch(\"/updateWishlist/:id\", (req, res) => {\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n     try {\n-      const products = readProductsWishList();\n-      const id = parseInt(req.params.id, 10);\n-      const index = wishlist.findIndex((p) => p.id === id);\n-  \n-      if (index === -1) {\n-        return res.status(404).json({ error: \"Product not found\" });\n-      }\n-  \n-      // Merge the existing product with the fields sent in the request body\n-      const updatedProduct = { ...products[index], ...req.body };\n-      products[index] = updatedProduct;\n-  \n-      // Write the updated products back to the file\n-      writeProductsWishList(products);\n-  \n-      res.json(updatedProduct);\n-    } catch (err) {\n-      console.error(\"Error patching product:\", err);\n-      res.status(500).json({ error: \"Failed to update product\" });\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n\\ No newline at end of file\n+        res.status(401).json({ message: \"Invalid token\" });\n     }\n-  });\n-  \n-  // *API to Delete an Item by ID wishlist*\n-  router.delete(\"/wishlistRemoveItem/:id\", (req, res) => {\n-    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-  \n-      let db = JSON.parse(data);\n-      const itemId = parseInt(req.params.id);\n-  \n-      // Find the item index\n-      const itemIndex = db.wishlist.findIndex((item) => item.id === itemId);\n-      if (itemIndex === -1)\n-        return res.status(404).json({ message: \"Item not found\" });\n-  \n-      // Remove the item\n-      db.wishlist.splice(itemIndex, 1);\n-  \n-      // Save updated data to db.json\n-      fs.writeFile(wishlistPath, JSON.stringify(db, null, 2), (err) => {\n-        if (err) return res.status(500).json({ error: \"Error saving database\" });\n-  \n-        res.json({ message: \"product deleted successfully\" });\n-      });\n-    });\n-  });\n-  \n-  module.exports = router\n+};\n+\n+// 1. Get User Cart\n+router.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// 2. Add to Cart\n+router.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+    } else {\n+        return res.status(400).json({ message: \"Product already in cart\" });\n+    }\n+\n+    // Find user index\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = userCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: userCart });\n+    }\n+\n+    writeCartDB(db);\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+// 3. Remove from Cart\n+router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n+\n+    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n+    db.carts[userIndex].cart = updatedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n+});\n+\n+// 4. Merge Local Cart with Server Cart\n+router.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    \n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n+\n+    // Merge carts and remove duplicates\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = mergedCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: mergedCart });\n+    }\n+    \n+    writeCartDB(db);\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// 5. Clear Cart (Logout)\n+router.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740916111546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n-router.delete(\"/cart\", verifyToken, (req, res) => {\n+router.delete(\"/wish\", verifyToken, (req, res) => {\n     let db = readCartDB();\n     db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n     writeCartDB(db);\n     res.json({ message: \"Cart cleared\" });\n"
                },
                {
                    "date": 1740916125108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     res.json({ message: \"Product removed from cart\", cart: updatedCart });\n });\n \n // 4. Merge Local Cart with Server Cart\n-router.post(\"/cart/merge\", verifyToken, (req, res) => {\n+router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readCartDB();\n     \n     const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n@@ -109,9 +109,9 @@\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n-router.delete(\"/wish\", verifyToken, (req, res) => {\n+router.delete(\"/wishlist\", verifyToken, (req, res) => {\n     let db = readCartDB();\n     db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n     writeCartDB(db);\n     res.json({ message: \"Cart cleared\" });\n"
                },
                {
                    "date": 1740916136008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n // 3. Remove from Cart\n-router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+router.delete(\"/wish/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readCartDB();\n \n     const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n"
                },
                {
                    "date": 1740916150821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     res.json({ cart: userCart });\n });\n \n // 2. Add to Cart\n-router.post(\"/cart\", verifyToken, (req, res) => {\n+router.post(\"/\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readCartDB();\n@@ -73,9 +73,9 @@\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n // 3. Remove from Cart\n-router.delete(\"/wish/:productId\", verifyToken, (req, res) => {\n+router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readCartDB();\n \n     const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n"
                },
                {
                    "date": 1740916162547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,16 +38,16 @@\n     }\n };\n \n // 1. Get User Cart\n-router.get(\"/cart\", verifyToken, (req, res) => {\n+router.get(\"/wishlist\", verifyToken, (req, res) => {\n     const db = readCartDB();\n     const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n     res.json({ cart: userCart });\n });\n \n // 2. Add to Cart\n-router.post(\"/\", verifyToken, (req, res) => {\n+router.post(\"/wishlist\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readCartDB();\n"
                },
                {
                    "date": 1740918453891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"./jsonFiles/cart.json\";\n+const CART_DB = \"./jsonFiles/wish.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readCartDB = () => {\n"
                },
                {
                    "date": 1740918531153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"./jsonFiles/wish.json\";\n+const CART_DB = \"./jsonFiles/wishlist.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readCartDB = () => {\n@@ -19,9 +19,9 @@\n     }\n };\n \n // Write cart data\n-const writeCartDB = (data) => {\n+const writeDB = (data) => {\n     fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n };\n \n // Middleware: Verify Token\n@@ -68,9 +68,9 @@\n     } else {\n         db.carts.push({ userId: req.userId, cart: userCart });\n     }\n \n-    writeCartDB(db);\n+    writeDB(db);\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n // 3. Remove from Cart\n@@ -82,9 +82,9 @@\n     if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n \n     const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n     db.carts[userIndex].cart = updatedCart;\n-    writeCartDB(db);\n+    writeDB(db);\n \n     res.json({ message: \"Product removed from cart\", cart: updatedCart });\n });\n \n@@ -104,17 +104,17 @@\n     } else {\n         db.carts.push({ userId: req.userId, cart: mergedCart });\n     }\n     \n-    writeCartDB(db);\n+    writeDB(db);\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n router.delete(\"/wishlist\", verifyToken, (req, res) => {\n     let db = readCartDB();\n     db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n-    writeCartDB(db);\n+    writeDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740918536566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     }\n };\n \n // Write cart data\n-const writeDB = (data) => {\n+const writewishlistDB = (data) => {\n     fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n };\n \n // Middleware: Verify Token\n@@ -68,9 +68,9 @@\n     } else {\n         db.carts.push({ userId: req.userId, cart: userCart });\n     }\n \n-    writeDB(db);\n+    writewishlistDB(db);\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n // 3. Remove from Cart\n@@ -82,9 +82,9 @@\n     if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n \n     const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n     db.carts[userIndex].cart = updatedCart;\n-    writeDB(db);\n+    writewishlistDB(db);\n \n     res.json({ message: \"Product removed from cart\", cart: updatedCart });\n });\n \n@@ -104,17 +104,17 @@\n     } else {\n         db.carts.push({ userId: req.userId, cart: mergedCart });\n     }\n     \n-    writeDB(db);\n+    writewishlistDB(db);\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n router.delete(\"/wishlist\", verifyToken, (req, res) => {\n     let db = readCartDB();\n     db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n-    writeDB(db);\n+    writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740918561193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const CART_DB = \"./jsonFiles/wishlist.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n-const readCartDB = () => {\n+const readDB = () => {\n     try {\n         const data = fs.readFileSync(CART_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n@@ -39,9 +39,9 @@\n };\n \n // 1. Get User Cart\n router.get(\"/wishlist\", verifyToken, (req, res) => {\n-    const db = readCartDB();\n+    const db = readDB();\n     const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n     res.json({ cart: userCart });\n });\n \n@@ -49,9 +49,9 @@\n router.post(\"/wishlist\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n-    let db = readCartDB();\n+    let db = readDB();\n     let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n \n     // Prevent duplicate products\n     if (!userCart.find(item => item.id === product.id)) {\n@@ -75,9 +75,9 @@\n \n // 3. Remove from Cart\n router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n-    let db = readCartDB();\n+    let db = readDB();\n \n     const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n     if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n \n@@ -90,9 +90,9 @@\n \n // 4. Merge Local Cart with Server Cart\n router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n-    let db = readCartDB();\n+    let db = readDB();\n     \n     const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n     let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n \n@@ -110,9 +110,9 @@\n });\n \n // 5. Clear Cart (Logout)\n router.delete(\"/wishlist\", verifyToken, (req, res) => {\n-    let db = readCartDB();\n+    let db = readDB();\n     db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n     writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n"
                },
                {
                    "date": 1740918585784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,15 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"./jsonFiles/wishlist.json\";\n+const _DB = \"./jsonFiles/wishlist.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n-const readDB = () => {\n+const readwishlistDB = () => {\n     try {\n-        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        const data = fs.readFileSync(_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n         console.error(\"Error reading cart database:\", error);\n         return { carts: [] }; // Default to empty if error occurs\n@@ -20,9 +20,9 @@\n };\n \n // Write cart data\n const writewishlistDB = (data) => {\n-    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+    fs.writeFileSync(_DB, JSON.stringify(data, null, 2));\n };\n \n // Middleware: Verify Token\n const verifyToken = (req, res, next) => {\n@@ -39,9 +39,9 @@\n };\n \n // 1. Get User Cart\n router.get(\"/wishlist\", verifyToken, (req, res) => {\n-    const db = readDB();\n+    const db = readwishlistDB();\n     const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n     res.json({ cart: userCart });\n });\n \n@@ -49,9 +49,9 @@\n router.post(\"/wishlist\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n-    let db = readDB();\n+    let db = readwishlistDB();\n     let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n \n     // Prevent duplicate products\n     if (!userCart.find(item => item.id === product.id)) {\n@@ -75,9 +75,9 @@\n \n // 3. Remove from Cart\n router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n-    let db = readDB();\n+    let db = readwishlistDB();\n \n     const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n     if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n \n@@ -90,9 +90,9 @@\n \n // 4. Merge Local Cart with Server Cart\n router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n-    let db = readDB();\n+    let db = readwishlistDB();\n     \n     const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n     let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n \n@@ -110,9 +110,9 @@\n });\n \n // 5. Clear Cart (Logout)\n router.delete(\"/wishlist\", verifyToken, (req, res) => {\n-    let db = readDB();\n+    let db = readwishlistDB();\n     db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n     writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n"
                },
                {
                    "date": 1740918592928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,15 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const _DB = \"./jsonFiles/wishlist.json\";\n+const Wish_DB = \"./jsonFiles/wishlist.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readwishlistDB = () => {\n     try {\n-        const data = fs.readFileSync(_DB, \"utf8\");\n+        const data = fs.readFileSync(Wish_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n         console.error(\"Error reading cart database:\", error);\n         return { carts: [] }; // Default to empty if error occurs\n@@ -20,9 +20,9 @@\n };\n \n // Write cart data\n const writewishlistDB = (data) => {\n-    fs.writeFileSync(_DB, JSON.stringify(data, null, 2));\n+    fs.writeFileSync(Wish_DB, JSON.stringify(data, null, 2));\n };\n \n // Middleware: Verify Token\n const verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1740918620941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,15 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const Wish_DB = \"./jsonFiles/wishlist.json\";\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+const WishList_DB = \"./jsonFiles/wishlist.json\";\n+const JWT_SECRET = process.env.JWT_SECRET \n \n // Read cart data\n const readwishlistDB = () => {\n     try {\n-        const data = fs.readFileSync(Wish_DB, \"utf8\");\n+        const data = fs.readFileSync(WishList_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n         console.error(\"Error reading cart database:\", error);\n         return { carts: [] }; // Default to empty if error occurs\n@@ -20,9 +20,9 @@\n };\n \n // Write cart data\n const writewishlistDB = (data) => {\n-    fs.writeFileSync(Wish_DB, JSON.stringify(data, null, 2));\n+    fs.writeFileSync(WishList_DB, JSON.stringify(data, null, 2));\n };\n \n // Middleware: Verify Token\n const verifyToken = (req, res, next) => {\n"
                },
                {
                    "date": 1740920019406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const router = express.Router();\n require(\"dotenv\").config();\n \n const WishList_DB = \"./jsonFiles/wishlist.json\";\n-const JWT_SECRET = process.env.JWT_SECRET \n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readwishlistDB = () => {\n     try {\n"
                },
                {
                    "date": 1740920057212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         const data = fs.readFileSync(WishList_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n         console.error(\"Error reading cart database:\", error);\n-        return { carts: [] }; // Default to empty if error occurs\n+        return { wish: [] }; // Default to empty if error occurs\n     }\n };\n \n // Write cart data\n@@ -40,9 +40,9 @@\n \n // 1. Get User Cart\n router.get(\"/wishlist\", verifyToken, (req, res) => {\n     const db = readwishlistDB();\n-    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    const userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n     res.json({ cart: userCart });\n });\n \n // 2. Add to Cart\n@@ -50,9 +50,9 @@\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readwishlistDB();\n-    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    let userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n \n     // Prevent duplicate products\n     if (!userCart.find(item => item.id === product.id)) {\n         userCart.push(product);\n@@ -60,14 +60,14 @@\n         return res.status(400).json({ message: \"Product already in cart\" });\n     }\n \n     // Find user index\n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n \n     if (userIndex !== -1) {\n-        db.carts[userIndex].cart = userCart;\n+        db.wish[userIndex].cart = userCart;\n     } else {\n-        db.carts.push({ userId: req.userId, cart: userCart });\n+        db.wish.push({ userId: req.userId, cart: userCart });\n     }\n \n     writewishlistDB(db);\n     res.json({ message: \"Product added to cart\", cart: userCart });\n@@ -77,13 +77,13 @@\n router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readwishlistDB();\n \n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n     if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n \n-    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n-    db.carts[userIndex].cart = updatedCart;\n+    const updatedCart = db.wish[userIndex].cart.filter(item => item.id !== parseInt(productId));\n+    db.wish[userIndex].cart = updatedCart;\n     writewishlistDB(db);\n \n     res.json({ message: \"Product removed from cart\", cart: updatedCart });\n });\n@@ -92,18 +92,18 @@\n router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readwishlistDB();\n     \n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n+    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.wish[userIndex].cart : [];\n \n-    // Merge carts and remove duplicates\n+    // Merge wish and remove duplicates\n     const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n \n     if (userIndex !== -1) {\n-        db.carts[userIndex].cart = mergedCart;\n+        db.wish[userIndex].cart = mergedCart;\n     } else {\n-        db.carts.push({ userId: req.userId, cart: mergedCart });\n+        db.wish.push({ userId: req.userId, cart: mergedCart });\n     }\n     \n     writewishlistDB(db);\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n@@ -111,9 +111,9 @@\n \n // 5. Clear Cart (Logout)\n router.delete(\"/wishlist\", verifyToken, (req, res) => {\n     let db = readwishlistDB();\n-    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n+    db.wish = db.wish.filter(cart => cart.userId !== req.userId);\n     writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n"
                },
                {
                    "date": 1740920213165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const WishList_DB = \"./jsonFiles/wishlist.json\";\n+const WishList_DB = \"./jsonFiles/wishlists.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n // Read cart data\n const readwishlistDB = () => {\n@@ -14,9 +14,9 @@\n         const data = fs.readFileSync(WishList_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n         console.error(\"Error reading cart database:\", error);\n-        return { wish: [] }; // Default to empty if error occurs\n+        return { wishlists: [] }; // Default to empty if error occurs\n     }\n };\n \n // Write cart data\n@@ -38,21 +38,21 @@\n     }\n };\n \n // 1. Get User Cart\n-router.get(\"/wishlist\", verifyToken, (req, res) => {\n+router.get(\"/wishlists\", verifyToken, (req, res) => {\n     const db = readwishlistDB();\n-    const userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n+    const userCart = db.wishlists.find(cart => cart.userId === req.userId)?.cart || [];\n     res.json({ cart: userCart });\n });\n \n // 2. Add to Cart\n-router.post(\"/wishlist\", verifyToken, (req, res) => {\n+router.post(\"/wishlists\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readwishlistDB();\n-    let userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n+    let userCart = db.wishlists.find(cart => cart.userId === req.userId)?.cart || [];\n \n     // Prevent duplicate products\n     if (!userCart.find(item => item.id === product.id)) {\n         userCart.push(product);\n@@ -60,60 +60,60 @@\n         return res.status(400).json({ message: \"Product already in cart\" });\n     }\n \n     // Find user index\n-    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n \n     if (userIndex !== -1) {\n-        db.wish[userIndex].cart = userCart;\n+        db.wishlists[userIndex].cart = userCart;\n     } else {\n-        db.wish.push({ userId: req.userId, cart: userCart });\n+        db.wishlists.push({ userId: req.userId, cart: userCart });\n     }\n \n     writewishlistDB(db);\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n // 3. Remove from Cart\n-router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n+router.delete(\"/wishlists/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readwishlistDB();\n \n-    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n     if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n \n-    const updatedCart = db.wish[userIndex].cart.filter(item => item.id !== parseInt(productId));\n-    db.wish[userIndex].cart = updatedCart;\n+    const updatedCart = db.wishlists[userIndex].cart.filter(item => item.id !== parseInt(productId));\n+    db.wishlists[userIndex].cart = updatedCart;\n     writewishlistDB(db);\n \n     res.json({ message: \"Product removed from cart\", cart: updatedCart });\n });\n \n // 4. Merge Local Cart with Server Cart\n-router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n+router.post(\"/wishlists/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readwishlistDB();\n     \n-    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.wish[userIndex].cart : [];\n+    const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.wishlists[userIndex].cart : [];\n \n-    // Merge wish and remove duplicates\n+    // Merge wishlists and remove duplicates\n     const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n \n     if (userIndex !== -1) {\n-        db.wish[userIndex].cart = mergedCart;\n+        db.wishlists[userIndex].cart = mergedCart;\n     } else {\n-        db.wish.push({ userId: req.userId, cart: mergedCart });\n+        db.wishlists.push({ userId: req.userId, cart: mergedCart });\n     }\n     \n     writewishlistDB(db);\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n-router.delete(\"/wishlist\", verifyToken, (req, res) => {\n+router.delete(\"/wishlists\", verifyToken, (req, res) => {\n     let db = readwishlistDB();\n-    db.wish = db.wish.filter(cart => cart.userId !== req.userId);\n+    db.wishlists = db.wishlists.filter(cart => cart.userId !== req.userId);\n     writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n"
                },
                {
                    "date": 1740920224397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     }\n };\n \n // 1. Get User Cart\n-router.get(\"/wishlists\", verifyToken, (req, res) => {\n+router.get(\"/wishlist\", verifyToken, (req, res) => {\n     const db = readwishlistDB();\n     const userCart = db.wishlists.find(cart => cart.userId === req.userId)?.cart || [];\n     res.json({ cart: userCart });\n });\n"
                },
                {
                    "date": 1740920242693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     res.json({ cart: userCart });\n });\n \n // 2. Add to Cart\n-router.post(\"/wishlists\", verifyToken, (req, res) => {\n+router.post(\"/wishlist\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readwishlistDB();\n@@ -73,9 +73,9 @@\n     res.json({ message: \"Product added to cart\", cart: userCart });\n });\n \n // 3. Remove from Cart\n-router.delete(\"/wishlists/:productId\", verifyToken, (req, res) => {\n+router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readwishlistDB();\n \n     const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n"
                },
                {
                    "date": 1740920248480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     res.json({ message: \"Product removed from cart\", cart: updatedCart });\n });\n \n // 4. Merge Local Cart with Server Cart\n-router.post(\"/wishlists/merge\", verifyToken, (req, res) => {\n+router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readwishlistDB();\n     \n     const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n"
                },
                {
                    "date": 1740920256544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n-router.delete(\"/wishlists\", verifyToken, (req, res) => {\n+router.delete(\"/wishlist\", verifyToken, (req, res) => {\n     let db = readwishlistDB();\n     db.wishlists = db.wishlists.filter(cart => cart.userId !== req.userId);\n     writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n"
                },
                {
                    "date": 1740920278374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,20 +7,20 @@\n \n const WishList_DB = \"./jsonFiles/wishlists.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n-// Read cart data\n+// Read wish data\n const readwishlistDB = () => {\n     try {\n         const data = fs.readFileSync(WishList_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n-        console.error(\"Error reading cart database:\", error);\n+        console.error(\"Error reading wish database:\", error);\n         return { wishlists: [] }; // Default to empty if error occurs\n     }\n };\n \n-// Write cart data\n+// Write wish data\n const writewishlistDB = (data) => {\n     fs.writeFileSync(WishList_DB, JSON.stringify(data, null, 2));\n };\n \n@@ -40,80 +40,80 @@\n \n // 1. Get User Cart\n router.get(\"/wishlist\", verifyToken, (req, res) => {\n     const db = readwishlistDB();\n-    const userCart = db.wishlists.find(cart => cart.userId === req.userId)?.cart || [];\n-    res.json({ cart: userCart });\n+    const userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n+    res.json({ wish: userCart });\n });\n \n // 2. Add to Cart\n router.post(\"/wishlist\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readwishlistDB();\n-    let userCart = db.wishlists.find(cart => cart.userId === req.userId)?.cart || [];\n+    let userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n \n     // Prevent duplicate products\n     if (!userCart.find(item => item.id === product.id)) {\n         userCart.push(product);\n     } else {\n-        return res.status(400).json({ message: \"Product already in cart\" });\n+        return res.status(400).json({ message: \"Product already in wish\" });\n     }\n \n     // Find user index\n-    const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n \n     if (userIndex !== -1) {\n-        db.wishlists[userIndex].cart = userCart;\n+        db.wishlists[userIndex].wish = userCart;\n     } else {\n-        db.wishlists.push({ userId: req.userId, cart: userCart });\n+        db.wishlists.push({ userId: req.userId, wish: userCart });\n     }\n \n     writewishlistDB(db);\n-    res.json({ message: \"Product added to cart\", cart: userCart });\n+    res.json({ message: \"Product added to wish\", wish: userCart });\n });\n \n // 3. Remove from Cart\n router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readwishlistDB();\n \n-    const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n-    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n+    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n+    if (userIndex === -1) return res.status(404).json({ message: \"User wish not found\" });\n \n-    const updatedCart = db.wishlists[userIndex].cart.filter(item => item.id !== parseInt(productId));\n-    db.wishlists[userIndex].cart = updatedCart;\n+    const updatedCart = db.wishlists[userIndex].wish.filter(item => item.id !== parseInt(productId));\n+    db.wishlists[userIndex].wish = updatedCart;\n     writewishlistDB(db);\n \n-    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n+    res.json({ message: \"Product removed from wish\", wish: updatedCart });\n });\n \n // 4. Merge Local Cart with Server Cart\n router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readwishlistDB();\n     \n-    const userIndex = db.wishlists.findIndex(cart => cart.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.wishlists[userIndex].cart : [];\n+    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.wishlists[userIndex].wish : [];\n \n     // Merge wishlists and remove duplicates\n     const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n \n     if (userIndex !== -1) {\n-        db.wishlists[userIndex].cart = mergedCart;\n+        db.wishlists[userIndex].wish = mergedCart;\n     } else {\n-        db.wishlists.push({ userId: req.userId, cart: mergedCart });\n+        db.wishlists.push({ userId: req.userId, wish: mergedCart });\n     }\n     \n     writewishlistDB(db);\n-    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+    res.json({ message: \"Cart merged successfully\", wish: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n router.delete(\"/wishlist\", verifyToken, (req, res) => {\n     let db = readwishlistDB();\n-    db.wishlists = db.wishlists.filter(cart => cart.userId !== req.userId);\n+    db.wishlists = db.wishlists.filter(wish => wish.userId !== req.userId);\n     writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n"
                },
                {
                    "date": 1740920311838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,20 +7,20 @@\n \n const WishList_DB = \"./jsonFiles/wishlists.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n-// Read wish data\n+// Read wishlist data\n const readwishlistDB = () => {\n     try {\n         const data = fs.readFileSync(WishList_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n-        console.error(\"Error reading wish database:\", error);\n+        console.error(\"Error reading wishlist database:\", error);\n         return { wishlists: [] }; // Default to empty if error occurs\n     }\n };\n \n-// Write wish data\n+// Write wishlist data\n const writewishlistDB = (data) => {\n     fs.writeFileSync(WishList_DB, JSON.stringify(data, null, 2));\n };\n \n@@ -40,80 +40,80 @@\n \n // 1. Get User Cart\n router.get(\"/wishlist\", verifyToken, (req, res) => {\n     const db = readwishlistDB();\n-    const userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n-    res.json({ wish: userCart });\n+    const user = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n+    res.json({ wishlist: user });\n });\n \n // 2. Add to Cart\n router.post(\"/wishlist\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readwishlistDB();\n-    let userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n+    let user = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n \n     // Prevent duplicate products\n-    if (!userCart.find(item => item.id === product.id)) {\n-        userCart.push(product);\n+    if (!user.find(item => item.id === product.id)) {\n+        user.push(product);\n     } else {\n-        return res.status(400).json({ message: \"Product already in wish\" });\n+        return res.status(400).json({ message: \"Product already in wishlist\" });\n     }\n \n     // Find user index\n-    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n+    const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n \n     if (userIndex !== -1) {\n-        db.wishlists[userIndex].wish = userCart;\n+        db.wishlists[userIndex].wishlist = user;\n     } else {\n-        db.wishlists.push({ userId: req.userId, wish: userCart });\n+        db.wishlists.push({ userId: req.userId, wishlist: user });\n     }\n \n     writewishlistDB(db);\n-    res.json({ message: \"Product added to wish\", wish: userCart });\n+    res.json({ message: \"Product added to wishlist\", wishlist: user });\n });\n \n // 3. Remove from Cart\n router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readwishlistDB();\n \n-    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n-    if (userIndex === -1) return res.status(404).json({ message: \"User wish not found\" });\n+    const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n+    if (userIndex === -1) return res.status(404).json({ message: \"User wishlist not found\" });\n \n-    const updatedCart = db.wishlists[userIndex].wish.filter(item => item.id !== parseInt(productId));\n-    db.wishlists[userIndex].wish = updatedCart;\n+    const updatedCart = db.wishlists[userIndex].wishlist.filter(item => item.id !== parseInt(productId));\n+    db.wishlists[userIndex].wishlist = updatedCart;\n     writewishlistDB(db);\n \n-    res.json({ message: \"Product removed from wish\", wish: updatedCart });\n+    res.json({ message: \"Product removed from wishlist\", wishlist: updatedCart });\n });\n \n // 4. Merge Local Cart with Server Cart\n router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readwishlistDB();\n     \n-    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.wishlists[userIndex].wish : [];\n+    const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n+    let user = userIndex !== -1 ? db.wishlists[userIndex].wishlist : [];\n \n     // Merge wishlists and remove duplicates\n-    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+    const mergedCart = [...new Map([...localCart, ...user].map(item => [item.id, item])).values()];\n \n     if (userIndex !== -1) {\n-        db.wishlists[userIndex].wish = mergedCart;\n+        db.wishlists[userIndex].wishlist = mergedCart;\n     } else {\n-        db.wishlists.push({ userId: req.userId, wish: mergedCart });\n+        db.wishlists.push({ userId: req.userId, wishlist: mergedCart });\n     }\n     \n     writewishlistDB(db);\n-    res.json({ message: \"Cart merged successfully\", wish: mergedCart });\n+    res.json({ message: \"Cart merged successfully\", wishlist: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n router.delete(\"/wishlist\", verifyToken, (req, res) => {\n     let db = readwishlistDB();\n-    db.wishlists = db.wishlists.filter(wish => wish.userId !== req.userId);\n+    db.wishlists = db.wishlists.filter(wishlist => wishlist.userId !== req.userId);\n     writewishlistDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n"
                },
                {
                    "date": 1740920317230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,38 +40,38 @@\n \n // 1. Get User Cart\n router.get(\"/wishlist\", verifyToken, (req, res) => {\n     const db = readwishlistDB();\n-    const user = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n-    res.json({ wishlist: user });\n+    const userWish = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n+    res.json({ wishlist: userWish });\n });\n \n // 2. Add to Cart\n router.post(\"/wishlist\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readwishlistDB();\n-    let user = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n+    let userWish = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n \n     // Prevent duplicate products\n-    if (!user.find(item => item.id === product.id)) {\n-        user.push(product);\n+    if (!userWish.find(item => item.id === product.id)) {\n+        userWish.push(product);\n     } else {\n         return res.status(400).json({ message: \"Product already in wishlist\" });\n     }\n \n     // Find user index\n     const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n \n     if (userIndex !== -1) {\n-        db.wishlists[userIndex].wishlist = user;\n+        db.wishlists[userIndex].wishlist = userWish;\n     } else {\n-        db.wishlists.push({ userId: req.userId, wishlist: user });\n+        db.wishlists.push({ userId: req.userId, wishlist: userWish });\n     }\n \n     writewishlistDB(db);\n-    res.json({ message: \"Product added to wishlist\", wishlist: user });\n+    res.json({ message: \"Product added to wishlist\", wishlist: userWish });\n });\n \n // 3. Remove from Cart\n router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n@@ -93,12 +93,12 @@\n     const { localCart } = req.body;\n     let db = readwishlistDB();\n     \n     const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n-    let user = userIndex !== -1 ? db.wishlists[userIndex].wishlist : [];\n+    let userWish = userIndex !== -1 ? db.wishlists[userIndex].wishlist : [];\n \n     // Merge wishlists and remove duplicates\n-    const mergedCart = [...new Map([...localCart, ...user].map(item => [item.id, item])).values()];\n+    const mergedCart = [...new Map([...localCart, ...userWish].map(item => [item.id, item])).values()];\n \n     if (userIndex !== -1) {\n         db.wishlists[userIndex].wishlist = mergedCart;\n     } else {\n"
                },
                {
                    "date": 1740920512271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,120 +0,0 @@\n-\n-const express = require(\"express\");\n-const jwt = require(\"jsonwebtoken\");\n-const fs = require(\"fs\");\n-const router = express.Router();\n-require(\"dotenv\").config();\n-\n-const WishList_DB = \"./jsonFiles/wishlists.json\";\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n-\n-// Read wishlist data\n-const readwishlistDB = () => {\n-    try {\n-        const data = fs.readFileSync(WishList_DB, \"utf8\");\n-        return JSON.parse(data);\n-    } catch (error) {\n-        console.error(\"Error reading wishlist database:\", error);\n-        return { wishlists: [] }; // Default to empty if error occurs\n-    }\n-};\n-\n-// Write wishlist data\n-const writewishlistDB = (data) => {\n-    fs.writeFileSync(WishList_DB, JSON.stringify(data, null, 2));\n-};\n-\n-// Middleware: Verify Token\n-const verifyToken = (req, res, next) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        req.userId = decoded.userId;\n-        next();\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n-};\n-\n-// 1. Get User Cart\n-router.get(\"/wishlist\", verifyToken, (req, res) => {\n-    const db = readwishlistDB();\n-    const userWish = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n-    res.json({ wishlist: userWish });\n-});\n-\n-// 2. Add to Cart\n-router.post(\"/wishlist\", verifyToken, (req, res) => {\n-    const { product } = req.body;\n-    if (!product) return res.status(400).json({ message: \"Product is required\" });\n-\n-    let db = readwishlistDB();\n-    let userWish = db.wishlists.find(wishlist => wishlist.userId === req.userId)?.wishlist || [];\n-\n-    // Prevent duplicate products\n-    if (!userWish.find(item => item.id === product.id)) {\n-        userWish.push(product);\n-    } else {\n-        return res.status(400).json({ message: \"Product already in wishlist\" });\n-    }\n-\n-    // Find user index\n-    const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n-\n-    if (userIndex !== -1) {\n-        db.wishlists[userIndex].wishlist = userWish;\n-    } else {\n-        db.wishlists.push({ userId: req.userId, wishlist: userWish });\n-    }\n-\n-    writewishlistDB(db);\n-    res.json({ message: \"Product added to wishlist\", wishlist: userWish });\n-});\n-\n-// 3. Remove from Cart\n-router.delete(\"/wishlist/:productId\", verifyToken, (req, res) => {\n-    const { productId } = req.params;\n-    let db = readwishlistDB();\n-\n-    const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n-    if (userIndex === -1) return res.status(404).json({ message: \"User wishlist not found\" });\n-\n-    const updatedCart = db.wishlists[userIndex].wishlist.filter(item => item.id !== parseInt(productId));\n-    db.wishlists[userIndex].wishlist = updatedCart;\n-    writewishlistDB(db);\n-\n-    res.json({ message: \"Product removed from wishlist\", wishlist: updatedCart });\n-});\n-\n-// 4. Merge Local Cart with Server Cart\n-router.post(\"/wishlist/merge\", verifyToken, (req, res) => {\n-    const { localCart } = req.body;\n-    let db = readwishlistDB();\n-    \n-    const userIndex = db.wishlists.findIndex(wishlist => wishlist.userId === req.userId);\n-    let userWish = userIndex !== -1 ? db.wishlists[userIndex].wishlist : [];\n-\n-    // Merge wishlists and remove duplicates\n-    const mergedCart = [...new Map([...localCart, ...userWish].map(item => [item.id, item])).values()];\n-\n-    if (userIndex !== -1) {\n-        db.wishlists[userIndex].wishlist = mergedCart;\n-    } else {\n-        db.wishlists.push({ userId: req.userId, wishlist: mergedCart });\n-    }\n-    \n-    writewishlistDB(db);\n-    res.json({ message: \"Cart merged successfully\", wishlist: mergedCart });\n-});\n-\n-// 5. Clear Cart (Logout)\n-router.delete(\"/wishlist\", verifyToken, (req, res) => {\n-    let db = readwishlistDB();\n-    db.wishlists = db.wishlists.filter(wishlist => wishlist.userId !== req.userId);\n-    writewishlistDB(db);\n-    res.json({ message: \"Cart cleared\" });\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920529944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+\n+const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const fs = require(\"fs\");\n+const router = express.Router();\n+require(\"dotenv\").config();\n+\n+const CART_DB = \"./jsonFiles/cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+\n+// Read cart data\n+const readCartDB = () => {\n+    try {\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return { carts: [] }; // Default to empty if error occurs\n+    }\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+};\n+\n+// 1. Get User Cart\n+router.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// 2. Add to Cart\n+router.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+    } else {\n+        return res.status(400).json({ message: \"Product already in cart\" });\n+    }\n+\n+    // Find user index\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = userCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: userCart });\n+    }\n+\n+    writeCartDB(db);\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+// 3. Remove from Cart\n+router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+\n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n+\n+    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n+    db.carts[userIndex].cart = updatedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n+});\n+\n+// 4. Merge Local Cart with Server Cart\n+router.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    \n+    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n+\n+    // Merge carts and remove duplicates\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+\n+    if (userIndex !== -1) {\n+        db.carts[userIndex].cart = mergedCart;\n+    } else {\n+        db.carts.push({ userId: req.userId, cart: mergedCart });\n+    }\n+    \n+    writeCartDB(db);\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// 5. Clear Cart (Logout)\n+router.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920626507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         const data = fs.readFileSync(CART_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n         console.error(\"Error reading cart database:\", error);\n-        return { carts: [] }; // Default to empty if error occurs\n+        return { wish: [] }; // Default to empty if error occurs\n     }\n };\n \n // Write cart data\n@@ -40,9 +40,9 @@\n \n // 1. Get User Cart\n router.get(\"/cart\", verifyToken, (req, res) => {\n     const db = readCartDB();\n-    const userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    const userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n     res.json({ cart: userCart });\n });\n \n // 2. Add to Cart\n@@ -50,9 +50,9 @@\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readCartDB();\n-    let userCart = db.carts.find(cart => cart.userId === req.userId)?.cart || [];\n+    let userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n \n     // Prevent duplicate products\n     if (!userCart.find(item => item.id === product.id)) {\n         userCart.push(product);\n@@ -60,14 +60,14 @@\n         return res.status(400).json({ message: \"Product already in cart\" });\n     }\n \n     // Find user index\n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n \n     if (userIndex !== -1) {\n-        db.carts[userIndex].cart = userCart;\n+        db.wish[userIndex].cart = userCart;\n     } else {\n-        db.carts.push({ userId: req.userId, cart: userCart });\n+        db.wish.push({ userId: req.userId, cart: userCart });\n     }\n \n     writeCartDB(db);\n     res.json({ message: \"Product added to cart\", cart: userCart });\n@@ -77,13 +77,13 @@\n router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readCartDB();\n \n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n     if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n \n-    const updatedCart = db.carts[userIndex].cart.filter(item => item.id !== parseInt(productId));\n-    db.carts[userIndex].cart = updatedCart;\n+    const updatedCart = db.wish[userIndex].cart.filter(item => item.id !== parseInt(productId));\n+    db.wish[userIndex].cart = updatedCart;\n     writeCartDB(db);\n \n     res.json({ message: \"Product removed from cart\", cart: updatedCart });\n });\n@@ -92,18 +92,18 @@\n router.post(\"/cart/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readCartDB();\n     \n-    const userIndex = db.carts.findIndex(cart => cart.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.carts[userIndex].cart : [];\n+    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.wish[userIndex].cart : [];\n \n-    // Merge carts and remove duplicates\n+    // Merge wish and remove duplicates\n     const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n \n     if (userIndex !== -1) {\n-        db.carts[userIndex].cart = mergedCart;\n+        db.wish[userIndex].cart = mergedCart;\n     } else {\n-        db.carts.push({ userId: req.userId, cart: mergedCart });\n+        db.wish.push({ userId: req.userId, cart: mergedCart });\n     }\n     \n     writeCartDB(db);\n     res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n@@ -111,9 +111,9 @@\n \n // 5. Clear Cart (Logout)\n router.delete(\"/cart\", verifyToken, (req, res) => {\n     let db = readCartDB();\n-    db.carts = db.carts.filter(cart => cart.userId !== req.userId);\n+    db.wish = db.wish.filter(cart => cart.userId !== req.userId);\n     writeCartDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n"
                },
                {
                    "date": 1740920656645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,23 @@\n const fs = require(\"fs\");\n const router = express.Router();\n require(\"dotenv\").config();\n \n-const CART_DB = \"./jsonFiles/cart.json\";\n+const CART_DB = \"./jsonFiles/wish.json\";\n const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n \n-// Read cart data\n+// Read wish data\n const readCartDB = () => {\n     try {\n         const data = fs.readFileSync(CART_DB, \"utf8\");\n         return JSON.parse(data);\n     } catch (error) {\n-        console.error(\"Error reading cart database:\", error);\n-        return { wish: [] }; // Default to empty if error occurs\n+        console.error(\"Error reading wish database:\", error);\n+        return { wishlists: [] }; // Default to empty if error occurs\n     }\n };\n \n-// Write cart data\n+// Write wish data\n const writeCartDB = (data) => {\n     fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n };\n \n@@ -38,82 +38,82 @@\n     }\n };\n \n // 1. Get User Cart\n-router.get(\"/cart\", verifyToken, (req, res) => {\n+router.get(\"/wish\", verifyToken, (req, res) => {\n     const db = readCartDB();\n-    const userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n-    res.json({ cart: userCart });\n+    const userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n+    res.json({ wish: userCart });\n });\n \n // 2. Add to Cart\n-router.post(\"/cart\", verifyToken, (req, res) => {\n+router.post(\"/wish\", verifyToken, (req, res) => {\n     const { product } = req.body;\n     if (!product) return res.status(400).json({ message: \"Product is required\" });\n \n     let db = readCartDB();\n-    let userCart = db.wish.find(cart => cart.userId === req.userId)?.cart || [];\n+    let userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n \n     // Prevent duplicate products\n     if (!userCart.find(item => item.id === product.id)) {\n         userCart.push(product);\n     } else {\n-        return res.status(400).json({ message: \"Product already in cart\" });\n+        return res.status(400).json({ message: \"Product already in wish\" });\n     }\n \n     // Find user index\n-    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n+    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n \n     if (userIndex !== -1) {\n-        db.wish[userIndex].cart = userCart;\n+        db.wishlists[userIndex].wish = userCart;\n     } else {\n-        db.wish.push({ userId: req.userId, cart: userCart });\n+        db.wishlists.push({ userId: req.userId, wish: userCart });\n     }\n \n     writeCartDB(db);\n-    res.json({ message: \"Product added to cart\", cart: userCart });\n+    res.json({ message: \"Product added to wish\", wish: userCart });\n });\n \n // 3. Remove from Cart\n-router.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+router.delete(\"/wish/:productId\", verifyToken, (req, res) => {\n     const { productId } = req.params;\n     let db = readCartDB();\n \n-    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n-    if (userIndex === -1) return res.status(404).json({ message: \"User cart not found\" });\n+    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n+    if (userIndex === -1) return res.status(404).json({ message: \"User wish not found\" });\n \n-    const updatedCart = db.wish[userIndex].cart.filter(item => item.id !== parseInt(productId));\n-    db.wish[userIndex].cart = updatedCart;\n+    const updatedCart = db.wishlists[userIndex].wish.filter(item => item.id !== parseInt(productId));\n+    db.wishlists[userIndex].wish = updatedCart;\n     writeCartDB(db);\n \n-    res.json({ message: \"Product removed from cart\", cart: updatedCart });\n+    res.json({ message: \"Product removed from wish\", wish: updatedCart });\n });\n \n // 4. Merge Local Cart with Server Cart\n-router.post(\"/cart/merge\", verifyToken, (req, res) => {\n+router.post(\"/wish/merge\", verifyToken, (req, res) => {\n     const { localCart } = req.body;\n     let db = readCartDB();\n     \n-    const userIndex = db.wish.findIndex(cart => cart.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.wish[userIndex].cart : [];\n+    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n+    let userCart = userIndex !== -1 ? db.wishlists[userIndex].wish : [];\n \n-    // Merge wish and remove duplicates\n+    // Merge wishlists and remove duplicates\n     const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n \n     if (userIndex !== -1) {\n-        db.wish[userIndex].cart = mergedCart;\n+        db.wishlists[userIndex].wish = mergedCart;\n     } else {\n-        db.wish.push({ userId: req.userId, cart: mergedCart });\n+        db.wishlists.push({ userId: req.userId, wish: mergedCart });\n     }\n     \n     writeCartDB(db);\n-    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+    res.json({ message: \"Cart merged successfully\", wish: mergedCart });\n });\n \n // 5. Clear Cart (Logout)\n-router.delete(\"/cart\", verifyToken, (req, res) => {\n+router.delete(\"/wish\", verifyToken, (req, res) => {\n     let db = readCartDB();\n-    db.wish = db.wish.filter(cart => cart.userId !== req.userId);\n+    db.wishlists = db.wishlists.filter(wish => wish.userId !== req.userId);\n     writeCartDB(db);\n     res.json({ message: \"Cart cleared\" });\n });\n \n"
                },
                {
                    "date": 1742921542528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,120 +1,74 @@\n-\n const express = require(\"express\");\n-const jwt = require(\"jsonwebtoken\");\n const fs = require(\"fs\");\n-const router = express.Router();\n-require(\"dotenv\").config();\n+const cors = require(\"cors\");\n+const bodyParser = require(\"body-parser\");\n \n-const CART_DB = \"./jsonFiles/wish.json\";\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+const app = express();\n+const PORT = 5000;\n+const wishlistFilePath = \"./wishlist.json\";\n \n-// Read wish data\n-const readCartDB = () => {\n-    try {\n-        const data = fs.readFileSync(CART_DB, \"utf8\");\n-        return JSON.parse(data);\n-    } catch (error) {\n-        console.error(\"Error reading wish database:\", error);\n-        return { wishlists: [] }; // Default to empty if error occurs\n-    }\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+// Middleware to check authentication token\n+const authenticateToken = (req, res, next) => {\n+  const token = req.headers.authorization;\n+  if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+  next();\n };\n \n-// Write wish data\n-const writeCartDB = (data) => {\n-    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+// Read wishlist from file\n+const getWishlist = () => {\n+  const data = fs.readFileSync(wishlistFilePath);\n+  return JSON.parse(data).wishlist;\n };\n \n-// Middleware: Verify Token\n-const verifyToken = (req, res, next) => {\n-    const token = req.headers.authorization?.split(\" \")[1];\n-    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-    try {\n-        const decoded = jwt.verify(token, JWT_SECRET);\n-        req.userId = decoded.userId;\n-        next();\n-    } catch (error) {\n-        res.status(401).json({ message: \"Invalid token\" });\n-    }\n+// Write updated wishlist to file\n+const saveWishlist = (wishlist) => {\n+  fs.writeFileSync(wishlistFilePath, JSON.stringify({ wishlist }, null, 2));\n };\n \n-// 1. Get User Cart\n-router.get(\"/wish\", verifyToken, (req, res) => {\n-    const db = readCartDB();\n-    const userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n-    res.json({ wish: userCart });\n+// *1. Fetch wishlist for a user*\n+app.get(\"/wishlist/:userId\", authenticateToken, (req, res) => {\n+  const { userId } = req.params;\n+  const wishlist = getWishlist().find((w) => w.userId == userId);\n+  res.json(wishlist ? wishlist.cart : []);\n });\n \n-// 2. Add to Cart\n-router.post(\"/wish\", verifyToken, (req, res) => {\n-    const { product } = req.body;\n-    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+// *2. Add item to wishlist*\n+app.post(\"/wishlist/add\", authenticateToken, (req, res) => {\n+  const { userId, product } = req.body;\n+  let wishlist = getWishlist();\n+  let userWishlist = wishlist.find((w) => w.userId == userId);\n \n-    let db = readCartDB();\n-    let userCart = db.wishlists.find(wish => wish.userId === req.userId)?.wish || [];\n-\n-    // Prevent duplicate products\n-    if (!userCart.find(item => item.id === product.id)) {\n-        userCart.push(product);\n-    } else {\n-        return res.status(400).json({ message: \"Product already in wish\" });\n+  if (!userWishlist) {\n+    userWishlist = { userId, cart: [product] };\n+    wishlist.push(userWishlist);\n+  } else {\n+    if (!userWishlist.cart.find((item) => item.id === product.id)) {\n+      userWishlist.cart.push(product);\n     }\n+  }\n \n-    // Find user index\n-    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n-\n-    if (userIndex !== -1) {\n-        db.wishlists[userIndex].wish = userCart;\n-    } else {\n-        db.wishlists.push({ userId: req.userId, wish: userCart });\n-    }\n-\n-    writeCartDB(db);\n-    res.json({ message: \"Product added to wish\", wish: userCart });\n+  saveWishlist(wishlist);\n+  res.json({ message: \"Product added to wishlist\", wishlist: userWishlist.cart });\n });\n \n-// 3. Remove from Cart\n-router.delete(\"/wish/:productId\", verifyToken, (req, res) => {\n-    const { productId } = req.params;\n-    let db = readCartDB();\n+// *3. Remove item from wishlist when added to cart*\n+app.post(\"/wishlist/remove\", authenticateToken, (req, res) => {\n\\ No newline at end of file\n+  const { userId, productId } = req.body;\n+  let wishlist = getWishlist();\n+  let userWishlist = wishlist.find((w) => w.userId == userId);\n \n-    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n-    if (userIndex === -1) return res.status(404).json({ message: \"User wish not found\" });\n+  if (userWishlist) {\n+    userWishlist.cart = userWishlist.cart.filter((item) => item.id !== productId);\n+    saveWishlist(wishlist);\n+  }\n \n-    const updatedCart = db.wishlists[userIndex].wish.filter(item => item.id !== parseInt(productId));\n-    db.wishlists[userIndex].wish = updatedCart;\n-    writeCartDB(db);\n-\n-    res.json({ message: \"Product removed from wish\", wish: updatedCart });\n+  res.json({ message: \"Product removed from wishlist\", wishlist: userWishlist?.cart || [] });\n });\n \n-// 4. Merge Local Cart with Server Cart\n-router.post(\"/wish/merge\", verifyToken, (req, res) => {\n-    const { localCart } = req.body;\n-    let db = readCartDB();\n-    \n-    const userIndex = db.wishlists.findIndex(wish => wish.userId === req.userId);\n-    let userCart = userIndex !== -1 ? db.wishlists[userIndex].wish : [];\n-\n-    // Merge wishlists and remove duplicates\n-    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n-\n-    if (userIndex !== -1) {\n-        db.wishlists[userIndex].wish = mergedCart;\n-    } else {\n-        db.wishlists.push({ userId: req.userId, wish: mergedCart });\n-    }\n-    \n-    writeCartDB(db);\n-    res.json({ message: \"Cart merged successfully\", wish: mergedCart });\n-});\n-\n-// 5. Clear Cart (Logout)\n-router.delete(\"/wish\", verifyToken, (req, res) => {\n-    let db = readCartDB();\n-    db.wishlists = db.wishlists.filter(wish => wish.userId !== req.userId);\n-    writeCartDB(db);\n-    res.json({ message: \"Cart cleared\" });\n-});\n-\n-module.exports = router;\n+// *Start Server*\n+app.listen(PORT, () => {\n+  console.log(Server running on http://localhost:${PORT});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742921549114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,5 @@\n \n   res.json({ message: \"Product removed from wishlist\", wishlist: userWishlist?.cart || [] });\n });\n \n-// *Start Server*\n-app.listen(PORT, () => {\n-  console.log(Server running on http://localhost:${PORT});\n-});\n\\ No newline at end of file\n+m\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742921554523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,5 +67,5 @@\n \n   res.json({ message: \"Product removed from wishlist\", wishlist: userWishlist?.cart || [] });\n });\n \n-module.\n\\ No newline at end of file\n+module.r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742922902153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,8 @@\n });\n \n \n \n-\n // *2. Add item to wishlist*\n router.post(\"/wishlist/add\", authenticateToken, (req, res) => {\n   const { userId, product } = req.body;\n   let wishlist = getWishlist();\n"
                }
            ],
            "date": 1740560347068,
            "name": "Commit-0",
            "content": "\nconst express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst app = express();\nconst router= express.Router();\nconst wishlistPath = path.join(__dirname, \"../jwishlist.json\");\n\n// Read wishlist.json\nrouter.get(\"/wishlist/\", (req, res) => {\n    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      res.json(jsonData.wishlist);\n    });\n  });\n  \n  // Add a new Product in wishlist.json\n  router.post(\"/addTowishlist/\", (req, res) => {\n    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      const jsonData = JSON.parse(data);\n      const product = { id: jsonData.wishlist.length + 1, ...req.body };\n      jsonData.wishlist.push(product);\n  \n      fs.writeFile(wishlistPath, JSON.stringify(jsonData, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving data\" });\n        res.status(201).json(product);\n      });\n    });\n  });\n  \n  // Utility: Read wishlist data from file\n  const readProductsWishList = () => {\n    const rawData = fs.readFileSync(wishlistPath);\n    const data = JSON.parse(rawData);\n    return data.wishlist;\n  };\n  \n  // Utility: Write updated wishlist back to file\n  const writeProductsWishList = (wishlist) => {\n    const data = { wishlist };\n    fs.writeFileSync(wishlistPath, JSON.stringify(data, null, 2));\n  };\n  // Endpoint to get a single product by id\n  router.get(\"/wishlist/:id\", (req, res) => {\n    try {\n      const wishlist = readProductsWishList();\n      const id = parseInt(req.params.id, 10);\n      const product = wishlist.find((p) => p.id === id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (err) {\n      res.status(500).json({ error: \"Failed to read products data\" });\n    }\n  });\n  \n  // PATCH endpoint to update a product partially\n  router.patch(\"/updateWishlist/:id\", (req, res) => {\n    try {\n      const products = readProductsWishList();\n      const id = parseInt(req.params.id, 10);\n      const index = wishlist.findIndex((p) => p.id === id);\n  \n      if (index === -1) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n  \n      // Merge the existing product with the fields sent in the request body\n      const updatedProduct = { ...products[index], ...req.body };\n      products[index] = updatedProduct;\n  \n      // Write the updated products back to the file\n      writeProductsWishList(products);\n  \n      res.json(updatedProduct);\n    } catch (err) {\n      console.error(\"Error patching product:\", err);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n  \n  // *API to Delete an Item by ID wishlist*\n  router.delete(\"/wishlistRemoveItem/:id\", (req, res) => {\n    fs.readFile(wishlistPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      const itemId = parseInt(req.params.id);\n  \n      // Find the item index\n      const itemIndex = db.wishlist.findIndex((item) => item.id === itemId);\n      if (itemIndex === -1)\n        return res.status(404).json({ message: \"Item not found\" });\n  \n      // Remove the item\n      db.wishlist.splice(itemIndex, 1);\n  \n      // Save updated data to db.json\n      fs.writeFile(wishlistPath, JSON.stringify(db, null, 2), (err) => {\n        if (err) return res.status(500).json({ error: \"Error saving database\" });\n  \n        res.json({ message: \"product deleted successfully\" });\n      });\n    });\n  });\n  \n  module.exports = router"
        }
    ]
}