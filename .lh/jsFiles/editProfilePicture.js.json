{
    "sourceFile": "jsFiles/editProfilePicture.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 181,
            "patches": [
                {
                    "date": 1742298751291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742298761238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n   if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n \n   // Save the correct image path\n-  const imageUrl = `/profileImages/${req.file.filename}`;\n+  const imageUrl = `/public/profileImages/${req.file.filename}`;\n   users[userIndex].profileImage = imageUrl;\n \n   writeUsers(users);\n \n"
                },
                {
                    "date": 1742298946398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(\"public'profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742298952213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public'profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(\"public\",profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742298972541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public\",profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(--\"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742298978964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(--\"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(__dirname\"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742298984165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(__dirname\"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(__dirname.ji\"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742298991658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(__dirname.ji\"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(__dirname.join,\"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742299004088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(__dirname.join,\"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static((__dirname.join,\"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742299011009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static((__dirname.join,\"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(path.join(__dirname.join,\"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742299020924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(path.join(__dirname.join,\"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(path.join(__dirname.join,\"public\",\"profileImages\"))); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742299094225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(path.join(__dirname.join,\"public\",\"profileImages\"))); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(path.join(__dirname,\"public\",\"profileImages\"))); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742300310545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(path.join(__dirname,\"public\",\"profileImages\"))); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(path.join(__dirname.join,\"public\",\"profileImages\"))); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742300315984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(path.join(__dirname.join,\"public\",\"profileImages\"))); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(__dirname.join\"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742300322538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(__dirname.join\"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static( \"public\",\"profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742300329201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static( \"public\",\"profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1742300358730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+const express = require(\"express\");\n+const cors = require(\"cors\");\n+const fs = require(\"fs\");\n+const bodyParser = require(\"body-parser\");\n+const multer = require(\"multer\");\n+const path = require(\"path\");\n+\n+const router = express.Router();\n+const USERS_FILE = \"./jsonFiles/account.json\";\n+\n+// Middleware\n+router.use(cors());\n+router.use(bodyParser.json());\n+router.use(\"/public/pImages\", express.static(\"public/profileImages\")); // Serve profile images\n+\n+// Multer Configuration for Profile Image Uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    const uploadPath = \"public/profileImages\"; \n+    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n+    cb(null, uploadPath);\n+  },\n+  filename: (req, file, cb) => {\n+    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n+  },\n+});\n+\n+const upload = multer({ storage });\n+\n+// Read Users from File\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE);\n+    return JSON.parse(data).users;\n+  } catch (error) {\n+    return [];\n+  }\n+};\n+\n+// Write Users to File\n+const writeUsers = (users) => {\n+  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+};\n+\n+// 🟠 *Upload and Update Profile Picture*\n+router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n+  const { userId } = req.params;\n+  let users = readUsers();\n+  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n+\n+  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n+\n+  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n+\n+  // Save the correct image path\n+  const imageUrl = `/public/profileImages/${req.file.filename}`;\n+  users[userIndex].profileImage = imageUrl;\n+\n+  writeUsers(users);\n+\n+  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742300368005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/pImages\", express.static(\"public/profileImages\")); // Serve profile images\n+router.use(\"/public/images\", express.static(\"public/mages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n@@ -60,69 +60,5 @@\n \n   res.json({ message: \"Profile image updated\", user: users[userIndex] });\n });\n \n-module.exports = router;\n-const express = require(\"express\");\n-const cors = require(\"cors\");\n-const fs = require(\"fs\");\n-const bodyParser = require(\"body-parser\");\n-const multer = require(\"multer\");\n-const path = require(\"path\");\n-\n-const router = express.Router();\n-const USERS_FILE = \"./jsonFiles/account.json\";\n-\n-// Middleware\n-router.use(cors());\n-router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n-\n-// Multer Configuration for Profile Image Uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    const uploadPath = \"public/profileImages\"; \n-    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n-    cb(null, uploadPath);\n-  },\n-  filename: (req, file, cb) => {\n-    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n-  },\n-});\n-\n-const upload = multer({ storage });\n-\n-// Read Users from File\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE);\n-    return JSON.parse(data).users;\n-  } catch (error) {\n-    return [];\n-  }\n-};\n-\n-// Write Users to File\n-const writeUsers = (users) => {\n-  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n-};\n-\n-// 🟠 *Upload and Update Profile Picture*\n-router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n-  const { userId } = req.params;\n-  let users = readUsers();\n-  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n-\n-  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n-\n-  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n-\n-  // Save the correct image path\n-  const imageUrl = `/public/profileImages/${req.file.filename}`;\n-  users[userIndex].profileImage = imageUrl;\n-\n-  writeUsers(users);\n-\n-  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n-});\n-\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742300374048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,14 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/images\", express.static(\"public/mages\")); // Serve profile images\n+router.use(\"/public/images\", express.static(\"public/images\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = \"public/profileImages\"; \n+    const uploadPath = \"public/mages\"; \n     if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n"
                },
                {
                    "date": 1742300385767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = \"public/mages\"; \n+    const uploadPath = \"public/images\"; \n     if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n@@ -52,9 +52,9 @@\n \n   if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n \n   // Save the correct image path\n-  const imageUrl = `/public/profileImages/${req.file.filename}`;\n+  const imageUrl = `/pmages/${req.file.filename}`;\n   users[userIndex].profileImage = imageUrl;\n \n   writeUsers(users);\n \n"
                },
                {
                    "date": 1742300575205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,14 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/images\", express.static(\"public/images\")); // Serve profile images\n+router.use(\"/public/mages\", express.static(\"public/profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = \"public/images\"; \n+    const uploadPath = \"public/profileImages\"; \n     if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n@@ -52,9 +52,9 @@\n \n   if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n \n   // Save the correct image path\n-  const imageUrl = `/pmages/${req.file.filename}`;\n+  const imageUrl = `/public/profileImages/${req.file.filename}`;\n   users[userIndex].profileImage = imageUrl;\n \n   writeUsers(users);\n \n"
                },
                {
                    "date": 1745006255137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/mages\", express.static(\"public/profileImages\")); // Serve profile images\n+app.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745006263123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const USERS_FILE = \"./jsonFiles/account.json\";\n \n // Middleware\n router.use(cors());\n-router.use(bodyParser.json());\n+appp.use(bodyParser.json());\n app.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n"
                },
                {
                    "date": 1745006268673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n const router = express.Router();\n const USERS_FILE = \"./jsonFiles/account.json\";\n \n // Middleware\n-router.use(cors());\n-appp.use(bodyParser.json());\n+app.use(cors());\n+app.use(bodyParser.json());\n app.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n"
                },
                {
                    "date": 1745006321179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n const bodyParser = require(\"body-parser\");\n const multer = require(\"multer\");\n const path = require(\"path\");\n \n+\n const router = express.Router();\n const USERS_FILE = \"./jsonFiles/account.json\";\n \n // Middleware\n"
                },
                {
                    "date": 1745006723436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const bodyParser = require(\"body-parser\");\n const multer = require(\"multer\");\n const path = require(\"path\");\n \n-\n+const app = express(); // Ensure app is defined before usage\n const router = express.Router();\n const USERS_FILE = \"./jsonFiles/account.json\";\n \n // Middleware\n@@ -16,11 +16,15 @@\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = \"public/profileImages\"; \n-    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n-    cb(null, uploadPath);\n+    const uploadPath = \"public/profileImages\";\n+    try {\n+      if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n+      cb(null, uploadPath);\n+    } catch (error) {\n+      cb(new Error(\"Failed to create upload directory\"));\n+    }\n   },\n   filename: (req, file, cb) => {\n     cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n   },\n@@ -30,18 +34,23 @@\n \n // Read Users from File\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE);\n+    const data = fs.readFileSync(USERS_FILE, \"utf8\"); // Specify encoding\n     return JSON.parse(data).users;\n   } catch (error) {\n+    console.error(\"Error reading users file:\", error.message);\n     return [];\n   }\n };\n \n // Write Users to File\n const writeUsers = (users) => {\n-  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+  } catch (error) {\n+    console.error(\"Error writing users file:\", error.message);\n+  }\n };\n \n // 🟠 *Upload and Update Profile Picture*\n router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n@@ -61,5 +70,7 @@\n \n   res.json({ message: \"Profile image updated\", user: users[userIndex] });\n });\n \n-module.exports = router;\n\\ No newline at end of file\n+app.use(\"/api\", router); // Ensure router is mounted\n+\n+module.exports = app; // Export app instead of router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745006851242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n const fs = require(\"fs\");\n const bodyParser = require(\"body-parser\");\n const multer = require(\"multer\");\n const path = require(\"path\");\n+const app = express();\n \n-const app = express(); // Ensure app is defined before usage\n const router = express.Router();\n const USERS_FILE = \"./jsonFiles/account.json\";\n \n // Middleware\n@@ -16,15 +16,11 @@\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = \"public/profileImages\";\n-    try {\n-      if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n-      cb(null, uploadPath);\n-    } catch (error) {\n-      cb(new Error(\"Failed to create upload directory\"));\n-    }\n+    const uploadPath = \"public/profileImages\"; \n+    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n+    cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n     cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n   },\n@@ -34,23 +30,18 @@\n \n // Read Users from File\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, \"utf8\"); // Specify encoding\n+    const data = fs.readFileSync(USERS_FILE);\n     return JSON.parse(data).users;\n   } catch (error) {\n-    console.error(\"Error reading users file:\", error.message);\n     return [];\n   }\n };\n \n // Write Users to File\n const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n-  } catch (error) {\n-    console.error(\"Error writing users file:\", error.message);\n-  }\n+  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n };\n \n // 🟠 *Upload and Update Profile Picture*\n router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n@@ -70,7 +61,5 @@\n \n   res.json({ message: \"Profile image updated\", user: users[userIndex] });\n });\n \n-app.use(\"/api\", router); // Ensure router is mounted\n-\n-module.exports = app; // Export app instead of router\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745006861540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,16 @@\n const fs = require(\"fs\");\n const bodyParser = require(\"body-parser\");\n const multer = require(\"multer\");\n const path = require(\"path\");\n-const app = express();\n \n const router = express.Router();\n const USERS_FILE = \"./jsonFiles/account.json\";\n \n // Middleware\n-app.use(cors());\n-app.use(bodyParser.json());\n-app.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n+router.use(cors());\n+router.use(bodyParser.json());\n+router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n \n // Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745007979878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +0,0 @@\n-const express = require(\"express\");\n-const cors = require(\"cors\");\n-const fs = require(\"fs\");\n-const bodyParser = require(\"body-parser\");\n-const multer = require(\"multer\");\n-const path = require(\"path\");\n-\n-const router = express.Router();\n-const USERS_FILE = \"./jsonFiles/account.json\";\n-\n-// Middleware\n-router.use(cors());\n-router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n-\n-// Multer Configuration for Profile Image Uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    const uploadPath = \"public/profileImages\"; \n-    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n-    cb(null, uploadPath);\n-  },\n-  filename: (req, file, cb) => {\n-    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n-  },\n-});\n-\n-const upload = multer({ storage });\n-\n-// Read Users from File\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE);\n-    return JSON.parse(data).users;\n-  } catch (error) {\n-    return [];\n-  }\n-};\n-\n-// Write Users to File\n-const writeUsers = (users) => {\n-  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n-};\n-\n-// 🟠 *Upload and Update Profile Picture*\n-router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n-  const { userId } = req.params;\n-  let users = readUsers();\n-  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n-\n-  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n-\n-  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n-\n-  // Save the correct image path\n-  const imageUrl = `/public/profileImages/${req.file.filename}`;\n-  users[userIndex].profileImage = imageUrl;\n-\n-  writeUsers(users);\n-\n-  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745007992449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+const express = require(\"express\");\n+const cors = require(\"cors\");\n+const fs = require(\"fs\");\n+const bodyParser = require(\"body-parser\");\n+const multer = require(\"multer\");\n+const path = require(\"path\");\n+\n+const router = express.Router();\n+const USERS_FILE = \"./jsonFiles/account.json\";\n+\n+// Middleware\n+router.use(cors());\n+router.use(bodyParser.json());\n+router.use(\"/public/profileImages\", express.static(path.join(__dirname, \"public/profileImages\")));\n+\n+// Multer Configuration with Validation\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    const uploadPath = path.join(__dirname, \"public/profileImages\");\n+    if (!fs.existsSync(uploadPath)) {\n+      fs.mkdirSync(uploadPath, { recursive: true });\n+    }\n+    cb(null, uploadPath);\n+  },\n+  filename: (req, file, cb) => {\n+    const sanitizedFileName = file.originalname.replace(/[^a-zA-Z0-9._-]/g, \"\");\n+    cb(null, ${Date.now()}-${sanitizedFileName});\n+  },\n+});\n+\n+const upload = multer({\n+  storage,\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error(\"Invalid file type. Only JPEG, PNG, and GIF are allowed.\"));\n+    }\n+  },\n+  limits: {\n+    fileSize: 5 * 1024 * 1024, // 5MB limit\n+  },\n+});\n+\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE);\n+    return JSON.parse(data).users;\n+  } catch (error) {\n+    console.error(\"Error reading users file:\", error);\n+    return [];\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+  } catch (error) {\n+    console.error(\"Error writing users file:\", error);\n+    throw error;\n+  }\n+};\n+\n+// 🟠 Upload and Update Profile Picture\n+router.put(\n+  \"/profile/update-image/:userId\",\n+  upload.single(\"profileImage\"),\n+  (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+      \n+      // Validate userId\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({ \n+          success: false,\n+          message: \"Invalid user ID\" \n+        });\n+      }\n+\n+      if (!req.file) {\n+        return res.status(400).json({ \n+          success: false,\n+          message: \"No file uploaded or invalid file type\" \n+        });\n+      }\n+\n+      const users = readUsers();\n+      const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({ \n+          success: false,\n+          message: \"User not found\" \n+        });\n+      }\n+\n+      // Construct URL path\n+      const imageUrl = `/public/profileImages/${req.file.filename};\n+      \n+      // Update user data\n+      const updatedUser = {\n+        ...users[userIndex],\n+        profileImage: imageUrl\n+      };\n+      \n+      users[userIndex] = updatedUser;\n+      writeUsers(users);\n+\n+      res.json({ \n+        success: true,\n+        message: \"Profile image updated successfully\",\n+        data: {\n+          user: updatedUser,\n+          imagePath: imageUrl\n+        }\n+      });\n+    } catch (error) {\n+      console.error(\"Error updating profile image:\", error);\n+      res.status(500).json({ \n+        success: false,\n+        message: \"Internal server error\",\n+        error: error.message \n+      });\n+    }\n+  }\n+);\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745008026378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n     const sanitizedFileName = file.originalname.replace(/[^a-zA-Z0-9._-]/g, \"\");\n-    cb(null, ${Date.now()}-${sanitizedFileName});\n+    cb(null, `${Date.now()}-${sanitizedFileName});\n   },\n });\n \n const upload = multer({\n@@ -95,9 +95,9 @@\n         });\n       }\n \n       // Construct URL path\n-      const imageUrl = `/public/profileImages/${req.file.filename};\n+      const imageUrl = `/public/profileImages/${req.file.filename}`;\n       \n       // Update user data\n       const updatedUser = {\n         ...users[userIndex],\n"
                },
                {
                    "date": 1745008039090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n     const sanitizedFileName = file.originalname.replace(/[^a-zA-Z0-9._-]/g, \"\");\n-    cb(null, `${Date.now()}-${sanitizedFileName});\n+    cb(null, `${Date.now()}-${sanitizedFileName}``);\n   },\n });\n \n const upload = multer({\n"
                },
                {
                    "date": 1745009256202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,120 +10,55 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(path.join(__dirname, \"public/profileImages\")));\n+router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n \n-// Multer Configuration with Validation\n+// Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = path.join(__dirname, \"public/profileImages\");\n-    if (!fs.existsSync(uploadPath)) {\n-      fs.mkdirSync(uploadPath, { recursive: true });\n-    }\n+    const uploadPath = \"public/profileImages\"; \n+    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n-    const sanitizedFileName = file.originalname.replace(/[^a-zA-Z0-9._-]/g, \"\");\n-    cb(null, `${Date.now()}-${sanitizedFileName}``);\n+    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n   },\n });\n \n-const upload = multer({\n-  storage,\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error(\"Invalid file type. Only JPEG, PNG, and GIF are allowed.\"));\n-    }\n-  },\n-  limits: {\n-    fileSize: 5 * 1024 * 1024, // 5MB limit\n-  },\n-});\n+const upload = multer({ storage });\n \n+// Read Users from File\n const readUsers = () => {\n   try {\n     const data = fs.readFileSync(USERS_FILE);\n     return JSON.parse(data).users;\n   } catch (error) {\n-    console.error(\"Error reading users file:\", error);\n     return [];\n   }\n };\n \n+// Write Users to File\n const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n-  } catch (error) {\n-    console.error(\"Error writing users file:\", error);\n-    throw error;\n-  }\n+  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n };\n \n-// 🟠 Upload and Update Profile Picture\n-router.put(\n-  \"/profile/update-image/:userId\",\n-  upload.single(\"profileImage\"),\n-  (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-      \n-      // Validate userId\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({ \n-          success: false,\n-          message: \"Invalid user ID\" \n-        });\n-      }\n+// 🟠 *Upload and Update Profile Picture*\n+router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n+  const { userId } = req.params;\n+  let users = readUsers();\n+  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n \n-      if (!req.file) {\n-        return res.status(400).json({ \n-          success: false,\n-          message: \"No file uploaded or invalid file type\" \n-        });\n-      }\n+  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n \n-      const users = readUsers();\n-      const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n+  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n \n-      if (userIndex === -1) {\n-        return res.status(404).json({ \n-          success: false,\n-          message: \"User not found\" \n-        });\n-      }\n+  // Save the correct image path\n+  const imageUrl = `/public/profileImages/${req.file.filename}`;\n+  users[userIndex].profileImage = imageUrl;\n \n-      // Construct URL path\n-      const imageUrl = `/public/profileImages/${req.file.filename}`;\n-      \n-      // Update user data\n-      const updatedUser = {\n-        ...users[userIndex],\n-        profileImage: imageUrl\n-      };\n-      \n-      users[userIndex] = updatedUser;\n-      writeUsers(users);\n+  writeUsers(users);\n \n-      res.json({ \n-        success: true,\n-        message: \"Profile image updated successfully\",\n-        data: {\n-          user: updatedUser,\n-          imagePath: imageUrl\n-        }\n-      });\n-    } catch (error) {\n-      console.error(\"Error updating profile image:\", error);\n-      res.status(500).json({ \n-        success: false,\n-        message: \"Internal server error\",\n-        error: error.message \n-      });\n-    }\n-  }\n-);\n+  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n+});\n \n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745009322709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,55 +10,120 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n+router.use(\"/public/profileImages\", express.static(path.join(__dirname, \"public/profileImages\")));\n \n-// Multer Configuration for Profile Image Uploads\n+// Multer Configuration with Validation\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = \"public/profileImages\"; \n-    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n+    const uploadPath = path.join(__dirname, \"public/profileImages\");\n+    if (!fs.existsSync(uploadPath)) {\n+      fs.mkdirSync(uploadPath, { recursive: true });\n+    }\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n-    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n+    const sanitizedFileName = file.originalname.replace(/[^a-zA-Z0-9._-]/g, \"\");\n+    cb(null, `${Date.now()}-${sanitizedFileName}`); // Prepend timestamp to avoid name collisions\n   },\n });\n \n-const upload = multer({ storage });\n+const upload = multer({\n+  storage,\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error(\"Invalid file type. Only JPEG, PNG, and GIF are allowed.\"));\n+    }\n+  },\n+  limits: {\n+    fileSize: 5 * 1024 * 1024, // 5MB limit\n+  },\n+});\n \n-// Read Users from File\n const readUsers = () => {\n   try {\n     const data = fs.readFileSync(USERS_FILE);\n     return JSON.parse(data).users;\n   } catch (error) {\n+    console.error(\"Error reading users file:\", error);\n     return [];\n   }\n };\n \n-// Write Users to File\n const writeUsers = (users) => {\n-  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+  } catch (error) {\n+    console.error(\"Error writing users file:\", error);\n+    throw error;\n+  }\n };\n \n-// 🟠 *Upload and Update Profile Picture*\n-router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n-  const { userId } = req.params;\n-  let users = readUsers();\n-  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n+// 🟠 Upload and Update Profile Picture\n+router.put(\n+  \"/profile/update-image/:userId\",\n+  upload.single(\"profileImage\"),\n+  (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+      \n+      // Validate userId\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({ \n+          success: false,\n+          message: \"Invalid user ID\" \n+        });\n+      }\n \n-  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n+      if (!req.file) {\n+        return res.status(400).json({ \n+          success: false,\n+          message: \"No file uploaded or invalid file type\" \n+        });\n+      }\n \n-  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n+      const users = readUsers();\n+      const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n \n-  // Save the correct image path\n-  const imageUrl = `/public/profileImages/${req.file.filename}`;\n-  users[userIndex].profileImage = imageUrl;\n+      if (userIndex === -1) {\n+        return res.status(404).json({ \n+          success: false,\n+          message: \"User not found\" \n+        });\n+      }\n \n-  writeUsers(users);\n+      // Construct URL path\n+      const imageUrl = `/public/profileImages/${req.file.filename}`;\n+      \n+      // Update user data\n+      const updatedUser = {\n+        ...users[userIndex],\n+        profileImage: imageUrl\n+      };\n+      \n+      users[userIndex] = updatedUser;\n+      writeUsers(users);\n \n-  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n-});\n+      res.json({ \n+        success: true,\n+        message: \"Profile image updated successfully\",\n+        data: {\n+          user: updatedUser,\n+          imagePath: imageUrl\n+        }\n+      });\n+    } catch (error) {\n+      console.error(\"Error updating profile image:\", error);\n+      res.status(500).json({ \n+        success: false,\n+        message: \"Internal server error\",\n+        error: error.message \n+      });\n+    }\n+  }\n+);\n \n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745016544399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,120 +10,55 @@\n \n // Middleware\n router.use(cors());\n router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(path.join(__dirname, \"public/profileImages\")));\n+router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n \n-// Multer Configuration with Validation\n+// Multer Configuration for Profile Image Uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const uploadPath = path.join(__dirname, \"public/profileImages\");\n-    if (!fs.existsSync(uploadPath)) {\n-      fs.mkdirSync(uploadPath, { recursive: true });\n-    }\n+    const uploadPath = \"public/profileImages\"; \n+    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n-    const sanitizedFileName = file.originalname.replace(/[^a-zA-Z0-9._-]/g, \"\");\n-    cb(null, `${Date.now()}-${sanitizedFileName}`); // Prepend timestamp to avoid name collisions\n+    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n   },\n });\n \n-const upload = multer({\n-  storage,\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error(\"Invalid file type. Only JPEG, PNG, and GIF are allowed.\"));\n-    }\n-  },\n-  limits: {\n-    fileSize: 5 * 1024 * 1024, // 5MB limit\n-  },\n-});\n+const upload = multer({ storage });\n \n+// Read Users from File\n const readUsers = () => {\n   try {\n     const data = fs.readFileSync(USERS_FILE);\n     return JSON.parse(data).users;\n   } catch (error) {\n-    console.error(\"Error reading users file:\", error);\n     return [];\n   }\n };\n \n+// Write Users to File\n const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n-  } catch (error) {\n-    console.error(\"Error writing users file:\", error);\n-    throw error;\n-  }\n+  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n };\n \n-// 🟠 Upload and Update Profile Picture\n-router.put(\n-  \"/profile/update-image/:userId\",\n-  upload.single(\"profileImage\"),\n-  (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-      \n-      // Validate userId\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({ \n-          success: false,\n-          message: \"Invalid user ID\" \n-        });\n-      }\n+// 🟠 *Upload and Update Profile Picture*\n+router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n+  const { userId } = req.params;\n+  let users = readUsers();\n+  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n \n-      if (!req.file) {\n-        return res.status(400).json({ \n-          success: false,\n-          message: \"No file uploaded or invalid file type\" \n-        });\n-      }\n+  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n \n-      const users = readUsers();\n-      const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n+  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n \n-      if (userIndex === -1) {\n-        return res.status(404).json({ \n-          success: false,\n-          message: \"User not found\" \n-        });\n-      }\n+  // Save the correct image path\n+  const imageUrl = `/public/profileImages/${req.file.filename}`;\n+  users[userIndex].profileImage = imageUrl;\n \n-      // Construct URL path\n-      const imageUrl = `/public/profileImages/${req.file.filename}`;\n-      \n-      // Update user data\n-      const updatedUser = {\n-        ...users[userIndex],\n-        profileImage: imageUrl\n-      };\n-      \n-      users[userIndex] = updatedUser;\n-      writeUsers(users);\n+  writeUsers(users);\n \n-      res.json({ \n-        success: true,\n-        message: \"Profile image updated successfully\",\n-        data: {\n-          user: updatedUser,\n-          imagePath: imageUrl\n-        }\n-      });\n-    } catch (error) {\n-      console.error(\"Error updating profile image:\", error);\n-      res.status(500).json({ \n-        success: false,\n-        message: \"Internal server error\",\n-        error: error.message \n-      });\n-    }\n-  }\n-);\n+  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n+});\n \n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745020241262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +0,0 @@\n-const express = require(\"express\");\n-const cors = require(\"cors\");\n-const fs = require(\"fs\");\n-const bodyParser = require(\"body-parser\");\n-const multer = require(\"multer\");\n-const path = require(\"path\");\n-\n-const router = express.Router();\n-const USERS_FILE = \"./jsonFiles/account.json\";\n-\n-// Middleware\n-router.use(cors());\n-router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n-\n-// Multer Configuration for Profile Image Uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    const uploadPath = \"public/profileImages\"; \n-    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n-    cb(null, uploadPath);\n-  },\n-  filename: (req, file, cb) => {\n-    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n-  },\n-});\n-\n-const upload = multer({ storage });\n-\n-// Read Users from File\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE);\n-    return JSON.parse(data).users;\n-  } catch (error) {\n-    return [];\n-  }\n-};\n-\n-// Write Users to File\n-const writeUsers = (users) => {\n-  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n-};\n-\n-// 🟠 *Upload and Update Profile Picture*\n-router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n-  const { userId } = req.params;\n-  let users = readUsers();\n-  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n-\n-  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n-\n-  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n-\n-  // Save the correct image path\n-  const imageUrl = `/public/profileImages/${req.file.filename}`;\n-  users[userIndex].profileImage = imageUrl;\n-\n-  writeUsers(users);\n-\n-  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745020252379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+const express = require(\"express\");\n+const cors = require(\"cors\");\n+const fs = require(\"fs\");\n+const bodyParser = require(\"body-parser\");\n+const multer = require(\"multer\");\n+const path = require(\"path\");\n+\n+const router = express.Router();\n+const USERS_FILE = \"./jsonFiles/account.json\";\n+\n+// Middleware\n+router.use(cors());\n+router.use(bodyParser.json());\n+router.use(\"/public/profileImages\", express.static(\"public/profileImages\"));\n+\n+// Multer config\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    const uploadPath = path.join(\"public\", \"profileImages\");\n+    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true });\n+    cb(null, uploadPath);\n+  },\n+  filename: (req, file, cb) => {\n+    cb(null, ${Date.now()}-${file.originalname});\n+  },\n+});\n+\n+const upload = multer({ storage });\n+\n+// Helpers\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE);\n+    return JSON.parse(data).users;\n+  } catch {\n+    return [];\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+};\n+\n+// Route: Update profileImage and Discount\n+router.put(\"/profile/update/:userId\", upload.single(\"profileImage\"), (req, res) => {\n+  const { userId } = req.params;\n+  const { Discount } = req.body;\n+  const users = readUsers();\n+  const userIndex = users.findIndex((u) => u.id === parseInt(userId));\n+\n+  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n+\n+  // Update Discount if provided\n+  if (Discount !== undefined) {\n+    users[userIndex].Discount = parseFloat(Discount);\n+  }\n+\n+  // Update profileImage if uploaded\n+  if (req.file) {\n+    const imageUrl = `/public/profileImages/${req.file.filename};\n+\n+    // Optional: Delete old image if needed\n+    const oldImage = users[userIndex].profileImage;\n+    if (oldImage && oldImage.startsWith(\"/public/profileImages\")) {\n+      const oldImagePath = path.join(__dirname, \"..\", oldImage);\n+      if (fs.existsSync(oldImagePath)) fs.unlinkSync(oldImagePath);\n+    }\n+\n+    users[userIndex].profileImage = imageUrl;\n+  }\n+\n+  writeUsers(users);\n+  res.json({ message: \"Profile and Discount updated\", user: users[userIndex] });\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745020257639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   }\n \n   // Update profileImage if uploaded\n   if (req.file) {\n-    const imageUrl = `/public/profileImages/${req.file.filename};\n+    const imageUrl = `/public/profileImages/${req.file.filename``};\n \n     // Optional: Delete old image if needed\n     const oldImage = users[userIndex].profileImage;\n     if (oldImage && oldImage.startsWith(\"/public/profileImages\")) {\n"
                },
                {
                    "date": 1745020269057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true });\n     cb(null, uploadPath);\n   },\n   filename: (req, file, cb) => {\n-    cb(null, ${Date.now()}-${file.originalname});\n+    cb(null, `${Date.now()}-${file.originalname});\n   },\n });\n \n const upload = multer({ storage });\n@@ -56,9 +56,9 @@\n   }\n \n   // Update profileImage if uploaded\n   if (req.file) {\n-    const imageUrl = `/public/profileImages/${req.file.filename``};\n+    const imageUrl = `/public/profileImages/${req.file.filename}`;\n \n     // Optional: Delete old image if needed\n     const oldImage = users[userIndex].profileImage;\n     if (oldImage && oldImage.startsWith(\"/public/profileImages\")) {\n"
                },
                {
                    "date": 1745020871014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,76 +0,0 @@\n-const express = require(\"express\");\n-const cors = require(\"cors\");\n-const fs = require(\"fs\");\n-const bodyParser = require(\"body-parser\");\n-const multer = require(\"multer\");\n-const path = require(\"path\");\n-\n-const router = express.Router();\n-const USERS_FILE = \"./jsonFiles/account.json\";\n-\n-// Middleware\n-router.use(cors());\n-router.use(bodyParser.json());\n-router.use(\"/public/profileImages\", express.static(\"public/profileImages\"));\n-\n-// Multer config\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    const uploadPath = path.join(\"public\", \"profileImages\");\n-    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true });\n-    cb(null, uploadPath);\n-  },\n-  filename: (req, file, cb) => {\n-    cb(null, `${Date.now()}-${file.originalname});\n-  },\n-});\n-\n-const upload = multer({ storage });\n-\n-// Helpers\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE);\n-    return JSON.parse(data).users;\n-  } catch {\n-    return [];\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n-};\n-\n-// Route: Update profileImage and Discount\n-router.put(\"/profile/update/:userId\", upload.single(\"profileImage\"), (req, res) => {\n-  const { userId } = req.params;\n-  const { Discount } = req.body;\n-  const users = readUsers();\n-  const userIndex = users.findIndex((u) => u.id === parseInt(userId));\n-\n-  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n-\n-  // Update Discount if provided\n-  if (Discount !== undefined) {\n-    users[userIndex].Discount = parseFloat(Discount);\n-  }\n-\n-  // Update profileImage if uploaded\n-  if (req.file) {\n-    const imageUrl = `/public/profileImages/${req.file.filename}`;\n-\n-    // Optional: Delete old image if needed\n-    const oldImage = users[userIndex].profileImage;\n-    if (oldImage && oldImage.startsWith(\"/public/profileImages\")) {\n-      const oldImagePath = path.join(__dirname, \"..\", oldImage);\n-      if (fs.existsSync(oldImagePath)) fs.unlinkSync(oldImagePath);\n-    }\n-\n-    users[userIndex].profileImage = imageUrl;\n-  }\n-\n-  writeUsers(users);\n-  res.json({ message: \"Profile and Discount updated\", user: users[userIndex] });\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745020882297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n+\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n+\n+// Configuration\n+const USERS_FILE = path.join(__dirname, 'users.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, PROFILE_IMAGES_DIR);\n+  },\n+  filename: (req, file, cb) => {\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n+  },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n+});\n+\n+// Helper functions\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n+  } catch (err) {\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n+};\n+\n+// Update profile image endpoint\n+app.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n+\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(__dirname, 'public', oldImage);\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = /public/profile-images/${req.file.filename};\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n+  }\n+);\n+\n+// Get user endpoint (for testing)\n+app.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n+\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n+});\n+\n"
                },
                {
                    "date": 1745020887754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,4 +162,5 @@\n     });\n   }\n });\n \n+mod\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745020894089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-mod\n\\ No newline at end of file\n+module.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745020901979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-module.\n\\ No newline at end of file\n+module.exports = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745020916897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n+const { router } = require('json-server');\n \n const app = express();\n const PORT = process.env.PORT || 5000;\n \n@@ -135,9 +136,9 @@\n   }\n );\n \n // Get user endpoint (for testing)\n-app.get('/api/users/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745020928614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n   }\n };\n \n // Update profile image endpoint\n-app.put('/api/users/:userId/profile-image', \n+.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n"
                },
                {
                    "date": 1745020959343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, 'users.json');\n+const USERS_FILE = path.join(__dirname, '');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n@@ -69,9 +69,9 @@\n   }\n };\n \n // Update profile image endpoint\n-.put('/api/users/:userId/profile-image', \n+router.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n"
                },
                {
                    "date": 1745020996656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,14 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-\n+rp\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '');\n+const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745021004870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-rp\n+const r\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745021018005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-const r\n+const router = express.Router();\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745021073094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-const { router } = require('json-server');\n+// const { router } = require('json-server');\n const router = express.Router();\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n"
                },
                {
                    "date": 1745021093830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = /public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profile-images/${req.file.filename};\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022057414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profileimages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022434336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profileimages/${req.file.filename}`;\n+      const newImagePath = `/public/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022440689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/${req.file.filename}`;\n+      const newImagePath = `/public/<<<${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022451026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/<<<${req.file.filename}`;\n+      const newImagePath = `profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022488877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,16 +104,16 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, 'public', oldImage);\n+        const oldImagePath = path.join(__dirname, '/public', oldImage);\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `profileImages/${req.file.filename}`;\n+      const newImagePath = `/profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022496800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, '/public', oldImage);\n+        const oldImagePath = path.join(__dirname, '/public/pp', oldImage);\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n"
                },
                {
                    "date": 1745022503997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, '/public/pp', oldImage);\n+        const oldImagePath = path.join(__dirname, '/public/p', oldImage);\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n"
                },
                {
                    "date": 1745022509533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, '/public/p', oldImage);\n+        const oldImagePath = path.join(__dirname, '/public/profile', oldImage);\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n"
                },
                {
                    "date": 1745022514912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, '/public/profile', oldImage);\n+        const oldImagePath = path.join(__dirname, '/public/profileImage', oldImage);\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n"
                },
                {
                    "date": 1745022660425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImage'); // Adjusted directory path\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -19,14 +19,14 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImage', express.static(PROFILE_IMAGES_DIR)); // Adjusted static path\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n+    cb(null, PROFILE_IMAGES_DIR); // Adjusted directory path\n   },\n   filename: (req, file, cb) => {\n     const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n     const ext = path.extname(file.originalname);\n@@ -104,16 +104,16 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, '/public/profileImage', oldImage);\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage)); // Adjusted path\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/profileImages/${req.file.filename}`;\n+      const newImagePath = `/public/profileImage/${req.file.filename}`; // Adjusted path\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022737558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImage'); // Adjusted directory path\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -19,14 +19,14 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImage', express.static(PROFILE_IMAGES_DIR)); // Adjusted static path\n+app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR); // Adjusted directory path\n+    cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n     const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n     const ext = path.extname(file.originalname);\n@@ -104,16 +104,16 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage)); // Adjusted path\n+        const oldImagePath = path.join(__dirname, '/public/profileImage', oldImage);\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profileImage/${req.file.filename}`; // Adjusted path\n+      const newImagePath = `/profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745022808611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages'); // Adjusted directory path\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -19,14 +19,14 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR)); // Adjusted static path\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n+    cb(null, PROFILE_IMAGES_DIR); // Adjusted directory path\n   },\n   filename: (req, file, cb) => {\n     const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n     const ext = path.extname(file.originalname);\n@@ -104,16 +104,16 @@\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n       if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, '/public/profileImage', oldImage);\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage)); // Adjusted path\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/profileImages/${req.file.filename}`;\n+      const newImagePath = `/public/profileImages/${req.file.filename}`; // Adjusted path\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745023166135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,167 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n-// const { router } = require('json-server');\n-const router = express.Router();\n-const app = express();\n-const PORT = process.env.PORT || 5000;\n-\n-// Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages'); // Adjusted directory path\n-\n-// Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n-  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n-}\n-\n-// Middleware\n-app.use(cors());\n-app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR)); // Adjusted static path\n-\n-// Multer configuration for file uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR); // Adjusted directory path\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n-});\n-\n-const upload = multer({\n-  storage: storage,\n-  limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n-  },\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n-    }\n-  }\n-});\n-\n-// Helper functions\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n-    return JSON.parse(data);\n-  } catch (err) {\n-    console.error('Error reading users file:', err);\n-    return { users: [] };\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n-  } catch (err) {\n-    console.error('Error writing users file:', err);\n-    throw err;\n-  }\n-};\n-\n-// Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n-  async (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-\n-      // Validate user ID\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'Invalid user ID'\n-        });\n-      }\n-\n-      // Check if file was uploaded\n-      if (!req.file) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'No image file provided'\n-        });\n-      }\n-\n-      const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n-\n-      if (userIndex === -1) {\n-        return res.status(404).json({\n-          success: false,\n-          message: 'User not found'\n-        });\n-      }\n-\n-      // Delete old profile image if it exists and isn't the default\n-      const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage)); // Adjusted path\n-        if (fs.existsSync(oldImagePath)) {\n-          fs.unlinkSync(oldImagePath);\n-        }\n-      }\n-\n-      // Update user with new image path\n-      const newImagePath = `/public/profileImages/${req.file.filename}`; // Adjusted path\n-      usersData.users[userIndex].profileImage = newImagePath;\n-      writeUsers(usersData);\n-\n-      res.json({\n-        success: true,\n-        message: 'Profile image updated successfully',\n-        data: {\n-          profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n-      });\n-\n-    } catch (err) {\n-      console.error('Error updating profile image:', err);\n-      res.status(500).json({\n-        success: false,\n-        message: 'Internal server error',\n-        error: err.message\n-      });\n-    }\n-  }\n-);\n-\n-// Get user endpoint (for testing)\n-router.get('/api/users/:userId', (req, res) => {\n-  try {\n-    const { userId } = req.params;\n-    const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n-\n-    if (!user) {\n-      return res.status(404).json({\n-        success: false,\n-        message: 'User not found'\n-      });\n-    }\n-\n-    res.json({\n-      success: true,\n-      data: user\n-    });\n-\n-  } catch (err) {\n-    console.error('Error fetching user:', err);\n-    res.status(500).json({\n-      success: false,\n-      message: 'Internal server error'\n-    });\n-  }\n-});\n-\n-module.exports = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745023174134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n+// const { router } = require('json-server');\n+const router = express.Router();\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n+\n+// Configuration\n+const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, PROFILE_IMAGES_DIR);\n+  },\n+  filename: (req, file, cb) => {\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n+  },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n+});\n+\n+// Helper functions\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n+  } catch (err) {\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n+};\n+\n+// Update profile image endpoint\n+router.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n+\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(__dirname, '/public/profileImage', oldImage);\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = `/profileImages/${req.file.filename}`;\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n+  }\n+);\n+\n+// Get user endpoint (for testing)\n+router.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n+\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n+});\n+\n+module.exports = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745023183672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,167 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n-// const { router } = require('json-server');\n-const router = express.Router();\n-const app = express();\n-const PORT = process.env.PORT || 5000;\n-\n-// Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n-\n-// Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n-  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n-}\n-\n-// Middleware\n-app.use(cors());\n-app.use(express.json());\n-app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n-\n-// Multer configuration for file uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n-});\n-\n-const upload = multer({\n-  storage: storage,\n-  limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n-  },\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n-    }\n-  }\n-});\n-\n-// Helper functions\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n-    return JSON.parse(data);\n-  } catch (err) {\n-    console.error('Error reading users file:', err);\n-    return { users: [] };\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n-  } catch (err) {\n-    console.error('Error writing users file:', err);\n-    throw err;\n-  }\n-};\n-\n-// Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n-  async (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-\n-      // Validate user ID\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'Invalid user ID'\n-        });\n-      }\n-\n-      // Check if file was uploaded\n-      if (!req.file) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'No image file provided'\n-        });\n-      }\n-\n-      const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n-\n-      if (userIndex === -1) {\n-        return res.status(404).json({\n-          success: false,\n-          message: 'User not found'\n-        });\n-      }\n-\n-      // Delete old profile image if it exists and isn't the default\n-      const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, '/public/profileImage', oldImage);\n-        if (fs.existsSync(oldImagePath)) {\n-          fs.unlinkSync(oldImagePath);\n-        }\n-      }\n-\n-      // Update user with new image path\n-      const newImagePath = `/profileImages/${req.file.filename}`;\n-      usersData.users[userIndex].profileImage = newImagePath;\n-      writeUsers(usersData);\n-\n-      res.json({\n-        success: true,\n-        message: 'Profile image updated successfully',\n-        data: {\n-          profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n-      });\n-\n-    } catch (err) {\n-      console.error('Error updating profile image:', err);\n-      res.status(500).json({\n-        success: false,\n-        message: 'Internal server error',\n-        error: err.message\n-      });\n-    }\n-  }\n-);\n-\n-// Get user endpoint (for testing)\n-router.get('/api/users/:userId', (req, res) => {\n-  try {\n-    const { userId } = req.params;\n-    const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n-\n-    if (!user) {\n-      return res.status(404).json({\n-        success: false,\n-        message: 'User not found'\n-      });\n-    }\n-\n-    res.json({\n-      success: true,\n-      data: user\n-    });\n-\n-  } catch (err) {\n-    console.error('Error fetching user:', err);\n-    res.status(500).json({\n-      success: false,\n-      message: 'Internal server error'\n-    });\n-  }\n-});\n-\n-module.exports = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745023193606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n+\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n+\n+// Configuration\n+const USERS_FILE = path.join(__dirname, 'users.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, PROFILE_IMAGES_DIR);\n+  },\n+  filename: (req, file, cb) => {\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n+  },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n+});\n+\n+// Helper functions\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n+  } catch (err) {\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n+};\n+\n+// Update profile image endpoint\n+app.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n+\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = /public/profileImages/${req.file.filename};\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n+  }\n+);\n+\n+// Get user endpoint\n+app.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n+\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n+});\n+\n"
                },
                {
                    "date": 1745023198918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,4 +162,5 @@\n     });\n   }\n });\n \n+module.exports = app;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745023212717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = /public/profileImages/${req.file.filename};\n+      const newImagePath = `/public/profileImages/${req.file.filename};\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-module.exports = app;\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745023254031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, 'users.json');\n+const USERS_FILE = path.join(__dirname, '');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profileImages/${req.file.filename};\n+      const newImagePath = `/public/profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745023260509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '');\n+const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745023273220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n   }\n };\n \n // Update profile image endpoint\n-app.put('/api/users/:userId/profile-image', \n+.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n"
                },
                {
                    "date": 1745023288130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n   }\n };\n \n // Update profile image endpoint\n-.put('/api/users/:userId/profile-image', \n+router.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-app.get('/api/users/:userId', (req, res) => {\n+.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745023306808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-\n+const\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-.get('/api/users/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745025147735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,166 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n-const\n-const app = express();\n-const PORT = process.env.PORT || 5000;\n-\n-// Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n-\n-// Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n-  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n-}\n-\n-// Middleware\n-app.use(cors());\n-app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n-\n-// Multer configuration for file uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n-});\n-\n-const upload = multer({\n-  storage: storage,\n-  limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n-  },\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n-    }\n-  }\n-});\n-\n-// Helper functions\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n-    return JSON.parse(data);\n-  } catch (err) {\n-    console.error('Error reading users file:', err);\n-    return { users: [] };\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n-  } catch (err) {\n-    console.error('Error writing users file:', err);\n-    throw err;\n-  }\n-};\n-\n-// Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n-  async (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-\n-      // Validate user ID\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'Invalid user ID'\n-        });\n-      }\n-\n-      // Check if file was uploaded\n-      if (!req.file) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'No image file provided'\n-        });\n-      }\n-\n-      const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n-\n-      if (userIndex === -1) {\n-        return res.status(404).json({\n-          success: false,\n-          message: 'User not found'\n-        });\n-      }\n-\n-      // Delete old profile image if it exists and isn't the default\n-      const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n-        if (fs.existsSync(oldImagePath)) {\n-          fs.unlinkSync(oldImagePath);\n-        }\n-      }\n-\n-      // Update user with new image path\n-      const newImagePath = `/public/profileImages/${req.file.filename}`;\n-      usersData.users[userIndex].profileImage = newImagePath;\n-      writeUsers(usersData);\n-\n-      res.json({\n-        success: true,\n-        message: 'Profile image updated successfully',\n-        data: {\n-          profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n-      });\n-\n-    } catch (err) {\n-      console.error('Error updating profile image:', err);\n-      res.status(500).json({\n-        success: false,\n-        message: 'Internal server error',\n-        error: err.message\n-      });\n-    }\n-  }\n-);\n-\n-// Get user endpoint\n-router.get('/api/users/:userId', (req, res) => {\n-  try {\n-    const { userId } = req.params;\n-    const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n-\n-    if (!user) {\n-      return res.status(404).json({\n-        success: false,\n-        message: 'User not found'\n-      });\n-    }\n-\n-    res.json({\n-      success: true,\n-      data: user\n-    });\n-\n-  } catch (err) {\n-    console.error('Error fetching user:', err);\n-    res.status(500).json({\n-      success: false,\n-      message: 'Internal server error'\n-    });\n-  }\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745025168856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+const express = require(\"express\");\n+const multer = require(\"multer\");\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+\n+const router = express.Router();\n+const USERS_FILE = \"./jsonFiles/account.json\";\n+\n+// Serve profile images statically\n+router.use(\"/public/profileImage\", express.static(\"public/profileImage\"));\n+\n+// Multer storage config\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    const dir = path.join(\"public\", \"profileImage\");\n+    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n+    cb(null, dir);\n+  },\n+  filename: (req, file, cb) => {\n+    cb(null, ${Date.now()}-${file.originalname});\n+  },\n+});\n+const upload = multer({ storage });\n+\n+// Read users\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, \"utf-8\");\n+    return JSON.parse(data).users;\n+  } catch (err) {\n+    return [];\n+  }\n+};\n+\n+// Write users\n+const writeUsers = (users) => {\n+  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+};\n+\n+// Update profile image\n+router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n+  const { userId } = req.params;\n+  const users = readUsers();\n+  const index = users.findIndex(u => u.id === parseInt(userId));\n+\n+  if (index === -1) return res.status(404).json({ message: \"User not found\" });\n+  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n+\n+  // Optional: Remove old image if stored in the same folder\n+  const oldImage = users[index].profileImage;\n+  if (oldImage && oldImage.startsWith(\"/public/profileImage\")) {\n+    const oldImagePath = path.join(__dirname, \"..\", oldImage);\n+    if (fs.existsSync(oldImagePath)) fs.unlinkSync(oldImagePath);\n+  }\n+\n+  users[index].profileImage = `/public/profileImage/${req.file.filename};\n+  writeUsers(users);\n+\n+  res.json({ message: \"Profile image updated\", user: users[index] });\n+});\n+\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745025176508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n     cb(null, dir);\n   },\n   filename: (req, file, cb) => {\n-    cb(null, ${Date.now()}-${file.originalname});\n+    cb(null, `${Date.now()}-${file.originalname});\n   },\n });\n const upload = multer({ storage });\n \n@@ -52,9 +52,9 @@\n     const oldImagePath = path.join(__dirname, \"..\", oldImage);\n     if (fs.existsSync(oldImagePath)) fs.unlinkSync(oldImagePath);\n   }\n \n-  users[index].profileImage = `/public/profileImage/${req.file.filename};\n+  users[index].profileImage = `/public/profileImage/${req.file.filename}`;\n   writeUsers(users);\n \n   res.json({ message: \"Profile image updated\", user: users[index] });\n });\n"
                },
                {
                    "date": 1745025773452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,62 +1,166 @@\n-const express = require(\"express\");\n-const multer = require(\"multer\");\n-const fs = require(\"fs\");\n-const path = require(\"path\");\n-\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n const router = express.Router();\n-const USERS_FILE = \"./jsonFiles/account.json\";\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n \n-// Serve profile images statically\n-router.use(\"/public/profileImage\", express.static(\"public/profileImage\"));\n+// Configuration\n+const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n-// Multer storage config\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n-    const dir = path.join(\"public\", \"profileImage\");\n-    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n-    cb(null, dir);\n+    cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n-    cb(null, `${Date.now()}-${file.originalname});\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n   },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n });\n-const upload = multer({ storage });\n \n-// Read users\n+// Helper functions\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, \"utf-8\");\n-    return JSON.parse(data).users;\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n   } catch (err) {\n-    return [];\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n   }\n };\n \n-// Write users\n const writeUsers = (users) => {\n-  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n };\n \n-// Update profile image\n-router.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n-  const { userId } = req.params;\n-  const users = readUsers();\n-  const index = users.findIndex(u => u.id === parseInt(userId));\n+// Update profile image endpoint\n+router.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n \n-  if (index === -1) return res.status(404).json({ message: \"User not found\" });\n-  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n \n-  // Optional: Remove old image if stored in the same folder\n-  const oldImage = users[index].profileImage;\n-  if (oldImage && oldImage.startsWith(\"/public/profileImage\")) {\n-    const oldImagePath = path.join(__dirname, \"..\", oldImage);\n-    if (fs.existsSync(oldImagePath)) fs.unlinkSync(oldImagePath);\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = `/public/profileImages/${req.file.filename}`;\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n   }\n+);\n \n-  users[index].profileImage = `/public/profileImage/${req.file.filename}`;\n-  writeUsers(users);\n+// Get user endpoint\n+router.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n \n-  res.json({ message: \"Profile image updated\", user: users[index] });\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n });\n \n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745026632357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,166 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n-const router = express.Router();\n-const app = express();\n-const PORT = process.env.PORT || 5000;\n-\n-// Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n-\n-// Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n-  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n-}\n-\n-// Middleware\n-app.use(cors());\n-app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n-\n-// Multer configuration for file uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n-});\n-\n-const upload = multer({\n-  storage: storage,\n-  limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n-  },\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n-    }\n-  }\n-});\n-\n-// Helper functions\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n-    return JSON.parse(data);\n-  } catch (err) {\n-    console.error('Error reading users file:', err);\n-    return { users: [] };\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n-  } catch (err) {\n-    console.error('Error writing users file:', err);\n-    throw err;\n-  }\n-};\n-\n-// Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n-  async (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-\n-      // Validate user ID\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'Invalid user ID'\n-        });\n-      }\n-\n-      // Check if file was uploaded\n-      if (!req.file) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'No image file provided'\n-        });\n-      }\n-\n-      const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n-\n-      if (userIndex === -1) {\n-        return res.status(404).json({\n-          success: false,\n-          message: 'User not found'\n-        });\n-      }\n-\n-      // Delete old profile image if it exists and isn't the default\n-      const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n-        if (fs.existsSync(oldImagePath)) {\n-          fs.unlinkSync(oldImagePath);\n-        }\n-      }\n-\n-      // Update user with new image path\n-      const newImagePath = `/public/profileImages/${req.file.filename}`;\n-      usersData.users[userIndex].profileImage = newImagePath;\n-      writeUsers(usersData);\n-\n-      res.json({\n-        success: true,\n-        message: 'Profile image updated successfully',\n-        data: {\n-          profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n-      });\n-\n-    } catch (err) {\n-      console.error('Error updating profile image:', err);\n-      res.status(500).json({\n-        success: false,\n-        message: 'Internal server error',\n-        error: err.message\n-      });\n-    }\n-  }\n-);\n-\n-// Get user endpoint\n-router.get('/api/users/:userId', (req, res) => {\n-  try {\n-    const { userId } = req.params;\n-    const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n-\n-    if (!user) {\n-      return res.status(404).json({\n-        success: false,\n-        message: 'User not found'\n-      });\n-    }\n-\n-    res.json({\n-      success: true,\n-      data: user\n-    });\n-\n-  } catch (err) {\n-    console.error('Error fetching user:', err);\n-    res.status(500).json({\n-      success: false,\n-      message: 'Internal server error'\n-    });\n-  }\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745026641111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n+\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n+\n+// Configuration\n+const USERS_FILE = path.join(__dirname, 'users.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, PROFILE_IMAGES_DIR);\n+  },\n+  filename: (req, file, cb) => {\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n+  },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n+});\n+\n+// Helper functions\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n+  } catch (err) {\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n+};\n+\n+// Update profile image endpoint\n+app.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n+\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(__dirname, 'public', oldImage);\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = /public/profile-images/${req.file.filename};\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n+  }\n+);\n+\n+// Get user endpoint (for testing)\n+app.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n+\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n+});\n+\n"
                },
                {
                    "date": 1745026647149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = /public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profile-images/${req.file.filename};\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745026659595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profile-images/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n@@ -162,4 +162,5 @@\n     });\n   }\n });\n \n+modu\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745026666986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-modu\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745026684501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint (for testing)\n-app.get('/api/users/:userId', (req, res) => {\n+.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745026700902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n   }\n };\n \n // Update profile image endpoint\n-app.put('/api/users/:userId/profile-image', \n+.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint (for testing)\n-.get('/api/users/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745026739380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-\n+c\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n@@ -68,9 +68,9 @@\n   }\n };\n \n // Update profile image endpoint\n-.put('/api/users/:userId/profile-image', \n+router.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n"
                },
                {
                    "date": 1745026789303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,14 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-c\n+const router = express.Router();\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, 'users.json');\n+const USERS_FILE = path.join(__dirname, 'u');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745026795421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, 'u');\n+const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745027632376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,166 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n-const router = express.Router();\n-const app = express();\n-const PORT = process.env.PORT || 5000;\n-\n-// Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n-\n-// Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n-  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n-}\n-\n-// Middleware\n-app.use(cors());\n-app.use(express.json());\n-app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n-\n-// Multer configuration for file uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n-});\n-\n-const upload = multer({\n-  storage: storage,\n-  limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n-  },\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n-    }\n-  }\n-});\n-\n-// Helper functions\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n-    return JSON.parse(data);\n-  } catch (err) {\n-    console.error('Error reading users file:', err);\n-    return { users: [] };\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n-  } catch (err) {\n-    console.error('Error writing users file:', err);\n-    throw err;\n-  }\n-};\n-\n-// Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n-  async (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-\n-      // Validate user ID\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'Invalid user ID'\n-        });\n-      }\n-\n-      // Check if file was uploaded\n-      if (!req.file) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'No image file provided'\n-        });\n-      }\n-\n-      const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n-\n-      if (userIndex === -1) {\n-        return res.status(404).json({\n-          success: false,\n-          message: 'User not found'\n-        });\n-      }\n-\n-      // Delete old profile image if it exists and isn't the default\n-      const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, 'public', oldImage);\n-        if (fs.existsSync(oldImagePath)) {\n-          fs.unlinkSync(oldImagePath);\n-        }\n-      }\n-\n-      // Update user with new image path\n-      const newImagePath = `/public/profile-images/${req.file.filename}`;\n-      usersData.users[userIndex].profileImage = newImagePath;\n-      writeUsers(usersData);\n-\n-      res.json({\n-        success: true,\n-        message: 'Profile image updated successfully',\n-        data: {\n-          profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n-      });\n-\n-    } catch (err) {\n-      console.error('Error updating profile image:', err);\n-      res.status(500).json({\n-        success: false,\n-        message: 'Internal server error',\n-        error: err.message\n-      });\n-    }\n-  }\n-);\n-\n-// Get user endpoint (for testing)\n-router.get('/api/users/:userId', (req, res) => {\n-  try {\n-    const { userId } = req.params;\n-    const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n-\n-    if (!user) {\n-      return res.status(404).json({\n-        success: false,\n-        message: 'User not found'\n-      });\n-    }\n-\n-    res.json({\n-      success: true,\n-      data: user\n-    });\n-\n-  } catch (err) {\n-    console.error('Error fetching user:', err);\n-    res.status(500).json({\n-      success: false,\n-      message: 'Internal server error'\n-    });\n-  }\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745027641450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n+\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n+\n+// Configuration\n+const USERS_FILE = path.join(__dirname, 'users.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, PROFILE_IMAGES_DIR);\n+  },\n+  filename: (req, file, cb) => {\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n+  },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n+});\n+\n+// Helper functions\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n+  } catch (err) {\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n+};\n+\n+// Update profile image endpoint\n+app.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n+\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(__dirname, 'public', oldImage);\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = /public/profile-images/${req.file.filename};\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n+  }\n+);\n+\n+// Get user endpoint (for testing)\n+app.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n+\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n+});\n+\n"
                },
                {
                    "date": 1745027647632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,4 +162,5 @@\n     });\n   }\n });\n \n+module.exports = app;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745027654821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-module.exports = app;\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745027663157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = /public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profile-images/${req.file.filename};\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745027721548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,14 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-\n+const router = express.Router();\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, 'users.json');\n+const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n@@ -68,9 +68,9 @@\n   }\n };\n \n // Update profile image endpoint\n-app.put('/api/users/:userId/profile-image', \n+router.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profile-images/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint (for testing)\n-app.get('/api/users/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745027851326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,166 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n-const router = express.Router();\n-const app = express();\n-const PORT = process.env.PORT || 5000;\n-\n-// Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles', 'account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n-\n-// Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n-  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n-}\n-\n-// Middleware\n-app.use(cors());\n-app.use(express.json());\n-app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n-\n-// Multer configuration for file uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n-});\n-\n-const upload = multer({\n-  storage: storage,\n-  limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n-  },\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n-    }\n-  }\n-});\n-\n-// Helper functions\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n-    return JSON.parse(data);\n-  } catch (err) {\n-    console.error('Error reading users file:', err);\n-    return { users: [] };\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n-  } catch (err) {\n-    console.error('Error writing users file:', err);\n-    throw err;\n-  }\n-};\n-\n-// Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n-  async (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-\n-      // Validate user ID\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'Invalid user ID'\n-        });\n-      }\n-\n-      // Check if file was uploaded\n-      if (!req.file) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'No image file provided'\n-        });\n-      }\n-\n-      const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n-\n-      if (userIndex === -1) {\n-        return res.status(404).json({\n-          success: false,\n-          message: 'User not found'\n-        });\n-      }\n-\n-      // Delete old profile image if it exists and isn't the default\n-      const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, 'public', oldImage);\n-        if (fs.existsSync(oldImagePath)) {\n-          fs.unlinkSync(oldImagePath);\n-        }\n-      }\n-\n-      // Update user with new image path\n-      const newImagePath = `/public/profile-images/${req.file.filename}`;\n-      usersData.users[userIndex].profileImage = newImagePath;\n-      writeUsers(usersData);\n-\n-      res.json({\n-        success: true,\n-        message: 'Profile image updated successfully',\n-        data: {\n-          profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n-      });\n-\n-    } catch (err) {\n-      console.error('Error updating profile image:', err);\n-      res.status(500).json({\n-        success: false,\n-        message: 'Internal server error',\n-        error: err.message\n-      });\n-    }\n-  }\n-);\n-\n-// Get user endpoint (for testing)\n-router.get('/api/users/:userId', (req, res) => {\n-  try {\n-    const { userId } = req.params;\n-    const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n-\n-    if (!user) {\n-      return res.status(404).json({\n-        success: false,\n-        message: 'User not found'\n-      });\n-    }\n-\n-    res.json({\n-      success: true,\n-      data: user\n-    });\n-\n-  } catch (err) {\n-    console.error('Error fetching user:', err);\n-    res.status(500).json({\n-      success: false,\n-      message: 'Internal server error'\n-    });\n-  }\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745027857777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n+\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n+\n+// Configuration\n+const USERS_FILE = path.join(__dirname, 'users.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, PROFILE_IMAGES_DIR);\n+  },\n+  filename: (req, file, cb) => {\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n+  },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n+});\n+\n+// Helper functions\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n+  } catch (err) {\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n+};\n+\n+// Update profile image endpoint\n+app.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n+\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(__dirname, 'public', oldImage);\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = /public/profile-images/${req.file.filename};\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n+  }\n+);\n+\n+// Get user endpoint (for testing)\n+app.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n+\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n+});\n+\n"
                },
                {
                    "date": 1745027863993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,4 +162,5 @@\n     });\n   }\n });\n \n+module.exports = app;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745027870269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-module.exports = app;\n\\ No newline at end of file\n+module.exports = ro;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745027880294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n+const { router } = require('json-server');\n \n const app = express();\n const PORT = process.env.PORT || 5000;\n \n@@ -110,9 +111,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = /public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profile-images/${req.file.filename};\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n@@ -162,5 +163,5 @@\n     });\n   }\n });\n \n-module.exports = ro;\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745027917458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profile-images/${req.file.filename};\n+      const newImagePath = `/public/profile-images/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n@@ -136,9 +136,9 @@\n   }\n );\n \n // Get user endpoint (for testing)\n-app.get('/api/users/:userId', (req, res) => {\n+.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745027959355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n   }\n };\n \n // Update profile image endpoint\n-app.put('/api/users/:userId/profile-image', \n+.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n@@ -136,9 +136,9 @@\n   }\n );\n \n // Get user endpoint (for testing)\n-.get('/api/users/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745028010401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-\n+co\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n@@ -69,9 +69,9 @@\n   }\n };\n \n // Update profile image endpoint\n-.put('/api/users/:userId/profile-image', \n+router.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n"
                },
                {
                    "date": 1745028016330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-co\n+con\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745028021539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-con\n+const \n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745028038431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-const \n+const router\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745028048307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-const router\n+const router.\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745028070746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-const router.\n+const \n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745028077141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n const { router } = require('json-server');\n-const \n+const  router = express.Router();\n+\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745028094354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-const { router } = require('json-server');\n+// const { router } = require('json-server');\n const  router = express.Router();\n \n const app = express();\n const PORT = process.env.PORT || 5000;\n"
                },
                {
                    "date": 1745028111644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, 'users.json');\n+const USERS_FILE = path.join(__dirname, '');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745028120573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,13 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '');\n+const USERS_FILE = path.join(__dirname, ',,/');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+if (!fs.existsSync(PROFILE_IMAGES_DIR))\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n }\n \n // Middleware\n"
                },
                {
                    "date": 1745028128183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,13 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, ',,/');\n+const USERS_FILE = path.join(__dirname, '../');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR))\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n }\n \n // Middleware\n"
                },
                {
                    "date": 1745028134129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../');\n+const USERS_FILE = path.join(__dirname, '../j');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745028141089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../j');\n+const USERS_FILE = path.join(__dirname, '../json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745028147898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../json');\n+const USERS_FILE = path.join(__dirname, '../jsonFiles');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745028214822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles');\n+const USERS_FILE = path.join(__dirname, '');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745028221846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '');\n+const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745028273956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profile-images');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileimages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745028280740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profile-images', express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profilemages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745028289273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileimages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profilemages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -20,9 +20,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profilemages', express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745028394991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profilemages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -112,9 +112,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profile-images/${req.file.filename}`;\n+      const newImagePath = `/public/profile-mages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745029461433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,168 +0,0 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n-// const { router } = require('json-server');\n-const  router = express.Router();\n-\n-const app = express();\n-const PORT = process.env.PORT || 5000;\n-\n-// Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n-\n-// Ensure directories exist\n-if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n-  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n-}\n-\n-// Middleware\n-app.use(cors());\n-app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n-\n-// Multer configuration for file uploads\n-const storage = multer.diskStorage({\n-  destination: (req, file, cb) => {\n-    cb(null, PROFILE_IMAGES_DIR);\n-  },\n-  filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n-    const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n-});\n-\n-const upload = multer({\n-  storage: storage,\n-  limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n-  },\n-  fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n-    if (allowedTypes.includes(file.mimetype)) {\n-      cb(null, true);\n-    } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n-    }\n-  }\n-});\n-\n-// Helper functions\n-const readUsers = () => {\n-  try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n-    return JSON.parse(data);\n-  } catch (err) {\n-    console.error('Error reading users file:', err);\n-    return { users: [] };\n-  }\n-};\n-\n-const writeUsers = (users) => {\n-  try {\n-    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n-  } catch (err) {\n-    console.error('Error writing users file:', err);\n-    throw err;\n-  }\n-};\n-\n-// Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n-  async (req, res) => {\n-    try {\n-      const { userId } = req.params;\n-\n-      // Validate user ID\n-      if (!userId || isNaN(parseInt(userId))) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'Invalid user ID'\n-        });\n-      }\n-\n-      // Check if file was uploaded\n-      if (!req.file) {\n-        return res.status(400).json({\n-          success: false,\n-          message: 'No image file provided'\n-        });\n-      }\n-\n-      const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n-\n-      if (userIndex === -1) {\n-        return res.status(404).json({\n-          success: false,\n-          message: 'User not found'\n-        });\n-      }\n-\n-      // Delete old profile image if it exists and isn't the default\n-      const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(__dirname, 'public', oldImage);\n-        if (fs.existsSync(oldImagePath)) {\n-          fs.unlinkSync(oldImagePath);\n-        }\n-      }\n-\n-      // Update user with new image path\n-      const newImagePath = `/public/profile-mages/${req.file.filename}`;\n-      usersData.users[userIndex].profileImage = newImagePath;\n-      writeUsers(usersData);\n-\n-      res.json({\n-        success: true,\n-        message: 'Profile image updated successfully',\n-        data: {\n-          profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n-      });\n-\n-    } catch (err) {\n-      console.error('Error updating profile image:', err);\n-      res.status(500).json({\n-        success: false,\n-        message: 'Internal server error',\n-        error: err.message\n-      });\n-    }\n-  }\n-);\n-\n-// Get user endpoint (for testing)\n-router.get('/api/users/:userId', (req, res) => {\n-  try {\n-    const { userId } = req.params;\n-    const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n-\n-    if (!user) {\n-      return res.status(404).json({\n-        success: false,\n-        message: 'User not found'\n-      });\n-    }\n-\n-    res.json({\n-      success: true,\n-      data: user\n-    });\n-\n-  } catch (err) {\n-    console.error('Error fetching user:', err);\n-    res.status(500).json({\n-      success: false,\n-      message: 'Internal server error'\n-    });\n-  }\n-});\n-\n-module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745029467522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n+\n+const app = express();\n+const PORT = process.env.PORT || 5000;\n+\n+// Configuration\n+const USERS_FILE = path.join(__dirname, 'users.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+\n+// Ensure directories exist\n+if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n+  fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n+}\n+\n+// Middleware\n+app.use(cors());\n+app.use(express.json());\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+\n+// Multer configuration for file uploads\n+const storage = multer.diskStorage({\n+  destination: (req, file, cb) => {\n+    cb(null, PROFILE_IMAGES_DIR);\n+  },\n+  filename: (req, file, cb) => {\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const ext = path.extname(file.originalname);\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n+});\n+\n+const upload = multer({\n+  storage: storage,\n+  limits: {\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n+  },\n+  fileFilter: (req, file, cb) => {\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    if (allowedTypes.includes(file.mimetype)) {\n+      cb(null, true);\n+    } else {\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+    }\n+  }\n+});\n+\n+// Helper functions\n+const readUsers = () => {\n+  try {\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    return JSON.parse(data);\n+  } catch (err) {\n+    console.error('Error reading users file:', err);\n+    return { users: [] };\n+  }\n+};\n+\n+const writeUsers = (users) => {\n+  try {\n+    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n+  } catch (err) {\n+    console.error('Error writing users file:', err);\n+    throw err;\n+  }\n+};\n+\n+// Update profile image endpoint\n+app.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n+  async (req, res) => {\n+    try {\n+      const { userId } = req.params;\n+\n+      // Validate user ID\n+      if (!userId || isNaN(parseInt(userId))) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'Invalid user ID'\n+        });\n+      }\n+\n+      // Check if file was uploaded\n+      if (!req.file) {\n+        return res.status(400).json({\n+          success: false,\n+          message: 'No image file provided'\n+        });\n+      }\n+\n+      const usersData = readUsers();\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+\n+      if (userIndex === -1) {\n+        return res.status(404).json({\n+          success: false,\n+          message: 'User not found'\n+        });\n+      }\n+\n+      // Delete old profile image if it exists and isn't the default\n+      const oldImage = usersData.users[userIndex].profileImage;\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n+        if (fs.existsSync(oldImagePath)) {\n+          fs.unlinkSync(oldImagePath);\n+        }\n+      }\n+\n+      // Update user with new image path\n+      const newImagePath = /public/profileImages/${req.file.filename};\n+      usersData.users[userIndex].profileImage = newImagePath;\n+      writeUsers(usersData);\n+\n+      res.json({\n+        success: true,\n+        message: 'Profile image updated successfully',\n+        data: {\n+          profileImage: newImagePath,\n+          user: usersData.users[userIndex]\n+        }\n+      });\n+\n+    } catch (err) {\n+      console.error('Error updating profile image:', err);\n+      res.status(500).json({\n+        success: false,\n+        message: 'Internal server error',\n+        error: err.message\n+      });\n+    }\n+  }\n+);\n+\n+// Get user endpoint\n+app.get('/api/users/:userId', (req, res) => {\n+  try {\n+    const { userId } = req.params;\n+    const usersData = readUsers();\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n+\n+    if (!user) {\n+      return res.status(404).json({\n+        success: false,\n+        message: 'User not found'\n+      });\n+    }\n+\n+    res.json({\n+      success: true,\n+      data: user\n+    });\n+\n+  } catch (err) {\n+    console.error('Error fetching user:', err);\n+    res.status(500).json({\n+      success: false,\n+      message: 'Internal server error'\n+    });\n+  }\n+});\n+\n"
                },
                {
                    "date": 1745029473258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,4 +162,5 @@\n     });\n   }\n });\n \n+mo``\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745029481541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-mo``\n\\ No newline at end of file\n+module.exports = ;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745029494789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = /public/profileImages/${req.file.filename};\n+      const newImagePath = `/public/profileImages/${req.file.filename};\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n@@ -162,5 +162,5 @@\n     });\n   }\n });\n \n-module.exports = ;\n\\ No newline at end of file\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745029504761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-\n+c\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profileImages/${req.file.filename};\n+      const newImagePath = `/public/profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745029513046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-c\n+const rou\n const app = express();\n const PORT = process.env.PORT || 5000;\n \n // Configuration\n"
                },
                {
                    "date": 1745029525046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,11 @@\n const multer = require('multer');\n const path = require('path');\n const fs = require('fs');\n const cors = require('cors');\n-const rou\n+const router = express.Router();\n const app = express();\n const PORT = process.env.PORT || 5000;\n-\n // Configuration\n const USERS_FILE = path.join(__dirname, 'users.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n"
                },
                {
                    "date": 1745029531940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n const fs = require('fs');\n const cors = require('cors');\n const router = express.Router();\n const app = express();\n-const PORT = process.env.PORT || 5000;\n+\n+\n // Configuration\n const USERS_FILE = path.join(__dirname, 'users.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n"
                },
                {
                    "date": 1745029538153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n \n // Configuration\n-const USERS_FILE = path.join(__dirname, 'users.json');\n+const USERS_FILE = path.join(__dirname, '');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745029544035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '');\n+const USERS_FILE = path.join(__dirname, '../');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745029551882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../');\n+const USERS_FILE = path.join(__dirname, ',,.');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745029558113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n \n // Configuration\n-const USERS_FILE = path.join(__dirname, ',,.');\n+const USERS_FILE = path.join(__dirname, '../');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745029570653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../');\n+const USERS_FILE = path.join(__dirname, '../j');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745029578929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../j');\n+const USERS_FILE = path.join(__dirname, '../jsonFile');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745029584640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFile');\n+const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n"
                },
                {
                    "date": 1745029655036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n   }\n };\n \n // Update profile image endpoint\n-app.put('/api/users/:userId/profile-image', \n+.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n"
                },
                {
                    "date": 1745029666788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n   }\n };\n \n // Update profile image endpoint\n-.put('/api/users/:userId/profile-image', \n+router.put('/api/users/:userId/profile-image', \n   upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-app.get('/api/users/:userId', (req, res) => {\n+.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745030194072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'publicprofileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-.get('/api/users/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745030307487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'publicprofileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745030671514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,11 @@\n const cors = require('cors');\n const router = express.Router();\n const app = express();\n \n-\n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImage');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -18,9 +17,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImage', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n@@ -110,9 +109,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profileImages/${req.file.filename}`;\n+      const newImagePath = `/public/profileImage/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745030787657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImage');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -17,9 +17,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImage', express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n@@ -109,9 +109,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profileImage/${req.file.filename}`;\n+      const newImagePath = `/public/profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745031962170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n+const express = require(\"express\");\n+const multer = require(\"multer\");\n+const path = require(\"path\");\n+const fs = require(\"fs\");\n+const cors = require(\"cors\");\n const router = express.Router();\n const app = express();\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"publicprofileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -17,94 +17,100 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use(\"/public/profileImages\", express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n     cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n     const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n+    cb(null, \"profile-\" + uniqueSuffix + ext);\n+  },\n });\n \n const upload = multer({\n   storage: storage,\n   limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n+    fileSize: 5 * 1024 * 1024, // 5MB limit\n   },\n   fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n     if (allowedTypes.includes(file.mimetype)) {\n       cb(null, true);\n     } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+      cb(new Error(\"Only JPEG, PNG, and GIF images are allowed\"));\n     }\n-  }\n+  },\n });\n \n // Helper functions\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    const data = fs.readFileSync(USERS_FILE, \"utf8\");\n     return JSON.parse(data);\n   } catch (err) {\n-    console.error('Error reading users file:', err);\n+    console.error(\"Error reading users file:\", err);\n     return { users: [] };\n   }\n };\n \n const writeUsers = (users) => {\n   try {\n     fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n   } catch (err) {\n-    console.error('Error writing users file:', err);\n+    console.error(\"Error writing users file:\", err);\n     throw err;\n   }\n };\n \n // Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n+router.put(\n+  \"/api/users/:userId/profile-image\",\n+  upload.single(\"profileImage\"),\n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n \n       // Validate user ID\n       if (!userId || isNaN(parseInt(userId))) {\n         return res.status(400).json({\n           success: false,\n-          message: 'Invalid user ID'\n+          message: \"Invalid user ID\",\n         });\n       }\n \n       // Check if file was uploaded\n       if (!req.file) {\n         return res.status(400).json({\n           success: false,\n-          message: 'No image file provided'\n+          message: \"No image file provided\",\n         });\n       }\n \n       const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+      const userIndex = usersData.users.findIndex(\n+        (user) => user.id === parseInt(userId)\n+      );\n \n       if (userIndex === -1) {\n         return res.status(404).json({\n           success: false,\n-          message: 'User not found'\n+          message: \"User not found\",\n         });\n       }\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n+      if (oldImage && !oldImage.includes(\"default-avatar\")) {\n+        const oldImagePath = path.join(\n+          PROFILE_IMAGES_DIR,\n+          path.basename(oldImage)\n+        );\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n@@ -115,51 +121,49 @@\n       writeUsers(usersData);\n \n       res.json({\n         success: true,\n-        message: 'Profile image updated successfully',\n+        message: \"Profile image updated successfully\",\n         data: {\n           profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n+          user: usersData.users[userIndex],\n+        },\n       });\n-\n     } catch (err) {\n-      console.error('Error updating profile image:', err);\n+      console.error(\"Error updating profile image:\", err);\n       res.status(500).json({\n         success: false,\n-        message: 'Internal server error',\n-        error: err.message\n+        message: \"Internal server error\",\n+        error: err.message,\n       });\n     }\n   }\n );\n \n // Get user endpoint\n-router.get('/api/users/:userId', (req, res) => {\n+router.get(\"/api/users/:userId\", (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n+    const user = usersData.users.find((user) => user.id === parseInt(userId));\n \n     if (!user) {\n       return res.status(404).json({\n         success: false,\n-        message: 'User not found'\n+        message: \"User not found\",\n       });\n     }\n \n     res.json({\n       success: true,\n-      data: user\n+      data: user,\n     });\n-\n\\ No newline at end of file\n   } catch (err) {\n-    console.error('Error fetching user:', err);\n+    console.error(\"Error fetching user:\", err);\n     res.status(500).json({\n       success: false,\n-      message: 'Internal server error'\n+      message: \"Internal server error\",\n     });\n   }\n });\n \n-module.exports = router;\n+module.exports = router;\n"
                },
                {
                    "date": 1745031968315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"publicprofileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"/public/profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745032008424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"/public/profileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745032016435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"publicprofileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745032053891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"publicprofileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745032574204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n-const express = require(\"express\");\n-const multer = require(\"multer\");\n-const path = require(\"path\");\n-const fs = require(\"fs\");\n-const cors = require(\"cors\");\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n const router = express.Router();\n const app = express();\n \n+\n // Configuration\n-const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n+const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -17,100 +18,94 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use(\"/public/profileImages\", express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n     cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n     const ext = path.extname(file.originalname);\n-    cb(null, \"profile-\" + uniqueSuffix + ext);\n-  },\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n });\n \n const upload = multer({\n   storage: storage,\n   limits: {\n-    fileSize: 5 * 1024 * 1024, // 5MB limit\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n   },\n   fileFilter: (req, file, cb) => {\n-    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n     if (allowedTypes.includes(file.mimetype)) {\n       cb(null, true);\n     } else {\n-      cb(new Error(\"Only JPEG, PNG, and GIF images are allowed\"));\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n     }\n-  },\n+  }\n });\n \n // Helper functions\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, \"utf8\");\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n     return JSON.parse(data);\n   } catch (err) {\n-    console.error(\"Error reading users file:\", err);\n+    console.error('Error reading users file:', err);\n     return { users: [] };\n   }\n };\n \n const writeUsers = (users) => {\n   try {\n     fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n   } catch (err) {\n-    console.error(\"Error writing users file:\", err);\n+    console.error('Error writing users file:', err);\n     throw err;\n   }\n };\n \n // Update profile image endpoint\n-router.put(\n-  \"/api/users/:userId/profile-image\",\n-  upload.single(\"profileImage\"),\n+router.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n \n       // Validate user ID\n       if (!userId || isNaN(parseInt(userId))) {\n         return res.status(400).json({\n           success: false,\n-          message: \"Invalid user ID\",\n+          message: 'Invalid user ID'\n         });\n       }\n \n       // Check if file was uploaded\n       if (!req.file) {\n         return res.status(400).json({\n           success: false,\n-          message: \"No image file provided\",\n+          message: 'No image file provided'\n         });\n       }\n \n       const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(\n-        (user) => user.id === parseInt(userId)\n-      );\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n \n       if (userIndex === -1) {\n         return res.status(404).json({\n           success: false,\n-          message: \"User not found\",\n+          message: 'User not found'\n         });\n       }\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes(\"default-avatar\")) {\n-        const oldImagePath = path.join(\n-          PROFILE_IMAGES_DIR,\n-          path.basename(oldImage)\n-        );\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n@@ -121,49 +116,51 @@\n       writeUsers(usersData);\n \n       res.json({\n         success: true,\n-        message: \"Profile image updated successfully\",\n+        message: 'Profile image updated successfully',\n         data: {\n           profileImage: newImagePath,\n-          user: usersData.users[userIndex],\n-        },\n+          user: usersData.users[userIndex]\n+        }\n       });\n+\n     } catch (err) {\n-      console.error(\"Error updating profile image:\", err);\n+      console.error('Error updating profile image:', err);\n       res.status(500).json({\n         success: false,\n-        message: \"Internal server error\",\n-        error: err.message,\n+        message: 'Internal server error',\n+        error: err.message\n       });\n     }\n   }\n );\n \n // Get user endpoint\n-router.get(\"/api/users/:userId\", (req, res) => {\n+.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n-    const user = usersData.users.find((user) => user.id === parseInt(userId));\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n \n     if (!user) {\n       return res.status(404).json({\n         success: false,\n-        message: \"User not found\",\n+        message: 'User not found'\n       });\n     }\n \n     res.json({\n       success: true,\n-      data: user,\n+      data: user\n     });\n+\n   } catch (err) {\n-    console.error(\"Error fetching user:\", err);\n+    console.error('Error fetching user:', err);\n     res.status(500).json({\n       success: false,\n-      message: \"Internal server error\",\n+      message: 'Internal server error'\n     });\n   }\n });\n \n-module.exports = router;\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745032607246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,15 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n+const express = require(\"express\");\n+const multer = require(\"multer\");\n+const path = require(\"path\");\n+const fs = require(\"fs\");\n+const cors = require(\"cors\");\n const router = express.Router();\n const app = express();\n \n-\n // Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"public/profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -18,94 +17,100 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use(\"/public/profileImages\", express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n     cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n     const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n+    cb(null, \"profile-\" + uniqueSuffix + ext);\n+  },\n });\n \n const upload = multer({\n   storage: storage,\n   limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n+    fileSize: 5 * 1024 * 1024, // 5MB limit\n   },\n   fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n     if (allowedTypes.includes(file.mimetype)) {\n       cb(null, true);\n     } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+      cb(new Error(\"Only JPEG, PNG, and GIF images are allowed\"));\n     }\n-  }\n+  },\n });\n \n // Helper functions\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    const data = fs.readFileSync(USERS_FILE, \"utf8\");\n     return JSON.parse(data);\n   } catch (err) {\n-    console.error('Error reading users file:', err);\n+    console.error(\"Error reading users file:\", err);\n     return { users: [] };\n   }\n };\n \n const writeUsers = (users) => {\n   try {\n     fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n   } catch (err) {\n-    console.error('Error writing users file:', err);\n+    console.error(\"Error writing users file:\", err);\n     throw err;\n   }\n };\n \n // Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n+router.put(\n+  \"/api/users/:userId/profile-image\",\n+  upload.single(\"profileImage\"),\n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n \n       // Validate user ID\n       if (!userId || isNaN(parseInt(userId))) {\n         return res.status(400).json({\n           success: false,\n-          message: 'Invalid user ID'\n+          message: \"Invalid user ID\",\n         });\n       }\n \n       // Check if file was uploaded\n       if (!req.file) {\n         return res.status(400).json({\n           success: false,\n-          message: 'No image file provided'\n+          message: \"No image file provided\",\n         });\n       }\n \n       const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+      const userIndex = usersData.users.findIndex(\n+        (user) => user.id === parseInt(userId)\n+      );\n \n       if (userIndex === -1) {\n         return res.status(404).json({\n           success: false,\n-          message: 'User not found'\n+          message: \"User not found\",\n         });\n       }\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n+      if (oldImage && !oldImage.includes(\"default-avatar\")) {\n+        const oldImagePath = path.join(\n+          PROFILE_IMAGES_DIR,\n+          path.basename(oldImage)\n+        );\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n@@ -116,51 +121,49 @@\n       writeUsers(usersData);\n \n       res.json({\n         success: true,\n-        message: 'Profile image updated successfully',\n+        message: \"Profile image updated successfully\",\n         data: {\n           profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n+          user: usersData.users[userIndex],\n+        },\n       });\n-\n     } catch (err) {\n-      console.error('Error updating profile image:', err);\n+      console.error(\"Error updating profile image:\", err);\n       res.status(500).json({\n         success: false,\n-        message: 'Internal server error',\n-        error: err.message\n+        message: \"Internal server error\",\n+        error: err.message,\n       });\n     }\n   }\n );\n \n // Get user endpoint\n-.get('/api/users/:userId', (req, res) => {\n+router.get(\"/api/users/:userId\", (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n+    const user = usersData.users.find((user) => user.id === parseInt(userId));\n \n     if (!user) {\n       return res.status(404).json({\n         success: false,\n-        message: 'User not found'\n+        message: \"User not found\",\n       });\n     }\n \n     res.json({\n       success: true,\n-      data: user\n+      data: user,\n     });\n-\n\\ No newline at end of file\n   } catch (err) {\n-    console.error('Error fetching user:', err);\n+    console.error(\"Error fetching user:\", err);\n     res.status(500).json({\n       success: false,\n-      message: 'Internal server error'\n+      message: \"Internal server error\",\n     });\n   }\n });\n \n-module.exports = router;\n+module.exports = router;\n"
                },
                {
                    "date": 1745032612973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-const express = require(\"express\");\n-const multer = require(\"multer\");\n-const path = require(\"path\");\n-const fs = require(\"fs\");\n-const cors = require(\"cors\");\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n const router = express.Router();\n const app = express();\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"public/profileImages\");\n+const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -17,100 +17,94 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use(\"/public/profileImages\", express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n     cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n     const ext = path.extname(file.originalname);\n-    cb(null, \"profile-\" + uniqueSuffix + ext);\n-  },\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n });\n \n const upload = multer({\n   storage: storage,\n   limits: {\n-    fileSize: 5 * 1024 * 1024, // 5MB limit\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n   },\n   fileFilter: (req, file, cb) => {\n-    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n     if (allowedTypes.includes(file.mimetype)) {\n       cb(null, true);\n     } else {\n-      cb(new Error(\"Only JPEG, PNG, and GIF images are allowed\"));\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n     }\n-  },\n+  }\n });\n \n // Helper functions\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, \"utf8\");\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n     return JSON.parse(data);\n   } catch (err) {\n-    console.error(\"Error reading users file:\", err);\n+    console.error('Error reading users file:', err);\n     return { users: [] };\n   }\n };\n \n const writeUsers = (users) => {\n   try {\n     fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n   } catch (err) {\n-    console.error(\"Error writing users file:\", err);\n+    console.error('Error writing users file:', err);\n     throw err;\n   }\n };\n \n // Update profile image endpoint\n-router.put(\n-  \"/api/users/:userId/profile-image\",\n-  upload.single(\"profileImage\"),\n+router.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n \n       // Validate user ID\n       if (!userId || isNaN(parseInt(userId))) {\n         return res.status(400).json({\n           success: false,\n-          message: \"Invalid user ID\",\n+          message: 'Invalid user ID'\n         });\n       }\n \n       // Check if file was uploaded\n       if (!req.file) {\n         return res.status(400).json({\n           success: false,\n-          message: \"No image file provided\",\n+          message: 'No image file provided'\n         });\n       }\n \n       const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(\n-        (user) => user.id === parseInt(userId)\n-      );\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n \n       if (userIndex === -1) {\n         return res.status(404).json({\n           success: false,\n-          message: \"User not found\",\n+          message: 'User not found'\n         });\n       }\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes(\"default-avatar\")) {\n-        const oldImagePath = path.join(\n-          PROFILE_IMAGES_DIR,\n-          path.basename(oldImage)\n-        );\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n@@ -121,49 +115,51 @@\n       writeUsers(usersData);\n \n       res.json({\n         success: true,\n-        message: \"Profile image updated successfully\",\n+        message: 'Profile image updated successfully',\n         data: {\n           profileImage: newImagePath,\n-          user: usersData.users[userIndex],\n-        },\n+          user: usersData.users[userIndex]\n+        }\n       });\n+\n     } catch (err) {\n-      console.error(\"Error updating profile image:\", err);\n+      console.error('Error updating profile image:', err);\n       res.status(500).json({\n         success: false,\n-        message: \"Internal server error\",\n-        error: err.message,\n+        message: 'Internal server error',\n+        error: err.message\n       });\n     }\n   }\n );\n \n // Get user endpoint\n-router.get(\"/api/users/:userId\", (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n-    const user = usersData.users.find((user) => user.id === parseInt(userId));\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n \n     if (!user) {\n       return res.status(404).json({\n         success: false,\n-        message: \"User not found\",\n+        message: 'User not found'\n       });\n     }\n \n     res.json({\n       success: true,\n-      data: user,\n+      data: user\n     });\n+\n   } catch (err) {\n-    console.error(\"Error fetching user:\", err);\n+    console.error('Error fetching user:', err);\n     res.status(500).json({\n       success: false,\n-      message: \"Internal server error\",\n+      message: 'Internal server error'\n     });\n   }\n });\n \n-module.exports = router;\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745032619448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-const express = require('express');\n-const multer = require('multer');\n-const path = require('path');\n-const fs = require('fs');\n-const cors = require('cors');\n+const express = require(\"express\");\n+const multer = require(\"multer\");\n+const path = require(\"path\");\n+const fs = require(\"fs\");\n+const cors = require(\"cors\");\n const router = express.Router();\n const app = express();\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -17,94 +17,100 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use(\"/public/profileImages\", express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n     cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n+    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n     const ext = path.extname(file.originalname);\n-    cb(null, 'profile-' + uniqueSuffix + ext);\n-  }\n+    cb(null, \"profile-\" + uniqueSuffix + ext);\n+  },\n });\n \n const upload = multer({\n   storage: storage,\n   limits: {\n-    fileSize: 5 * 1024 * 1024 // 5MB limit\n+    fileSize: 5 * 1024 * 1024, // 5MB limit\n   },\n   fileFilter: (req, file, cb) => {\n-    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n+    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n     if (allowedTypes.includes(file.mimetype)) {\n       cb(null, true);\n     } else {\n-      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n+      cb(new Error(\"Only JPEG, PNG, and GIF images are allowed\"));\n     }\n-  }\n+  },\n });\n \n // Helper functions\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, 'utf8');\n+    const data = fs.readFileSync(USERS_FILE, \"utf8\");\n     return JSON.parse(data);\n   } catch (err) {\n-    console.error('Error reading users file:', err);\n+    console.error(\"Error reading users file:\", err);\n     return { users: [] };\n   }\n };\n \n const writeUsers = (users) => {\n   try {\n     fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n   } catch (err) {\n-    console.error('Error writing users file:', err);\n+    console.error(\"Error writing users file:\", err);\n     throw err;\n   }\n };\n \n // Update profile image endpoint\n-router.put('/api/users/:userId/profile-image', \n-  upload.single('profileImage'), \n+router.put(\n+  \"/api/users/:userId/profile-image\",\n+  upload.single(\"profileImage\"),\n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n \n       // Validate user ID\n       if (!userId || isNaN(parseInt(userId))) {\n         return res.status(400).json({\n           success: false,\n-          message: 'Invalid user ID'\n+          message: \"Invalid user ID\",\n         });\n       }\n \n       // Check if file was uploaded\n       if (!req.file) {\n         return res.status(400).json({\n           success: false,\n-          message: 'No image file provided'\n+          message: \"No image file provided\",\n         });\n       }\n \n       const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n+      const userIndex = usersData.users.findIndex(\n+        (user) => user.id === parseInt(userId)\n+      );\n \n       if (userIndex === -1) {\n         return res.status(404).json({\n           success: false,\n-          message: 'User not found'\n+          message: \"User not found\",\n         });\n       }\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes('default-avatar')) {\n-        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n+      if (oldImage && !oldImage.includes(\"default-avatar\")) {\n+        const oldImagePath = path.join(\n+          PROFILE_IMAGES_DIR,\n+          path.basename(oldImage)\n+        );\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n@@ -115,51 +121,49 @@\n       writeUsers(usersData);\n \n       res.json({\n         success: true,\n-        message: 'Profile image updated successfully',\n+        message: \"Profile image updated successfully\",\n         data: {\n           profileImage: newImagePath,\n-          user: usersData.users[userIndex]\n-        }\n+          user: usersData.users[userIndex],\n+        },\n       });\n-\n     } catch (err) {\n-      console.error('Error updating profile image:', err);\n+      console.error(\"Error updating profile image:\", err);\n       res.status(500).json({\n         success: false,\n-        message: 'Internal server error',\n-        error: err.message\n+        message: \"Internal server error\",\n+        error: err.message,\n       });\n     }\n   }\n );\n \n // Get user endpoint\n-router.get('/api/users/:userId', (req, res) => {\n+router.get(\"/api/users/:userId\", (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n-    const user = usersData.users.find(user => user.id === parseInt(userId));\n+    const user = usersData.users.find((user) => user.id === parseInt(userId));\n \n     if (!user) {\n       return res.status(404).json({\n         success: false,\n-        message: 'User not found'\n+        message: \"User not found\",\n       });\n     }\n \n     res.json({\n       success: true,\n-      data: user\n+      data: user,\n     });\n-\n\\ No newline at end of file\n   } catch (err) {\n-    console.error('Error fetching user:', err);\n+    console.error(\"Error fetching user:\", err);\n     res.status(500).json({\n       success: false,\n-      message: 'Internal server error'\n+      message: \"Internal server error\",\n     });\n   }\n });\n \n-module.exports = router;\n+module.exports = router;\n"
                },
                {
                    "date": 1745032823910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"publicprofileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745032864663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"publicprofileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"/public/profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745033507518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const app = express();\n \n // Configuration\n const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"/public/profileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745033554246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-const express = require(\"express\");\n-const multer = require(\"multer\");\n-const path = require(\"path\");\n-const fs = require(\"fs\");\n-const cors = require(\"cors\");\n+const express = require('express');\n+const multer = require('multer');\n+const path = require('path');\n+const fs = require('fs');\n+const cors = require('cors');\n const router = express.Router();\n const app = express();\n \n // Configuration\n-const USERS_FILE = path.join(__dirname, \"../jsonFiles/account.json\");\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"public\", \"profileImages\");\n+const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -17,100 +17,94 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use(\"/public/profileImages\", express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n     cb(null, PROFILE_IMAGES_DIR);\n   },\n   filename: (req, file, cb) => {\n-    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n+    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n     const ext = path.extname(file.originalname);\n-    cb(null, \"profile-\" + uniqueSuffix + ext);\n-  },\n+    cb(null, 'profile-' + uniqueSuffix + ext);\n+  }\n });\n \n const upload = multer({\n   storage: storage,\n   limits: {\n-    fileSize: 5 * 1024 * 1024, // 5MB limit\n+    fileSize: 5 * 1024 * 1024 // 5MB limit\n   },\n   fileFilter: (req, file, cb) => {\n-    const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/gif\"];\n+    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n     if (allowedTypes.includes(file.mimetype)) {\n       cb(null, true);\n     } else {\n-      cb(new Error(\"Only JPEG, PNG, and GIF images are allowed\"));\n+      cb(new Error('Only JPEG, PNG, and GIF images are allowed'));\n     }\n-  },\n+  }\n });\n \n // Helper functions\n const readUsers = () => {\n   try {\n-    const data = fs.readFileSync(USERS_FILE, \"utf8\");\n+    const data = fs.readFileSync(USERS_FILE, 'utf8');\n     return JSON.parse(data);\n   } catch (err) {\n-    console.error(\"Error reading users file:\", err);\n+    console.error('Error reading users file:', err);\n     return { users: [] };\n   }\n };\n \n const writeUsers = (users) => {\n   try {\n     fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));\n   } catch (err) {\n-    console.error(\"Error writing users file:\", err);\n+    console.error('Error writing users file:', err);\n     throw err;\n   }\n };\n \n // Update profile image endpoint\n-router.put(\n-  \"/api/users/:userId/profile-image\",\n-  upload.single(\"profileImage\"),\n+router.put('/api/users/:userId/profile-image', \n+  upload.single('profileImage'), \n   async (req, res) => {\n     try {\n       const { userId } = req.params;\n \n       // Validate user ID\n       if (!userId || isNaN(parseInt(userId))) {\n         return res.status(400).json({\n           success: false,\n-          message: \"Invalid user ID\",\n+          message: 'Invalid user ID'\n         });\n       }\n \n       // Check if file was uploaded\n       if (!req.file) {\n         return res.status(400).json({\n           success: false,\n-          message: \"No image file provided\",\n+          message: 'No image file provided'\n         });\n       }\n \n       const usersData = readUsers();\n-      const userIndex = usersData.users.findIndex(\n-        (user) => user.id === parseInt(userId)\n-      );\n+      const userIndex = usersData.users.findIndex(user => user.id === parseInt(userId));\n \n       if (userIndex === -1) {\n         return res.status(404).json({\n           success: false,\n-          message: \"User not found\",\n+          message: 'User not found'\n         });\n       }\n \n       // Delete old profile image if it exists and isn't the default\n       const oldImage = usersData.users[userIndex].profileImage;\n-      if (oldImage && !oldImage.includes(\"default-avatar\")) {\n-        const oldImagePath = path.join(\n-          PROFILE_IMAGES_DIR,\n-          path.basename(oldImage)\n-        );\n+      if (oldImage && !oldImage.includes('default-avatar')) {\n+        const oldImagePath = path.join(PROFILE_IMAGES_DIR, path.basename(oldImage));\n         if (fs.existsSync(oldImagePath)) {\n           fs.unlinkSync(oldImagePath);\n         }\n       }\n@@ -121,49 +115,51 @@\n       writeUsers(usersData);\n \n       res.json({\n         success: true,\n-        message: \"Profile image updated successfully\",\n+        message: 'Profile image updated successfully',\n         data: {\n           profileImage: newImagePath,\n-          user: usersData.users[userIndex],\n-        },\n+          user: usersData.users[userIndex]\n+        }\n       });\n+\n     } catch (err) {\n-      console.error(\"Error updating profile image:\", err);\n+      console.error('Error updating profile image:', err);\n       res.status(500).json({\n         success: false,\n-        message: \"Internal server error\",\n-        error: err.message,\n+        message: 'Internal server error',\n+        error: err.message\n       });\n     }\n   }\n );\n \n // Get user endpoint\n-router.get(\"/api/users/:userId\", (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n-    const user = usersData.users.find((user) => user.id === parseInt(userId));\n+    const user = usersData.users.find(user => user.id === parseInt(userId));\n \n     if (!user) {\n       return res.status(404).json({\n         success: false,\n-        message: \"User not found\",\n+        message: 'User not found'\n       });\n     }\n \n     res.json({\n       success: true,\n-      data: user,\n+      data: user\n     });\n+\n   } catch (err) {\n-    console.error(\"Error fetching user:\", err);\n+    console.error('Error fetching user:', err);\n     res.status(500).json({\n       success: false,\n-      message: \"Internal server error\",\n+      message: 'Internal server error'\n     });\n   }\n });\n \n-module.exports = router;\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745034207410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const cors = require('cors');\n const router = express.Router();\n const app = express();\n \n+\n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n \n@@ -134,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-router.get('/api/users/:userId', (req, res) => {\n+.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745034214942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-.get('/api/users/:userId', (req, res) => {\n+r.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745034653410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-r.get('/api/users/:userId', (req, res) => {\n+router.get('//:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745034756091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-router.get('//:userId', (req, res) => {\n+app.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745034765677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-app.get('/api/users/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745034789666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-router.get('/api/users/:userId', (req, res) => {\n+router.get('/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745034899865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-router.get('/users/:userId', (req, res) => {\n+router.get('/usersProfileImage/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745034937445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   }\n );\n \n // Get user endpoint\n-router.get('/usersProfileImage/:userId', (req, res) => {\n+router.get('/api/users/:userId', (req, res) => {\n   try {\n     const { userId } = req.params;\n     const usersData = readUsers();\n     const user = usersData.users.find(user => user.id === parseInt(userId));\n"
                },
                {
                    "date": 1745057584429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'public', 'profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, 'publicprofileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745057590511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, 'publicprofileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, '/public/profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745057983554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use('/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745058993289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, '/public/profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, './public/profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745059099943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, './public/profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, '../public/profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745059371352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use('/pprofileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745059376715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/pprofileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745059385606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use('../public/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745059907419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, '../public/profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, '');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745059924393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, '');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, '../public/profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745060165260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, '../public/profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"\"../public/profileImages');\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745060173313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"\"../public/profileImages');\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"../public/profileImages);\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745060185325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"../public/profileImages);\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"../public/profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n@@ -18,9 +18,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('../public/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use('/profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n"
                },
                {
                    "date": 1745060245992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"../public/profileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"./public/profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745060340600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n \n // Configuration\n const USERS_FILE = path.join(__dirname, '../jsonFiles/account.json');\n-const PROFILE_IMAGES_DIR = path.join(__dirname, \"./public/profileImages\");\n+const PROFILE_IMAGES_DIR = path.join(__dirname, \"../public/profileImages\");\n \n // Ensure directories exist\n if (!fs.existsSync(PROFILE_IMAGES_DIR)) {\n   fs.mkdirSync(PROFILE_IMAGES_DIR, { recursive: true });\n"
                },
                {
                    "date": 1745060505835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `/public/profileImages/${req.file.filename}`;\n+      const newImagePath = `//profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                },
                {
                    "date": 1745060683971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n // Middleware\n app.use(cors());\n app.use(express.json());\n-app.use('/profileImages', express.static(PROFILE_IMAGES_DIR));\n+app.use('./profileImages', express.static(PROFILE_IMAGES_DIR));\n \n // Multer configuration for file uploads\n const storage = multer.diskStorage({\n   destination: (req, file, cb) => {\n@@ -110,9 +110,9 @@\n         }\n       }\n \n       // Update user with new image path\n-      const newImagePath = `//profileImages/${req.file.filename}`;\n+      const newImagePath = `/profileImages/${req.file.filename}`;\n       usersData.users[userIndex].profileImage = newImagePath;\n       writeUsers(usersData);\n \n       res.json({\n"
                }
            ],
            "date": 1742298751291,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst fs = require(\"fs\");\nconst bodyParser = require(\"body-parser\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\n\nconst router = express.Router();\nconst USERS_FILE = \"./jsonFiles/account.json\";\n\n// Middleware\nrouter.use(cors());\nrouter.use(bodyParser.json());\nrouter.use(\"/public/profileImages\", express.static(\"public/profileImages\")); // Serve profile images\n\n// Multer Configuration for Profile Image Uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadPath = \"public/profileImages\"; \n    if (!fs.existsSync(uploadPath)) fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists\n    cb(null, uploadPath);\n  },\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`); // Prevent duplicate names\n  },\n});\n\nconst upload = multer({ storage });\n\n// Read Users from File\nconst readUsers = () => {\n  try {\n    const data = fs.readFileSync(USERS_FILE);\n    return JSON.parse(data).users;\n  } catch (error) {\n    return [];\n  }\n};\n\n// Write Users to File\nconst writeUsers = (users) => {\n  fs.writeFileSync(USERS_FILE, JSON.stringify({ users }, null, 2));\n};\n\n// 🟠 *Upload and Update Profile Picture*\nrouter.put(\"/profile/update-image/:userId\", upload.single(\"profileImage\"), (req, res) => {\n  const { userId } = req.params;\n  let users = readUsers();\n  const userIndex = users.findIndex((user) => user.id === parseInt(userId));\n\n  if (userIndex === -1) return res.status(404).json({ message: \"User not found\" });\n\n  if (!req.file) return res.status(400).json({ message: \"No file uploaded\" });\n\n  // Save the correct image path\n  const imageUrl = `/profileImages/${req.file.filename}`;\n  users[userIndex].profileImage = imageUrl;\n\n  writeUsers(users);\n\n  res.json({ message: \"Profile image updated\", user: users[userIndex] });\n});\n\nmodule.exports = router;"
        }
    ]
}