{
    "sourceFile": "jsFiles/logs.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1744983151669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744983221350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,72 +42,9 @@\n \n \n const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n \n-// Get all products\n-router.get('/AllProfiles', (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n-  res.json(db.users);\n-});\n \n-router.post(\"/signin\", async (req, res) => {\n-  const { identifier, password} = req.body;\n-\n-  fs.readFile(accountPath, \"utf8\", async (err, data) => {\n-    if (err) return res.status(500).json({ error: \"Error reading database\" });\n-\n-    let db = JSON.parse(data);\n-    const user = db.users.find(user => user.email ===identifier || user.userName === identifier) \n-    if (!user) return res.status(400).json({ message: \"Invalid credentials\" });\n-    \n-\n-    // Compare password\n-    const isMatch = await bcrypt.compare(password, user.password);\n-    if (!isMatch) return res.status(400).json({ message: \"Invalid credentials\" });\n-\n-    // Generate JWT token\n-    const token = jwt.sign({ userId: user.id,role:user.role}, JWT_SECRET, { expiresIn: \"1h\" });\n-    res.json({ token , role: user.role , id:user.id,username:user.userName});\n-  });\n-});\n-\n-// *Protected Route Example*\n-router.get(\"/profile\", (req, res) => {\n-  const token = req.headers.authorization?.split(\" \")[1];\n-\n-  if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n-\n-  try {\n-    const decoded = jwt.verify(token, JWT_SECRET);\n-    \n-    fs.readFile(accountPath, \"utf8\", (err, data) => {\n-      if (err) return res.status(500).json({ error: \"Error reading database\" });\n-\n-      let db = JSON.parse(data);\n-      const user = db.users.find(user => user.id === decoded.userId);\n-      if (!user) return res.status(404).json({ message: \"User not found\" });\n-\n-      res.json(user);\n-    });\n-\n-  } catch (error) {\n-    res.status(401).json({ message: \"Invalid token\" });\n-  }\n-});\n-\n-\n-router.put('/updateProfile/:id', authenticateToken, (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n-  const userIndex = db.users.findIndex(u => u.id === parseInt(req.params.id));\n-  if (userIndex !== -1) {\n-    db.users[userIndex] = { ...db.users[userIndex], ...req.body };\n-    fs.writeFileSync(accountPath, JSON.stringify(db, null, 2));\n-    res.json(db.users[userIndex]);\n-  } else {\n-    res.status(404).json({ message: 'User not found' });\n-  }\n-});\n-\n router.post('/logs', (req, res) => {\n   const { userId, action } = req.body;\n   const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n \n"
                },
                {
                    "date": 1744983243024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,34 +101,7 @@\n   fs.writeFileSync(accountPath, JSON.stringify(db, null, 2));\n   res.status(201).json(newViewed);\n });\n \n-router.get('/viewedProducts/:userId', (req, res) => {\n-  const { userId } = req.params;\n-  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n \n-  if (!Array.isArray(db.logs)) return res.status(404).json({ error: 'No logs found' });\n \n-  // Get logs for this user\n-  const userLogs = db.logs.filter(log => log.userId === userId);\n-\n-  if (userLogs.length === 0) {\n-    return res.status(404).json({ error: 'No logs found for this user' });\n-  }\n-\n-  // Get latest log\n-  const latestLog = userLogs[userLogs.length - 1];\n-\n-  const viewedProducts = latestLog.viewedProducts || [];\n-\n-  res.json(viewedProducts);\n-});\n-\n-\n-\n-\n-router.get('/logs', (req, res) => {\n-  const db = JSON.parse(fs.readFileSync(accountPath));\n-  res.json(db.logs);\n-});\n-\n module.exports= router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744983283468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n app.use(express.urlencoded({extended:true}))\n \n \n \n-const accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n+const accountPath = path.join(__dirname, \"../jsonFiles/logs.json\");\n \n \n router.post('/logs', (req, res) => {\n   const { userId, action } = req.body;\n"
                },
                {
                    "date": 1744983415146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const cors =require(\"cors\")\n const bcrypt = require(\"bcryptjs\");\n const jwt = require(\"jsonwebtoken\");\n const dotenv = require(\"dotenv\");\n-const nodemailer = require(\"nodemailer\");\n+\n const { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n const bodyParser = require('body-parser');  // Parse incoming request bodies\n const JWT_SECRET = process.env.JWT_SECRET ;\n const router = express.Router();\n"
                },
                {
                    "date": 1744983421932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const cors =require(\"cors\")\n const bcrypt = require(\"bcryptjs\");\n const jwt = require(\"jsonwebtoken\");\n const dotenv = require(\"dotenv\");\n-\n+const nodemailer = require(\"nodemailer\");\n const { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n const bodyParser = require('body-parser');  // Parse incoming request bodies\n const JWT_SECRET = process.env.JWT_SECRET ;\n const router = express.Router();\n"
                },
                {
                    "date": 1744995368588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,7 +101,16 @@\n   fs.writeFileSync(accountPath, JSON.stringify(db, null, 2));\n   res.status(201).json(newViewed);\n });\n \n+router.get('/logs/:userId', (req, res) => {\n+    const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n+    const { userId } = req.params;\n+  \n+    if (!db.logs || !Array.isArray(db.logs[userId])) {\n+      return res.status(404).json({ error: 'No logs found for this user' });\n+    }\n+  \n+    res.status(200).json(db.logs[userId]);\n+  });\n \n-\n module.exports= router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744996517350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,6 +111,22 @@\n     }\n   \n     res.status(200).json(db.logs[userId]);\n   });\n-\n+  router.get('/viewedProducts/:userId', (req, res) => {\n+    const { userId } = req.params;\n+    const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n+  \n+    if (!db.logs || !Array.isArray(db.logs[userId])) {\n+      return res.status(404).json({ error: 'No logs found for this user' });\n+    }\n+  \n+    const userLogs = db.logs[userId];\n+    const latestLog = userLogs[userLogs.length - 1];\n+  \n+    if (!latestLog || !Array.isArray(latestLog.viewedProducts)) {\n+      return res.status(404).json({ error: 'No viewed products found for this user' });\n+    }\n+  \n+    res.status(200).json(latestLog.viewedProducts);\n+  });\n module.exports= router\n\\ No newline at end of file\n"
                }
            ],
            "date": 1744983151669,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\nconst axios = require('axios');\nconst fs = require(\"fs\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst cors =require(\"cors\")\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst dotenv = require(\"dotenv\");\nconst nodemailer = require(\"nodemailer\");\nconst { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\nconst bodyParser = require('body-parser');  // Parse incoming request bodies\nconst JWT_SECRET = process.env.JWT_SECRET ;\nconst router = express.Router();\n\nconst app = express();\n\ndotenv.config();\n\n// Middleware to verify JWT token\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Format: \"Bearer <token>\"\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token is required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    req.user = user; // Attach the decoded user data to the request\n    next();\n  });\n};\n\n\napp.use(express.json());\napp.use(express.urlencoded({extended:true}))\n\n\n\nconst accountPath = path.join(__dirname, \"../jsonFiles/account.json\");\n\n// Get all products\nrouter.get('/AllProfiles', (req, res) => {\n  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n  res.json(db.users);\n});\n\nrouter.post(\"/signin\", async (req, res) => {\n  const { identifier, password} = req.body;\n\n  fs.readFile(accountPath, \"utf8\", async (err, data) => {\n    if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n    let db = JSON.parse(data);\n    const user = db.users.find(user => user.email ===identifier || user.userName === identifier) \n    if (!user) return res.status(400).json({ message: \"Invalid credentials\" });\n    \n\n    // Compare password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({ message: \"Invalid credentials\" });\n\n    // Generate JWT token\n    const token = jwt.sign({ userId: user.id,role:user.role}, JWT_SECRET, { expiresIn: \"1h\" });\n    res.json({ token , role: user.role , id:user.id,username:user.userName});\n  });\n});\n\n// *Protected Route Example*\nrouter.get(\"/profile\", (req, res) => {\n  const token = req.headers.authorization?.split(\" \")[1];\n\n  if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    \n    fs.readFile(accountPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ error: \"Error reading database\" });\n\n      let db = JSON.parse(data);\n      const user = db.users.find(user => user.id === decoded.userId);\n      if (!user) return res.status(404).json({ message: \"User not found\" });\n\n      res.json(user);\n    });\n\n  } catch (error) {\n    res.status(401).json({ message: \"Invalid token\" });\n  }\n});\n\n\nrouter.put('/updateProfile/:id', authenticateToken, (req, res) => {\n  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n  const userIndex = db.users.findIndex(u => u.id === parseInt(req.params.id));\n  if (userIndex !== -1) {\n    db.users[userIndex] = { ...db.users[userIndex], ...req.body };\n    fs.writeFileSync(accountPath, JSON.stringify(db, null, 2));\n    res.json(db.users[userIndex]);\n  } else {\n    res.status(404).json({ message: 'User not found' });\n  }\n});\n\nrouter.post('/logs', (req, res) => {\n  const { userId, action } = req.body;\n  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n\n  // Initialize logs if not present\n  if (!db.logs) db.logs = {};\n\n  // Initialize user log array\n  if (!Array.isArray(db.logs[userId])) db.logs[userId] = [];\n\n  const newLog = {\n    id: db.logs[userId].length + 1,\n    action,\n    timestamp: new Date().toISOString()\n  };\n\n  db.logs[userId].push(newLog);\n  fs.writeFileSync(accountPath, JSON.stringify(db, null, 2));\n  res.status(201).json(newLog);\n});\n\nrouter.post('/viewedProducts', (req, res) => {\n  const { userId, productId } = req.body;\n\n  if (!userId || !productId) {\n    return res.status(400).json({ error: 'userId and productId are required' });\n  }\n\n  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n\n  // Check if user logs exist\n  if (!db.logs || !Array.isArray(db.logs[userId])) {\n    return res.status(404).json({ error: 'No log found for this user' });\n  }\n\n  const userLogs = db.logs[userId];\n  const latestLog = userLogs[userLogs.length - 1];\n\n  if (!latestLog) {\n    return res.status(404).json({ error: 'No log found for this user' });\n  }\n\n  // Ensure viewedProducts array exists\n  if (!Array.isArray(latestLog.viewedProducts)) {\n    latestLog.viewedProducts = [];\n  }\n\n  const newViewed = {\n    id: latestLog.viewedProducts.length + 1,\n    productId,\n    timestamp: new Date().toISOString()\n  };\n\n  latestLog.viewedProducts.push(newViewed);\n  fs.writeFileSync(accountPath, JSON.stringify(db, null, 2));\n  res.status(201).json(newViewed);\n});\n\nrouter.get('/viewedProducts/:userId', (req, res) => {\n  const { userId } = req.params;\n  const db = JSON.parse(fs.readFileSync(accountPath, 'utf-8'));\n\n  if (!Array.isArray(db.logs)) return res.status(404).json({ error: 'No logs found' });\n\n  // Get logs for this user\n  const userLogs = db.logs.filter(log => log.userId === userId);\n\n  if (userLogs.length === 0) {\n    return res.status(404).json({ error: 'No logs found for this user' });\n  }\n\n  // Get latest log\n  const latestLog = userLogs[userLogs.length - 1];\n\n  const viewedProducts = latestLog.viewedProducts || [];\n\n  res.json(viewedProducts);\n});\n\n\n\n\nrouter.get('/logs', (req, res) => {\n  const db = JSON.parse(fs.readFileSync(accountPath));\n  res.json(db.logs);\n});\n\nmodule.exports= router"
        }
    ]
}