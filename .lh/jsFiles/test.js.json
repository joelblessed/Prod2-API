{
    "sourceFile": "jsFiles/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1743952526387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1743952526387,
            "name": "Commit-0",
            "content": "import logo from \"./logo.svg\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { AuthContext, AuthProvider } from \"./AuthContext\";\nimport { api } from \"./config\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n  Link,\n} from \"react-router-dom\";\nimport LanguageSwitcher from \"./components/translations/languageSwitcher\";\nimport \"./components/translations/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadCartAfterLogin } from \"./cartAction\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Products from \"./components/pages/products\";\nimport WishlistPage from \"./components/pages/wishlistPage\";\nimport Cart from \"./components/Cart/cart\";\nimport Cart1 from \"./components/Cart/cart1\";\nimport Box from \"./components/pages/boxes\";\nimport Cart2 from \"./components/Cart/Cart2\";\nimport Home from \"./components/pages/Home\";\nimport NewProduct from \"./components/pages/formUpload\";\nimport Account from \"./components/account/signUP\";\nimport Discounts from \"./components/pages/discountedProducts\";\nimport SelectedProduct from \"./components/pages/selectedProduct\";\nimport Category from \"./components/pages/category\";\nimport CategoryPage from \"./components/pages/categoryPage\";\nimport EditProfilePicture from \"./components/account/editProfilPicture\";\nimport WishList from \"./components/pages/wishList\";\nimport Brand from \"./components/pages/brands\";\nimport BrandPage from \"./components/pages/brandPage\";\nimport Payment from \"./components/Payment/Payment\";\nimport Alert from \"./components/others/alert\";\nimport ShowAlert from \"./components/others/globalAlert\";\nimport CartCount from \"./components/others/cartCount\";\nimport ProductSearch from \"./components/others/search\";\nimport ProductPreview from \"./components/others/productPreview\";\nimport DesktopNavbar from \"./components/Navbar/DesktopNavbar\";\nimport MobileNavbar from \"./components/Navbar/MobileNavbar\";\nimport SignIN from \"./components/account/signIN\";\nimport SignUP from \"./components/account/signUP\";\nimport Profile from \"./components/account/profile\";\nimport EditProfile from \"./components/account/editProfile\";\nimport Dashboard from \"./components/account/dashboard\";\nimport CalculateDistance from \"./components/pages/calculateDistance\";\nimport Customer from \"./components/others/customer\";\nimport Test from \"./components/pages/test\";\nimport Orders from \"./components/orders/orders\";\nimport Orders2 from \"./components/orders/orders2\";\nimport EditProduct from \"./components/pages/editProduct\";\nimport ProductsByOwner from \"./components/pages/productsByOwner\";\nimport ShoppingCart from \"./components/others/incrementCart\";\nimport DeleteCart from \"./components/others/deleteCart\";\nimport Checkout from \"./components/Cart/checkout\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport ForgotPassword from \"./components/account/forgotPasword\";\nimport ResetPassword from \"./components/account/resetPassword\";\nimport FormUpload from \"./components/pages/formUpload\";\nimport ProductSelection from \"./components/pages/productSelection\";\nimport { addToCart } from \"./cartSlice\";\nimport DeleteProduct from \"./components/pages/deleteProduct\";\nimport Footer from \"./components/pages/footer\";\n\nfunction App() {\n  const [calalculateTotal, setCalculateTotal] = useState();\n  const [checkout, setCheckOut] = useState();\n  const [sendCart, setSendCart] = useState([]);\n  const [increment, setIncrement] = useState();\n  const [cart, setCart] = useState([]);\n  const [wishlist, setWishList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAlert, setShowAlert] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [isMobile, setIsMobile] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [displayusername, displayusernameupdate] = useState();\n  const [paymentStatus, setPaymentStatus] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState();\n  const [paymentId, setPaymentId] = useState(\"\");\n  const [product, setProduct] = useState([]);\n  const [products, setProducts] = useState([]); // full list of products\n  const [filteredProducts, setFilteredProducts] = useState([]); // filtered list\n  const [searchTerm, setSearchTerm] = useState(\"\"); // single input for filtering\n  const [categories, setCategories] = useState([]); // Unique categories\n  const [category, setCategory] = useState(\"All\");\n  const [brands, setBrands] = useState([]);\n  const [brand, setBrand] = useState(\"All\");\n  const [ownersProducts, setOwnersProducts] = useState([]);\n  const [discounts, setDiscount] = useState([]);\n  const [inwishlist, setInWishList] = useState([null]);\n  const [searchFunction, setSearchFunction] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1); // Track current page\n  const [itemsPerPage] = useState(1); // Number of items per p\n  const [likedProducts, setLikedProducts] = useState([]);\n  const [user, setUser] = useState([]);\n  const [allProfiles, setAllProfiles] = useState([]);\n  const [error, setError] = useState(null);\n  const token = localStorage.getItem(\"token\");\n  const dispatch = useDispatch();\n  const { t, i18n } = useTranslation();\n\n  const [isEnglish, setIsEnglish] = useState(i18n.language === \"en\");\n\n  // Load saved language from localStorage or default to \"en\"\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem(\"language\") || \"en\";\n    i18n.changeLanguage(savedLanguage);\n    setIsEnglish(savedLanguage === \"en\");\n  }, [i18n]);\n\n  // Function to toggle between English and French\n  const changeLanguage = () => {\n    const newLanguage = isEnglish ? \"fr\" : \"en\";\n    i18n.changeLanguage(newLanguage); // Change the language\n    localStorage.setItem(\"language\", newLanguage); // Save the selected language\n    setIsEnglish(!isEnglish); // Update the toggle state\n  };\n\n  const cartItems = useSelector((state) => state.cart.items);\n  const cartCount = cartItems.length;\n\n  const userId = Number(localStorage.getItem(\"userId\"));\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(loadCartAfterLogin(userId));\n    }\n  }, [userId, dispatch]);\n\n  // Function to check screen size\n  const handleResize = () => {\n    setIsMobile(window.innerWidth <= 760);\n  };\n\n  useEffect(() => {\n    handleResize(); // Initial check\n    window.addEventListener(\"resize\", handleResize); // Update on resize\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  /////////////////////////////////////////////////\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      setError(\"No token found\");\n      return;\n    }\n\n    fetch(`${api}/profile`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`, // Add token in the headers\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user data\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setUser(data);\n        localStorage.setItem(\"username\", data.userName);\n        localStorage.setItem(\"profileImage\", data.profileImage);\n      })\n\n      .catch((error) => setError(error.message));\n  }, []);\n\n  useEffect(() => {\n    fetch(`${api}/AllProfiles`)\n      .then((response) => response.json())\n      .then((data) => {\n        setAllProfiles(data);\n      })\n      .catch((error) => console.error(\"Error fetching profies:\", error));\n  }, []);\n\n  // //////////////////////////////////////////////\n\n  useEffect(() => {\n    fetch(`${api}/products`)\n      .then((response) => response.json())\n      .then((data) => {\n        const productsData = data.products || data;\n        setProducts(productsData);\n        setFilteredProducts(productsData);\n\n        // Extract unique categories from the products\n        const uniqueCategories = [\n          ...new Set(productsData.map((product) => product.category)),\n        ];\n        setCategories(uniqueCategories);\n\n        // Filter products that have a discount\n        const discountedProducts = productsData.filter(\n          (product) => product.discount > 0\n        );\n\n        // Set the filtered products to state\n        setDiscount(discountedProducts);\n\n        // Extract unique brands from the products\n        const uniqueBrands = [\n          ...new Set(\n            productsData.flatMap((product) =>\n              product.brand.map((bra) => bra.name)\n            )\n          ),\n        ];\n\n        setBrands(uniqueBrands);\n      })\n\n      .catch((error) => console.error(\"Error fetching products:\", error));\n  }, []);\n\n  const mobilefilteredProducts =\n    category === \"All\"\n      ? products\n      : products.filter((product) => product.category === category);\n\n  useEffect(() => {\n    fetch(`${api}/products`)\n      .then((res) => res.json())\n      .then((data) => {\n        const filteredProducts = data.filter(\n          (product) => product.ownerId === userId\n        );\n        setOwnersProducts(filteredProducts);\n      })\n      .catch((error) => console.error(\"Error fetching products:\", error));\n  }, [userId]);\n\n  // Handle filtering logic\n  const handleSearch = () => {\n    const query = searchTerm.trim().toLowerCase();\n\n    let filtered = products.filter((product) => {\n      const categoryMatch = product.category.toLowerCase().includes(query);\n      const productNameMatch = product.name.toLowerCase().includes(query);\n      const ownerNameMatch = product.owner.toLowerCase().includes(query);\n      const brandMatch = product.brand.some((b) =>\n        b.name.toLowerCase().includes(query)\n      );\n\n      return categoryMatch || productNameMatch || brandMatch || ownerNameMatch;\n    });\n\n    // Apply category filter if a category is selected\n    if (selectedCategory) {\n      filtered = filtered.filter(\n        (product) => product.category === selectedCategory\n      );\n    }\n\n    setFilteredProducts(filtered);\n    setSearchTerm(\"\"); // Clear input after search\n  };\n\n  const handleAddToCart = () => {\n    dispatch(addToCart(product));\n  };\n\n  const addToWishlist = () => {};\n\n  // const toggleLike = (product) => {\n  //   setLikedProducts((prevLiked) =>\n  //     prevLiked.includes(product.id)\n  //       ? prevLiked.filter((id) => id !== product.id)\n  //       : [...prevLiked, product.id]\n  //   );\n  // };\n\n  useEffect(() => {\n    // Fetch images from the local API\n    fetch(`${api}/cart?_sort=_id&_order=desc`) // Adjust the URL if necessary\n      .then((response) => response.json())\n      .then((data) => {\n        setCart(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching images:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  const highlightText = (text, term) => {\n    const regex = new RegExp(`(${term})`, \"gi\");\n    return text.replace(regex, \"<strong>$1</strong>\");\n  };\n\n  if (loading) {\n    return <p>loading...</p>;\n  }\n\n  const sendSearchFunction = (fn) => {\n    setSearchFunction(() => fn);\n  };\n\n  return (\n    <AuthProvider>\n      <ToastContainer theme=\"colored\" position=\"top-center\"></ToastContainer>\n\n      <Router>\n        {isMobile ? (\n          <MobileNavbar\n            cart={cart}\n            cartCount={cartCount}\n            search={handleSearch}\n            searchFunction={searchFunction}\n            setCategory={setCategory}\n            setBrand={setBrand}\n            brand={brand}\n            brands={brands}\n            categories={categories}\n            searchTerm={searchTerm}\n            setSearchTerm={setSearchTerm}\n            category={category}\n            displayusername={displayusername}\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n          />\n        ) : (\n          <DesktopNavbar\n            api={api}\n            cart={cart}\n            cartCount={cartCount}\n            search={handleSearch}\n            searchFunction={searchFunction}\n            categories={categories}\n            searchTerm={searchTerm}\n            setSearchTerm={setSearchTerm}\n            displayusername={displayusername}\n            selectedCategory={selectedCategory}\n            setSelectedCategory={setSelectedCategory}\n            changeLanguage={changeLanguage}\n          />\n        )}\n\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <Home\n                api={api}\n                brands={brands}\n                categories={categories}\n                discounts={discounts}\n                SelectedProduct={setSelectedProduct}\n                addToCart={addToCart}\n                filteredProducts={filteredProducts}\n                ownersProducts={ownersProducts}\n                mobilefilteredProducts={mobilefilteredProducts}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                searchTerm={searchTerm}\n                search={handleSearch}\n                product={setProduct}\n                getProducts={products}\n                setSearchTerm={setSearchTerm}\n                highlightText={highlightText}\n              />\n            }\n          ></Route>\n\n          <Route\n            path=\"/Products\"\n            element={\n              <Products\n                filteredProducts={filteredProducts}\n                SelectedProduct={setSelectedProduct}\n                addToCart={addToCart}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                cart={cart}\n                likedProducts={likedProducts}\n                api={api}\n                searchTerm={searchTerm}\n                selectedCategory={selectedCategory}\n                highlightText={highlightText}\n              />\n            }\n          ></Route>\n\n          <Route\n            path=\"/discountedProducts\"\n            element={\n              <Discounts\n                filteredProducts={filteredProducts}\n                SelectedProduct={setSelectedProduct}\n                addToCart={addToCart}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                cart={cart}\n                likedProducts={likedProducts}\n                api={api}\n                discounts={discounts}\n                searchTerm={searchTerm}\n                selectedCategory={selectedCategory}\n                highlightText={highlightText}\n              />\n            }\n          ></Route>\n\n          <Route\n            path=\"/selectedProduct\"\n            element={\n              <SelectedProduct\n                api={api}\n                selectedProduct={selectedProduct}\n                addToCart={addToCart}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                searchTerm={searchTerm}\n                filteredProducts={filteredProducts}\n                setSelectedProduct={setSelectedProduct}\n                cart={cart}\n                likedProducts={likedProducts}\n                selectedCategory={selectedCategory}\n                highlightText={highlightText}\n              />\n            }\n          ></Route>\n\n          <Route\n            path=\"/category\"\n            element={\n              <Category\n                api={api}\n                items={products}\n                filteredProducts={filteredProducts}\n                selectedCategory={selectedCategory}\n                SelectedProduct={setSelectedProduct}\n                mobilefilteredProducts={mobilefilteredProducts}\n                highlightText={highlightText}\n                addToCart={addToCart}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                searchTerm={searchTerm}\n                setSearchTerm={setSearchTerm}\n                getProducts={products}\n                categories={categories}\n                setCategories={setCategories}\n                sendSearchFunction={sendSearchFunction}\n                setSelectedProduct={setSelectedProduct}\n              />\n            }\n          ></Route>\n\n          <Route path=\"/boxes\" element={<Box />} />\n\n          <Route\n            path=\"/customer\"\n            element={\n              <ProtectedRoute allowedRoles={[\"admin\", \"user\"]}>\n                <Customer api={api} />\n              </ProtectedRoute>\n            }\n          ></Route>\n          <Route path=\"/signIN\" element={<SignIN api={api} />} />\n          <Route\n            path=\"/signUP\"\n            element={<SignUP api={api} allProfiles={allProfiles} />}\n          />\n          <Route\n            path=\"/orders\"\n            element={\n              <Orders\n                token={token}\n                userId={userId}\n                api={api}\n                allProfiles={allProfiles}\n              />\n            }\n          />\n          <Route\n            path=\"/orders2\"\n            element={\n              <Orders2\n                token={token}\n                userId={userId}\n                api={api}\n                allProfiles={allProfiles}\n              />\n            }\n          />\n          <Route\n            path=\"/profile\"\n            element={<Profile api={api} user={user} error={error} />}\n          />\n          <Route\n            path=\"/editProfile\"\n            element={\n              <ProtectedRoute allowedRoles={[\"admin\", \"user\"]}>\n                <EditProfile api={api} userInfo={user} error={error} />\n              </ProtectedRoute>\n            }\n          />\n          <Route path=\"/wishlist\" element={<WishList api={api} />} />\n          <Route path=\"/editProduct/:id\" element={<EditProduct api={api} />} />\n\n          <Route path=\"/deleteProduct\" element={<DeleteProduct api={api} />} />\n          <Route\n            path=\"/calculateDistance\"\n            element={<CalculateDistance api={api} />}\n          />\n          <Route\n            path=\"/editProfilePicture\"\n            element={<EditProfilePicture api={api} />}\n          />\n          <Route\n            path=\"/productsByOwner/:ownerName\"\n            element={\n              <ProductsByOwner\n                api={api}\n                items={products}\n                filteredProducts={filteredProducts}\n                selectedCategory={selectedCategory}\n                SelectedProduct={SelectedProduct}\n                mobilefilteredProducts={mobilefilteredProducts}\n                highlightText={highlightText}\n                addToCart={addToCart}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                searchTerm={searchTerm}\n                setSearchTerm={setSearchTerm}\n                getProducts={products}\n                categories={categories}\n                setCategories={setCategories}\n                sendSearchFunction={sendSearchFunction}\n                setSelectedProduct={setSelectedProduct}\n              />\n            }\n          />\n          {filteredProducts.map((product) => (\n            <Route\n              path=\"/test\"\n              element={\n                <Test\n                  api={api}\n                  token={token}\n                  product={product}\n                  likedProducts={likedProducts}\n                  filteredProducts={filteredProducts}\n                />\n              }\n            />\n          ))}\n          <Route\n            path=\"/productSelection\"\n            element={\n              <ProductSelection api={api} addToWishlist={addToWishlist} />\n            }\n          />\n          <Route\n            path=\"/languageSwitcher\"\n            element={<LanguageSwitcher api={api} />}\n          />\n\n          <Route\n            path=\"/brand\"\n            element={\n              <Brand\n                api={api}\n                filteredProducts={filteredProducts}\n                searchTerm={searchTerm}\n                addToWishlist={addToWishlist}\n              />\n            }\n          />\n          <Route\n            path=\"/brand/:brandName\"\n            element={\n              <BrandPage\n                api={api}\n                items={products}\n                mobilefilteredProducts={mobilefilteredProducts}\n                filteredProducts={filteredProducts}\n                selectedCategory={selectedCategory}\n                highlightText={highlightText}\n                addToCart={addToCart}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                searchTerm={searchTerm}\n                setSearchTerm={setSearchTerm}\n                setSelectedProduct={setSelectedProduct}\n              />\n            }\n          />\n\n          <Route\n            path=\"/wishlistPage\"\n            element={\n              <WishlistPage\n                api={api}\n                searchTerm={searchTerm}\n                highlightText={highlightText}\n                filteredProducts={filteredProducts}\n                \n              />\n            }\n          />\n\n          <Route\n            path=\"/forgotPassword\"\n            element={<ForgotPassword api={api} />}\n          />\n          <Route path=\"/resetPassword\" element={<ResetPassword api={api} />} />\n\n          <Route\n            path=\"/category/:categoryName\"\n            element={\n              <CategoryPage\n                api={api}\n                items={products}\n                mobilefilteredProducts={mobilefilteredProducts}\n                filteredProducts={filteredProducts}\n                selectedCategory={selectedCategory}\n                highlightText={highlightText}\n                SelectedProduct={setSelectedProduct}\n                addToCart={addToCart}\n                addToWishlist={addToWishlist}\n                inwishlist={inwishlist}\n                searchTerm={searchTerm}\n                setSearchTerm={setSearchTerm}\n                setSelectedProduct={setSelectedProduct}\n              />\n            }\n          />\n\n          <Route\n            path=\"/Payment\"\n            element={\n              <Payment\n                api={api}\n                amount={calalculateTotal}\n                checkout={checkout}\n                setPaymentStatus={setPaymentStatus}\n                setPhoneNumber={setPhoneNumber}\n                setPaymentId={setPaymentId}\n              />\n            }\n          />\n\n          <Route\n            path=\"/Cart2\"\n            element={\n              <Cart2\n                api={api}\n                searchTerm={searchTerm}\n                highlightText={highlightText}\n                inwishlist={inwishlist}\n              />\n            }\n          ></Route>\n          <Route\n            path=\"/cart\"\n            element={\n              <Cart\n                api={api}\n                user={user}\n                searchTerm={searchTerm}\n                highlightText={highlightText}\n                inwishlist={inwishlist}\n              />\n            }\n          ></Route>\n\n          <Route\n            path=\"/formUpload\"\n            element={\n              <ProtectedRoute allowedRoles={[\"admin\", \"user\"]}>\n                <FormUpload api={api} />\n              </ProtectedRoute>\n            }\n          />\n\n          <Route\n            path=\"/*\"\n            element={\n              <Dashboard\n                api={api}\n                user={user}\n                error={error}\n                ownersProducts={ownersProducts}\n                changeLanguage={changeLanguage}\n              />\n            }\n          />\n\n          <Route\n            path=\"/checkout\"\n            element={\n              <ProtectedRoute allowedRoles={[\"admin\", \"user\"]}>\n                <Checkout\n                  api={api}\n                  userId={userId}\n                  user={user}\n                  setCalculateTotal={setCalculateTotal}\n                  setCheckOut={setCheckOut}\n                  paymentStatus={paymentStatus}\n                  paymentNumber={phoneNumber}\n                  paymentId={paymentId}\n                />\n              </ProtectedRoute>\n            }\n          />\n          <Route path=\"/\" element={<Home />} />\n\n          {/* Redirect unknown routes */}\n          <Route path=\"*\" element={<Navigate to=\"/\" />} />\n        </Routes>\n        {/* <Test/> */}\n        <Footer />\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n"
        }
    ]
}