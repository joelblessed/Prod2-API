{
    "sourceFile": "payment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1739285172880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739285207845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \n // Endpoint: Get Created User by User ID\n // This endpoint retrieves details of a created user using their user ID.\n // It's useful for validating that a user has been created successfully.\n-app.get('/get-created-user/:userId', async (req, res) => {\n+router.get('/get-created-user/:userId', async (req, res) => {\n     const userId = req.params.userId;\n     const apiUrl = `https://${momoHost}/v1_0/apiuser/${userId}`;\n     const headers = {\n         'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY\n@@ -76,9 +76,9 @@\n \n // Endpoint: Retrieve User API Key\n // This endpoint retrieves the API key for a specific user, which is used as the password\n // in user authentication when generating a MoMo token.\n-app.post('/retrieve-api-key/:userId', async (req, res) => {\n+router.post('/retrieve-api-key/:userId', async (req, res) => {\n     const userId = req.params.userId;\n     const apiUrl = `https://${momoHost}/v1_0/apiuser/${userId}/apikey`;\n     const headers = {\n         'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY\n"
                },
                {
                    "date": 1739285228051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n \n // Endpoint: Generate MoMo Token\n // This endpoint generates a token used for authorizing payment requests.\n // The token is essential for making requests to the `/request-to-pay` endpoint.\n-app.post('/generate-api-token', async (req, res) => {\n+router.post('/generate-api-token', async (req, res) => {\n     const apiUrl = momoTokenUrl;\n     console.log('Token request details:', req.body);\n     const { userId, apiKey } = req.body;\n     const username = userId;  // Username (X-Reference-Id) from user creation step\n@@ -117,9 +117,9 @@\n \n // Endpoint: Request to Pay\n // This endpoint initiates a payment request to a specified mobile number.\n // It requires a valid MoMo token and transaction details.\n-app.post('/request-to-pay', async (req, res) => {\n+router.post('/request-to-pay', async (req, res) => {\n     try {\n         console.log('Payment request details:', req.body);\n         const { total, phone, momoTokenId } = req.body;\n \n"
                },
                {
                    "date": 1739285243033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n // Endpoint: Get Request to Pay Transaction Status\n // This operation is used to get the status of a request to pay. X-Reference-Id that was passed in the post is used as reference to the request.\n // The Bearer Authentication Token generated using CreateAccessToken API Call use to make a payment request\n // It is useful for confirming the status of a transaction initiated by the `/request-to-pay` endpoint.\n-app.get('/payment-status/:transactionId/:momoTokenId', async (req, res) => {\n+.get('/payment-status/:transactionId/:momoTokenId', async (req, res) => {\n     const transactionId = req.params.transactionId;\n     const momoTokenId = req.params.momoTokenId;\n     const apiUrl = `https://${momoHost}/collection/v1_0/requesttopay/${transactionId}`;\n     const headers = {\n"
                },
                {
                    "date": 1739285266842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n // Endpoint: Get Request to Pay Transaction Status\n // This operation is used to get the status of a request to pay. X-Reference-Id that was passed in the post is used as reference to the request.\n // The Bearer Authentication Token generated using CreateAccessToken API Call use to make a payment request\n // It is useful for confirming the status of a transaction initiated by the `/request-to-pay` endpoint.\n-.get('/payment-status/:transactionId/:momoTokenId', async (req, res) => {\n+router.get('/payment-status/:transactionId/:momoTokenId', async (req, res) => {\n     const transactionId = req.params.transactionId;\n     const momoTokenId = req.params.momoTokenId;\n     const apiUrl = `https://${momoHost}/collection/v1_0/requesttopay/${transactionId}`;\n     const headers = {\n@@ -187,7 +187,4 @@\n         res.status(500).json({ error: `An error occurred: ${error.message}` });\n     }\n });\n \n-app.listen(port, () => {\n-    console.log(`Server listening at http://localhost:${port}`);\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739285273470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,4 +187,5 @@\n         res.status(500).json({ error: `An error occurred: ${error.message}` });\n     }\n });\n \n+module\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739285281518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,5 +187,5 @@\n         res.status(500).json({ error: `An error occurred: ${error.message}` });\n     }\n });\n \n-module\n\\ No newline at end of file\n+module.exports = \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739285288985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,5 +187,5 @@\n         res.status(500).json({ error: `An error occurred: ${error.message}` });\n     }\n });\n \n-module.exports = \n\\ No newline at end of file\n+module.exports = router\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739285419109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n require('dotenv').config();  // Load environment variables from .env file\n const bodyParser = require('body-parser');  // Parse incoming request bodies\n const cors = require('cors');  // Enable Cross-Origin Resource Sharing for all routes\n const { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n-\n+const router= express.Router();\n const app = express();\n const port = 3001; // Server listening port, can be set to any preferred available port\n \n // Middleware configuration\n"
                },
                {
                    "date": 1739285446638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n const cors = require('cors');  // Enable Cross-Origin Resource Sharing for all routes\n const { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n const router= express.Router();\n const app = express();\n-const port = 3001; // Server listening port, can be set to any preferred available port\n \n+\n // Middleware configuration\n app.use(bodyParser.json());  // Support for JSON-encoded bodies\n app.use(cors());  // Apply CORS to all routes for wider accessibility\n \n"
                }
            ],
            "date": 1739285172880,
            "name": "Commit-0",
            "content": "// MoMo (Mobile Money) API Server for MTN's Collection Product Service\n// This server handles various endpoints to interact with the MTN MoMo API, \n// facilitating operations like user creation, token generation, and payment requests.\n\nconst express = require('express');\nconst axios = require('axios');\nrequire('dotenv').config();  // Load environment variables from .env file\nconst bodyParser = require('body-parser');  // Parse incoming request bodies\nconst cors = require('cors');  // Enable Cross-Origin Resource Sharing for all routes\nconst { v4: uuidv4 } = require('uuid');  // UUID generation for unique identifiers\n\nconst app = express();\nconst port = 3001; // Server listening port, can be set to any preferred available port\n\n// Middleware configuration\napp.use(bodyParser.json());  // Support for JSON-encoded bodies\napp.use(cors());  // Apply CORS to all routes for wider accessibility\n\n// MoMo API configuration\nconst momoHost = 'sandbox.momodeveloper.mtn.com';  // MoMo API host\nconst momoTokenUrl = `https://${momoHost}/collection/token/`;  // Token endpoint\nconst momoRequestToPayUrl = `https://${momoHost}/collection/v1_0/requesttopay`;  // Request to Pay endpoint\nconst MOMO_SUBSCRIPTION_KEY = process.env.MOMO_SUBSCRIPTION_KEY; //Subscription key (Primary  or Secondary key) for MoMo API, ideally stored in .env file. \n\n// Home route - Simple check to confirm the server is running\nrouter.get('/', (req, res) => {\n    res.send('MoMo API Server is up and running!');\n});\n\n// Endpoint: Create MoMo API User\n// This endpoint creates a new API user and returns the user ID (X-Reference-Id).\n// This user ID is essential for further actions like retrieving the API key.\nrouter.post('/create-api-user', async (req, res) => {\n\n    const apiUrl = `https://${momoHost}/v1_0/apiuser`;\n\n    // UUID generation for use in API calls where a unique identifier is required\n    let uuid = uuidv4();\n\n    // Headers for the MoMo API request\n    const headers = {\n        'X-Reference-Id': uuid,\n        'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY,\n        'Content-Type': 'application/json'\n    };\n    // Data payload for the API request\n    const data = {\n        providerCallbackHost: 'https://525e-41-210-145-67.ngrok-free.app'  // replace with your Callback url\n    };\n\n    try {\n        const response = await axios.post(apiUrl, data, { headers: headers });\n        res.status(200).json({ response: response.data, userId: uuid });  // Returns the response from MoMo API along with the generated userId\n    } catch (error) {\n        res.status(500).json({ message: 'Error creating API user', error: error.message });\n    }\n});\n\n// Endpoint: Get Created User by User ID\n// This endpoint retrieves details of a created user using their user ID.\n// It's useful for validating that a user has been created successfully.\napp.get('/get-created-user/:userId', async (req, res) => {\n    const userId = req.params.userId;\n    const apiUrl = `https://${momoHost}/v1_0/apiuser/${userId}`;\n    const headers = {\n        'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY\n    };\n\n    try {\n        const response = await axios.get(apiUrl, { headers: headers });\n        res.status(200).json(response.data);  // Successful retrieval returns user details\n    } catch (error) {\n        res.status(500).json({ message: 'Error retrieving created user', error: error.message });\n    }\n});\n\n// Endpoint: Retrieve User API Key\n// This endpoint retrieves the API key for a specific user, which is used as the password\n// in user authentication when generating a MoMo token.\napp.post('/retrieve-api-key/:userId', async (req, res) => {\n    const userId = req.params.userId;\n    const apiUrl = `https://${momoHost}/v1_0/apiuser/${userId}/apikey`;\n    const headers = {\n        'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY\n    };\n\n    try {\n        const response = await axios.post(apiUrl, {}, { headers: headers });\n        res.status(200).json(response.data);  // Returns the user's API key\n    } catch (error) {\n        res.status(500).json({ message: 'Error retrieving API key', error: error.message });\n    }\n});\n\n// Endpoint: Generate MoMo Token\n// This endpoint generates a token used for authorizing payment requests.\n// The token is essential for making requests to the `/request-to-pay` endpoint.\napp.post('/generate-api-token', async (req, res) => {\n    const apiUrl = momoTokenUrl;\n    console.log('Token request details:', req.body);\n    const { userId, apiKey } = req.body;\n    const username = userId;  // Username (X-Reference-Id) from user creation step\n    const password = apiKey;  // API Key retrieved from user API key step\n    const basicAuth = 'Basic ' + btoa(username + ':' + password);  // Basic Auth header\n    const headers = {\n        'Authorization': basicAuth,\n        'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY\n    };\n\n    try {\n        const response = await axios.post(apiUrl, {}, { headers: headers });\n        res.status(200).json(response.data);  // Returns the generated token\n    } catch (error) {\n        res.status(500).json({ message: 'Error generating API token', error: error.message });\n    }\n});\n\n// Endpoint: Request to Pay\n// This endpoint initiates a payment request to a specified mobile number.\n// It requires a valid MoMo token and transaction details.\napp.post('/request-to-pay', async (req, res) => {\n    try {\n        console.log('Payment request details:', req.body);\n        const { total, phone, momoTokenId } = req.body;\n\n        if (!momoTokenId) {\n            return res.status(400).json({ error: 'MoMo token not available' });\n        }\n\n        const externalId = uuidv4();\n        const body = {\n            amount: total,  // Total amount for the transaction\n            currency: 'EUR',  // Currency for the transaction\n            externalId: externalId,  // Unique ID for each transaction\n            payer: {\n                partyIdType: 'MSISDN',\n                partyId: phone,  // Phone number of the payer\n            },\n            payerMessage: 'Payment for order',\n            payeeNote: 'Payment for order',\n        };\n\n        console.log('External Id: ', body.externalId);\n\n        const paymentRefId = uuidv4();  // New UUID for the request\n        console.log('PaymentRefId: ', paymentRefId);\n        const momoResponse = await axios.post(\n            momoRequestToPayUrl,\n            body,\n            {\n                headers: {\n                    'X-Reference-Id': paymentRefId,\n                    'X-Target-Environment': 'sandbox',\n                    'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY,\n                    Authorization: `Bearer ${momoTokenId}`,\n                    'Content-Type': 'application/json',\n                },\n            }\n        );\n\n        res.json({ momoResponse: momoResponse.data, success: true, paymentRefId: paymentRefId, externalId: externalId });  // Returns response from MoMo API\n    } catch (error) {\n        console.error('Error in processing payment request:', error);\n        res.status(500).json({ error: `An error occurred: ${error.message}` });\n    }\n});\n\n// Endpoint: Get Request to Pay Transaction Status\n// This operation is used to get the status of a request to pay. X-Reference-Id that was passed in the post is used as reference to the request.\n// The Bearer Authentication Token generated using CreateAccessToken API Call use to make a payment request\n// It is useful for confirming the status of a transaction initiated by the `/request-to-pay` endpoint.\napp.get('/payment-status/:transactionId/:momoTokenId', async (req, res) => {\n    const transactionId = req.params.transactionId;\n    const momoTokenId = req.params.momoTokenId;\n    const apiUrl = `https://${momoHost}/collection/v1_0/requesttopay/${transactionId}`;\n    const headers = {\n        'Ocp-Apim-Subscription-Key': MOMO_SUBSCRIPTION_KEY,\n        Authorization: `Bearer ${momoTokenId}`,\n        'X-Target-Environment': 'sandbox'\n    };\n\n    try {\n        const response = await axios.get(apiUrl, { headers: headers });\n        res.status(200).json(response.data);  // Returns the status of the payment transaction\n    } catch (error) {\n        console.error('Error in retrieving payment status:', error);\n        res.status(500).json({ error: `An error occurred: ${error.message}` });\n    }\n});\n\napp.listen(port, () => {\n    console.log(`Server listening at http://localhost:${port}`);\n});"
        }
    ]
}