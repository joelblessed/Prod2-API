{
    "sourceFile": "passwardReset.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1739284365620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739284415939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n // Fake Email Sender (Use real SMTP for production)\n const transporter = nodemailer.createTransport({\n     service: \"gmail\",\n     auth: {\n"
                },
                {
                    "date": 1739284448135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,29 @@\n+const express = require(\"express\");\n+const axios = require(\"axios\");\n+const fs = require(\"fs\");\n+const multer = require(\"multer\");\n+const path = require(\"path\");\n+const cors = require(\"cors\");\n+const bcrypt = require(\"bcryptjs\");\n+const jwt = require(\"jsonwebtoken\");\n+const dotenv = require(\"dotenv\");\n+const nodemailer = require(\"nodemailer\");\n+const { v4: uuidv4 } = require(\"uuid\"); // UUID generation for unique identifiers\n+const bodyParser = require(\"body-parser\"); // Parse incoming request bodies\n+const app = express();\n+const accountPath = path.join(__dirname, \"account.json\");\n \n+dotenv.config();\n+\n+const JWT_SECRET = process.env.JWT_SECRET || \"mysecretkey\";\n+const SECRET_KEY = \"your-secret-key\"; // Change this in production\n+\n+app.use(bodyParser.json({ limit: \"50mb\" })); // Support for JSON-encoded bodies\n+app.use(bodyParser.urlencoded({ limit: \"50mb\", extended: true }));\n+app.use(cors());\n+app.use(express.json()); // Middleware to parse JSON requests\n+// app.use(\"upload\", express.static(\"upload\"))\n // Fake Email Sender (Use real SMTP for production)\n const transporter = nodemailer.createTransport({\n     service: \"gmail\",\n     auth: {\n"
                },
                {
                    "date": 1739284477098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,11 @@\n const nodemailer = require(\"nodemailer\");\n const { v4: uuidv4 } = require(\"uuid\"); // UUID generation for unique identifiers\n const bodyParser = require(\"body-parser\"); // Parse incoming request bodies\n const app = express();\n+const router= express.Router();\n+\n const accountPath = path.join(__dirname, \"account.json\");\n-\n dotenv.config();\n \n const JWT_SECRET = process.env.JWT_SECRET || \"mysecretkey\";\n const SECRET_KEY = \"your-secret-key\"; // Change this in production\n"
                },
                {
                    "date": 1739284507341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,12 @@\n const { v4: uuidv4 } = require(\"uuid\"); // UUID generation for unique identifiers\n const bodyParser = require(\"body-parser\"); // Parse incoming request bodies\n const app = express();\n const router= express.Router();\n-\n const accountPath = path.join(__dirname, \"account.json\");\n dotenv.config();\n \n-const JWT_SECRET = process.env.JWT_SECRET || \"mysecretkey\";\n+\n const SECRET_KEY = \"your-secret-key\"; // Change this in production\n \n app.use(bodyParser.json({ limit: \"50mb\" })); // Support for JSON-encoded bodies\n app.use(bodyParser.urlencoded({ limit: \"50mb\", extended: true }));\n"
                },
                {
                    "date": 1739284540284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,9 @@\n \n \n const SECRET_KEY = \"your-secret-key\"; // Change this in production\n \n-app.use(bodyParser.json({ limit: \"50mb\" })); // Support for JSON-encoded bodies\n-app.use(bodyParser.urlencoded({ limit: \"50mb\", extended: true }));\n-app.use(cors());\n-app.use(express.json()); // Middleware to parse JSON requests\n-// app.use(\"upload\", express.static(\"upload\"))\n+\n // Fake Email Sender (Use real SMTP for production)\n const transporter = nodemailer.createTransport({\n     service: \"gmail\",\n     auth: {\n"
                },
                {
                    "date": 1739284558931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const jwt = require(\"jsonwebtoken\");\n const dotenv = require(\"dotenv\");\n const nodemailer = require(\"nodemailer\");\n const { v4: uuidv4 } = require(\"uuid\"); // UUID generation for unique identifiers\n-const bodyParser = require(\"body-parser\"); // Parse incoming request bodies\n+\n const app = express();\n const router= express.Router();\n const accountPath = path.join(__dirname, \"account.json\");\n dotenv.config();\n"
                },
                {
                    "date": 1739284566514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n const bcrypt = require(\"bcryptjs\");\n const jwt = require(\"jsonwebtoken\");\n const dotenv = require(\"dotenv\");\n const nodemailer = require(\"nodemailer\");\n-const { v4: uuidv4 } = require(\"uuid\"); // UUID generation for unique identifiers\n \n+\n const app = express();\n const router= express.Router();\n const accountPath = path.join(__dirname, \"account.json\");\n dotenv.config();\n"
                },
                {
                    "date": 1739284575994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n const express = require(\"express\");\n const axios = require(\"axios\");\n const fs = require(\"fs\");\n-const multer = require(\"multer\");\n const path = require(\"path\");\n-const cors = require(\"cors\");\n+\n const bcrypt = require(\"bcryptjs\");\n const jwt = require(\"jsonwebtoken\");\n const dotenv = require(\"dotenv\");\n const nodemailer = require(\"nodemailer\");\n"
                },
                {
                    "date": 1739284581474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const express = require(\"express\");\n-const axios = require(\"axios\");\n+\n const fs = require(\"fs\");\n const path = require(\"path\");\n \n const bcrypt = require(\"bcryptjs\");\n"
                },
                {
                    "date": 1739284589406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,11 @@\n const express = require(\"express\");\n-\n const fs = require(\"fs\");\n const path = require(\"path\");\n-\n const bcrypt = require(\"bcryptjs\");\n const jwt = require(\"jsonwebtoken\");\n const dotenv = require(\"dotenv\");\n const nodemailer = require(\"nodemailer\");\n-\n-\n const app = express();\n const router= express.Router();\n const accountPath = path.join(__dirname, \"account.json\");\n dotenv.config();\n"
                },
                {
                    "date": 1739284652014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,5 +81,7 @@\n     } catch (err) {\n       res.status(400).json({ message: \"Invalid or expired token\" });\n     }\n   });\n+\n+  \n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739284657528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,6 +82,6 @@\n       res.status(400).json({ message: \"Invalid or expired token\" });\n     }\n   });\n \n-  \n+  module\n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739284666872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,6 +82,6 @@\n       res.status(400).json({ message: \"Invalid or expired token\" });\n     }\n   });\n \n-  module\n+  module.exports = \n   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739284672721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,6 +82,6 @@\n       res.status(400).json({ message: \"Invalid or expired token\" });\n     }\n   });\n \n-  module.exports = \n+  module.exports = router\n   \n\\ No newline at end of file\n"
                }
            ],
            "date": 1739284365620,
            "name": "Commit-0",
            "content": "// Fake Email Sender (Use real SMTP for production)\nconst transporter = nodemailer.createTransport({\n    service: \"gmail\",\n    auth: {\n      user: \"your-email@gmail.com\",\n      pass: \"your-email-password\",\n    },\n  });\n  \n  // *1. Forgot Password: Generate Reset Link*\n  app.post(\"/forgot-password\", (req, res) => {\n    const { email } = req.body;\n  \n    fs.readFile(accountPath, \"utf8\", (err, data) => {\n      if (err) return res.status(500).json({ message: \"Error reading database\" });\n  \n      let db = JSON.parse(data);\n      let user = db.users.find((u) => u.email === email);\n      if (!user) return res.status(400).json({ message: \"User not found\" });\n  \n      // Generate Reset Token (Valid for 15 minutes)\n      const token = jwt.sign({ email }, SECRET_KEY, { expiresIn: \"15m\" });\n      const resetLink = `http://localhost:3000/reset-password/${token}`;\n  \n      // Send Email\n      transporter.sendMail({\n        from: \"your-email@gmail.com\",\n        to: email,\n        subject: \"Password Reset\",\n        text: `Click the link to reset your password: ${resetLink}`,\n      });\n  \n      res.json({ message: \"Password reset link sent to email.\" });\n    });\n  });\n  \n  // *2. Reset Password: Validate Token & Update Password*\n  app.post(\"/reset-password\", async (req, res) => {\n    const { token, newPassword } = req.body;\n  \n    try {\n      const decoded = jwt.verify(token, SECRET_KEY);\n      const email = decoded.email;\n  \n      fs.readFile(accountPath, \"utf8\", async (err, data) => {\n        if (err)\n          return res.status(500).json({ message: \"Error reading database\" });\n  \n        let db = JSON.parse(data);\n        let user = db.users.find((u) => u.email === email);\n        if (!user)\n          return res\n            .status(400)\n            .json({ message: \"Invalid token or user not found\" });\n  \n        // Hash the new password\n        user.password = await bcrypt.hash(newPassword, 10);\n  \n        fs.writeFile(accountPath, JSON.stringify(db, null, 2), (err) => {\n          if (err)\n            return res.status(500).json({ message: \"Error updating password\" });\n          res.json({ message: \"Password updated successfully\" });\n        });\n      });\n    } catch (err) {\n      res.status(400).json({ message: \"Invalid or expired token\" });\n    }\n  });\n  "
        }
    ]
}